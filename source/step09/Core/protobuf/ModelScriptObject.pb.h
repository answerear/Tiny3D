// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModelScriptObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonScriptObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ModelScriptObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ModelScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace ModelSystem {
class Aabb;
class AabbDefaultTypeInternal;
extern AabbDefaultTypeInternal _Aabb_default_instance_;
class AnimationClip;
class AnimationClipDefaultTypeInternal;
extern AnimationClipDefaultTypeInternal _AnimationClip_default_instance_;
class Bound;
class BoundDefaultTypeInternal;
extern BoundDefaultTypeInternal _Bound_default_instance_;
class IndexBuffer;
class IndexBufferDefaultTypeInternal;
extern IndexBufferDefaultTypeInternal _IndexBuffer_default_instance_;
class Keyframe;
class KeyframeDefaultTypeInternal;
extern KeyframeDefaultTypeInternal _Keyframe_default_instance_;
class KeyframeData;
class KeyframeDataDefaultTypeInternal;
extern KeyframeDataDefaultTypeInternal _KeyframeData_default_instance_;
class MeshData;
class MeshDataDefaultTypeInternal;
extern MeshDataDefaultTypeInternal _MeshData_default_instance_;
class MeshData_OffsetEntry_DoNotUse;
class MeshData_OffsetEntry_DoNotUseDefaultTypeInternal;
extern MeshData_OffsetEntry_DoNotUseDefaultTypeInternal _MeshData_OffsetEntry_DoNotUse_default_instance_;
class Obb;
class ObbDefaultTypeInternal;
extern ObbDefaultTypeInternal _Obb_default_instance_;
class Sphere;
class SphereDefaultTypeInternal;
extern SphereDefaultTypeInternal _Sphere_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
class VertexAttribute;
class VertexAttributeDefaultTypeInternal;
extern VertexAttributeDefaultTypeInternal _VertexAttribute_default_instance_;
class VertexBuffer;
class VertexBufferDefaultTypeInternal;
extern VertexBufferDefaultTypeInternal _VertexBuffer_default_instance_;
}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> ::Tiny3D::Script::ModelSystem::Aabb* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Aabb>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::AnimationClip* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::AnimationClip>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Bound* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Bound>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::IndexBuffer* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::IndexBuffer>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Keyframe* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Keyframe>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::KeyframeData* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::KeyframeData>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::MeshData* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::MeshData>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Obb* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Obb>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Sphere* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Sphere>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Vertex* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Vertex>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::VertexAttribute* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::VertexAttribute>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::VertexBuffer* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::VertexBuffer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tiny3D {
namespace Script {
namespace ModelSystem {

enum VertexAttribute_Semantic : int {
  VertexAttribute_Semantic_VAS_POSITION = 0,
  VertexAttribute_Semantic_VAS_TEXCOORD = 1,
  VertexAttribute_Semantic_VAS_NORMAL = 2,
  VertexAttribute_Semantic_VAS_TANGENT = 3,
  VertexAttribute_Semantic_VAS_BINORMAL = 4,
  VertexAttribute_Semantic_VAS_DIFFUSE = 5,
  VertexAttribute_Semantic_VAS_SPECULAR = 6,
  VertexAttribute_Semantic_VAS_BLENDINDEX = 7,
  VertexAttribute_Semantic_VAS_BLENDWEIGHT = 8,
  VertexAttribute_Semantic_VertexAttribute_Semantic_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VertexAttribute_Semantic_VertexAttribute_Semantic_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VertexAttribute_Semantic_IsValid(int value);
constexpr VertexAttribute_Semantic VertexAttribute_Semantic_Semantic_MIN = VertexAttribute_Semantic_VAS_POSITION;
constexpr VertexAttribute_Semantic VertexAttribute_Semantic_Semantic_MAX = VertexAttribute_Semantic_VAS_BLENDWEIGHT;
constexpr int VertexAttribute_Semantic_Semantic_ARRAYSIZE = VertexAttribute_Semantic_Semantic_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VertexAttribute_Semantic_descriptor();
template<typename T>
inline const std::string& VertexAttribute_Semantic_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VertexAttribute_Semantic>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VertexAttribute_Semantic_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VertexAttribute_Semantic_descriptor(), enum_t_value);
}
inline bool VertexAttribute_Semantic_Parse(
    const std::string& name, VertexAttribute_Semantic* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VertexAttribute_Semantic>(
    VertexAttribute_Semantic_descriptor(), name, value);
}
enum VertexAttribute_Type : int {
  VertexAttribute_Type_VAT_FLOAT = 0,
  VertexAttribute_Type_VAT_DOUBLE = 1,
  VertexAttribute_Type_VAT_INT8 = 2,
  VertexAttribute_Type_VAT_INT16 = 3,
  VertexAttribute_Type_VAT_INT32 = 4,
  VertexAttribute_Type_VAT_INT64 = 5,
  VertexAttribute_Type_VertexAttribute_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VertexAttribute_Type_VertexAttribute_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VertexAttribute_Type_IsValid(int value);
constexpr VertexAttribute_Type VertexAttribute_Type_Type_MIN = VertexAttribute_Type_VAT_FLOAT;
constexpr VertexAttribute_Type VertexAttribute_Type_Type_MAX = VertexAttribute_Type_VAT_INT64;
constexpr int VertexAttribute_Type_Type_ARRAYSIZE = VertexAttribute_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VertexAttribute_Type_descriptor();
template<typename T>
inline const std::string& VertexAttribute_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VertexAttribute_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VertexAttribute_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VertexAttribute_Type_descriptor(), enum_t_value);
}
inline bool VertexAttribute_Type_Parse(
    const std::string& name, VertexAttribute_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VertexAttribute_Type>(
    VertexAttribute_Type_descriptor(), name, value);
}
enum Bound_Type : int {
  Bound_Type_BT_SPHERE = 0,
  Bound_Type_BT_AABB = 1,
  Bound_Type_BT_OBB = 2,
  Bound_Type_Bound_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Bound_Type_Bound_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Bound_Type_IsValid(int value);
constexpr Bound_Type Bound_Type_Type_MIN = Bound_Type_BT_SPHERE;
constexpr Bound_Type Bound_Type_Type_MAX = Bound_Type_BT_OBB;
constexpr int Bound_Type_Type_ARRAYSIZE = Bound_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bound_Type_descriptor();
template<typename T>
inline const std::string& Bound_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bound_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bound_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bound_Type_descriptor(), enum_t_value);
}
inline bool Bound_Type_Parse(
    const std::string& name, Bound_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bound_Type>(
    Bound_Type_descriptor(), name, value);
}
enum Keyframe_Type : int {
  Keyframe_Type_KT_TRANSLATION = 0,
  Keyframe_Type_KT_ROTATION = 1,
  Keyframe_Type_KT_SCALING = 2,
  Keyframe_Type_Keyframe_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Keyframe_Type_Keyframe_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Keyframe_Type_IsValid(int value);
constexpr Keyframe_Type Keyframe_Type_Type_MIN = Keyframe_Type_KT_TRANSLATION;
constexpr Keyframe_Type Keyframe_Type_Type_MAX = Keyframe_Type_KT_SCALING;
constexpr int Keyframe_Type_Type_ARRAYSIZE = Keyframe_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Keyframe_Type_descriptor();
template<typename T>
inline const std::string& Keyframe_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Keyframe_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Keyframe_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Keyframe_Type_descriptor(), enum_t_value);
}
inline bool Keyframe_Type_Parse(
    const std::string& name, Keyframe_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Keyframe_Type>(
    Keyframe_Type_descriptor(), name, value);
}
enum PrimitiveType : int {
  PT_POINT_LIST = 0,
  PT_LINE_LIST = 1,
  PT_LINE_STRIP = 2,
  PT_TRIANGLE_LIST = 3,
  PT_TRIANGLE_STRIP = 4,
  PT_TRIANGLE_FAN = 5,
  PrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PrimitiveType_IsValid(int value);
constexpr PrimitiveType PrimitiveType_MIN = PT_POINT_LIST;
constexpr PrimitiveType PrimitiveType_MAX = PT_TRIANGLE_FAN;
constexpr int PrimitiveType_ARRAYSIZE = PrimitiveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimitiveType_descriptor();
template<typename T>
inline const std::string& PrimitiveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrimitiveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrimitiveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrimitiveType_descriptor(), enum_t_value);
}
inline bool PrimitiveType_Parse(
    const std::string& name, PrimitiveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrimitiveType>(
    PrimitiveType_descriptor(), name, value);
}
// ===================================================================

class VertexAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.VertexAttribute) */ {
 public:
  VertexAttribute();
  virtual ~VertexAttribute();

  VertexAttribute(const VertexAttribute& from);
  VertexAttribute(VertexAttribute&& from) noexcept
    : VertexAttribute() {
    *this = ::std::move(from);
  }

  inline VertexAttribute& operator=(const VertexAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexAttribute& operator=(VertexAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexAttribute* internal_default_instance() {
    return reinterpret_cast<const VertexAttribute*>(
               &_VertexAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VertexAttribute& a, VertexAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexAttribute* New() const final {
    return CreateMaybeMessage<VertexAttribute>(nullptr);
  }

  VertexAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexAttribute& from);
  void MergeFrom(const VertexAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.VertexAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VertexAttribute_Semantic Semantic;
  static constexpr Semantic VAS_POSITION =
    VertexAttribute_Semantic_VAS_POSITION;
  static constexpr Semantic VAS_TEXCOORD =
    VertexAttribute_Semantic_VAS_TEXCOORD;
  static constexpr Semantic VAS_NORMAL =
    VertexAttribute_Semantic_VAS_NORMAL;
  static constexpr Semantic VAS_TANGENT =
    VertexAttribute_Semantic_VAS_TANGENT;
  static constexpr Semantic VAS_BINORMAL =
    VertexAttribute_Semantic_VAS_BINORMAL;
  static constexpr Semantic VAS_DIFFUSE =
    VertexAttribute_Semantic_VAS_DIFFUSE;
  static constexpr Semantic VAS_SPECULAR =
    VertexAttribute_Semantic_VAS_SPECULAR;
  static constexpr Semantic VAS_BLENDINDEX =
    VertexAttribute_Semantic_VAS_BLENDINDEX;
  static constexpr Semantic VAS_BLENDWEIGHT =
    VertexAttribute_Semantic_VAS_BLENDWEIGHT;
  static inline bool Semantic_IsValid(int value) {
    return VertexAttribute_Semantic_IsValid(value);
  }
  static constexpr Semantic Semantic_MIN =
    VertexAttribute_Semantic_Semantic_MIN;
  static constexpr Semantic Semantic_MAX =
    VertexAttribute_Semantic_Semantic_MAX;
  static constexpr int Semantic_ARRAYSIZE =
    VertexAttribute_Semantic_Semantic_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Semantic_descriptor() {
    return VertexAttribute_Semantic_descriptor();
  }
  template<typename T>
  static inline const std::string& Semantic_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Semantic>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Semantic_Name.");
    return VertexAttribute_Semantic_Name(enum_t_value);
  }
  static inline bool Semantic_Parse(const std::string& name,
      Semantic* value) {
    return VertexAttribute_Semantic_Parse(name, value);
  }

  typedef VertexAttribute_Type Type;
  static constexpr Type VAT_FLOAT =
    VertexAttribute_Type_VAT_FLOAT;
  static constexpr Type VAT_DOUBLE =
    VertexAttribute_Type_VAT_DOUBLE;
  static constexpr Type VAT_INT8 =
    VertexAttribute_Type_VAT_INT8;
  static constexpr Type VAT_INT16 =
    VertexAttribute_Type_VAT_INT16;
  static constexpr Type VAT_INT32 =
    VertexAttribute_Type_VAT_INT32;
  static constexpr Type VAT_INT64 =
    VertexAttribute_Type_VAT_INT64;
  static inline bool Type_IsValid(int value) {
    return VertexAttribute_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    VertexAttribute_Type_Type_MIN;
  static constexpr Type Type_MAX =
    VertexAttribute_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    VertexAttribute_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return VertexAttribute_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return VertexAttribute_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return VertexAttribute_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSemanticFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // .Tiny3D.Script.ModelSystem.VertexAttribute.Semantic semantic = 1;
  void clear_semantic();
  ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic semantic() const;
  void set_semantic(::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic value);
  private:
  ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic _internal_semantic() const;
  void _internal_set_semantic(::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic value);
  public:

  // .Tiny3D.Script.ModelSystem.VertexAttribute.Type type = 2;
  void clear_type();
  ::Tiny3D::Script::ModelSystem::VertexAttribute_Type type() const;
  void set_type(::Tiny3D::Script::ModelSystem::VertexAttribute_Type value);
  private:
  ::Tiny3D::Script::ModelSystem::VertexAttribute_Type _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::ModelSystem::VertexAttribute_Type value);
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.VertexAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int semantic_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Vertex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Vertex) */ {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);
  Vertex(Vertex&& from) noexcept
    : Vertex() {
    *this = ::std::move(from);
  }

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vertex& operator=(Vertex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vertex& default_instance();

  enum ExtensionCase {
    kTexcoord = 2,
    kNormal = 3,
    kTangent = 4,
    kBinormal = 5,
    kDiffuse = 6,
    kSpecular = 7,
    kBlendIndices = 8,
    kBlendWeights = 9,
    EXTENSION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vertex& a, Vertex& b) {
    a.Swap(&b);
  }
  inline void Swap(Vertex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vertex* New() const final {
    return CreateMaybeMessage<Vertex>(nullptr);
  }

  Vertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vertex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vertex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Vertex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kTexcoordFieldNumber = 2,
    kNormalFieldNumber = 3,
    kTangentFieldNumber = 4,
    kBinormalFieldNumber = 5,
    kDiffuseFieldNumber = 6,
    kSpecularFieldNumber = 7,
    kBlendIndicesFieldNumber = 8,
    kBlendWeightsFieldNumber = 9,
  };
  // .Tiny3D.Script.Vector3 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Tiny3D::Script::Vector3& pos() const;
  ::Tiny3D::Script::Vector3* release_pos();
  ::Tiny3D::Script::Vector3* mutable_pos();
  void set_allocated_pos(::Tiny3D::Script::Vector3* pos);
  private:
  const ::Tiny3D::Script::Vector3& _internal_pos() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_pos();
  public:

  // .Tiny3D.Script.Vector2List texcoord = 2;
  bool has_texcoord() const;
  private:
  bool _internal_has_texcoord() const;
  public:
  void clear_texcoord();
  const ::Tiny3D::Script::Vector2List& texcoord() const;
  ::Tiny3D::Script::Vector2List* release_texcoord();
  ::Tiny3D::Script::Vector2List* mutable_texcoord();
  void set_allocated_texcoord(::Tiny3D::Script::Vector2List* texcoord);
  private:
  const ::Tiny3D::Script::Vector2List& _internal_texcoord() const;
  ::Tiny3D::Script::Vector2List* _internal_mutable_texcoord();
  public:

  // .Tiny3D.Script.Vector3List normal = 3;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::Tiny3D::Script::Vector3List& normal() const;
  ::Tiny3D::Script::Vector3List* release_normal();
  ::Tiny3D::Script::Vector3List* mutable_normal();
  void set_allocated_normal(::Tiny3D::Script::Vector3List* normal);
  private:
  const ::Tiny3D::Script::Vector3List& _internal_normal() const;
  ::Tiny3D::Script::Vector3List* _internal_mutable_normal();
  public:

  // .Tiny3D.Script.Vector3List tangent = 4;
  bool has_tangent() const;
  private:
  bool _internal_has_tangent() const;
  public:
  void clear_tangent();
  const ::Tiny3D::Script::Vector3List& tangent() const;
  ::Tiny3D::Script::Vector3List* release_tangent();
  ::Tiny3D::Script::Vector3List* mutable_tangent();
  void set_allocated_tangent(::Tiny3D::Script::Vector3List* tangent);
  private:
  const ::Tiny3D::Script::Vector3List& _internal_tangent() const;
  ::Tiny3D::Script::Vector3List* _internal_mutable_tangent();
  public:

  // .Tiny3D.Script.Vector3List binormal = 5;
  bool has_binormal() const;
  private:
  bool _internal_has_binormal() const;
  public:
  void clear_binormal();
  const ::Tiny3D::Script::Vector3List& binormal() const;
  ::Tiny3D::Script::Vector3List* release_binormal();
  ::Tiny3D::Script::Vector3List* mutable_binormal();
  void set_allocated_binormal(::Tiny3D::Script::Vector3List* binormal);
  private:
  const ::Tiny3D::Script::Vector3List& _internal_binormal() const;
  ::Tiny3D::Script::Vector3List* _internal_mutable_binormal();
  public:

  // .Tiny3D.Script.ColorList diffuse = 6;
  bool has_diffuse() const;
  private:
  bool _internal_has_diffuse() const;
  public:
  void clear_diffuse();
  const ::Tiny3D::Script::ColorList& diffuse() const;
  ::Tiny3D::Script::ColorList* release_diffuse();
  ::Tiny3D::Script::ColorList* mutable_diffuse();
  void set_allocated_diffuse(::Tiny3D::Script::ColorList* diffuse);
  private:
  const ::Tiny3D::Script::ColorList& _internal_diffuse() const;
  ::Tiny3D::Script::ColorList* _internal_mutable_diffuse();
  public:

  // .Tiny3D.Script.ColorList specular = 7;
  bool has_specular() const;
  private:
  bool _internal_has_specular() const;
  public:
  void clear_specular();
  const ::Tiny3D::Script::ColorList& specular() const;
  ::Tiny3D::Script::ColorList* release_specular();
  ::Tiny3D::Script::ColorList* mutable_specular();
  void set_allocated_specular(::Tiny3D::Script::ColorList* specular);
  private:
  const ::Tiny3D::Script::ColorList& _internal_specular() const;
  ::Tiny3D::Script::ColorList* _internal_mutable_specular();
  public:

  // .Tiny3D.Script.UintList blend_indices = 8;
  bool has_blend_indices() const;
  private:
  bool _internal_has_blend_indices() const;
  public:
  void clear_blend_indices();
  const ::Tiny3D::Script::UintList& blend_indices() const;
  ::Tiny3D::Script::UintList* release_blend_indices();
  ::Tiny3D::Script::UintList* mutable_blend_indices();
  void set_allocated_blend_indices(::Tiny3D::Script::UintList* blend_indices);
  private:
  const ::Tiny3D::Script::UintList& _internal_blend_indices() const;
  ::Tiny3D::Script::UintList* _internal_mutable_blend_indices();
  public:

  // .Tiny3D.Script.FloatList blend_weights = 9;
  bool has_blend_weights() const;
  private:
  bool _internal_has_blend_weights() const;
  public:
  void clear_blend_weights();
  const ::Tiny3D::Script::FloatList& blend_weights() const;
  ::Tiny3D::Script::FloatList* release_blend_weights();
  ::Tiny3D::Script::FloatList* mutable_blend_weights();
  void set_allocated_blend_weights(::Tiny3D::Script::FloatList* blend_weights);
  private:
  const ::Tiny3D::Script::FloatList& _internal_blend_weights() const;
  ::Tiny3D::Script::FloatList* _internal_mutable_blend_weights();
  public:

  void clear_Extension();
  ExtensionCase Extension_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Vertex)
 private:
  class _Internal;
  void set_has_texcoord();
  void set_has_normal();
  void set_has_tangent();
  void set_has_binormal();
  void set_has_diffuse();
  void set_has_specular();
  void set_has_blend_indices();
  void set_has_blend_weights();

  inline bool has_Extension() const;
  inline void clear_has_Extension();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::Vector3* pos_;
  union ExtensionUnion {
    ExtensionUnion() {}
    ::Tiny3D::Script::Vector2List* texcoord_;
    ::Tiny3D::Script::Vector3List* normal_;
    ::Tiny3D::Script::Vector3List* tangent_;
    ::Tiny3D::Script::Vector3List* binormal_;
    ::Tiny3D::Script::ColorList* diffuse_;
    ::Tiny3D::Script::ColorList* specular_;
    ::Tiny3D::Script::UintList* blend_indices_;
    ::Tiny3D::Script::FloatList* blend_weights_;
  } Extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class VertexBuffer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.VertexBuffer) */ {
 public:
  VertexBuffer();
  virtual ~VertexBuffer();

  VertexBuffer(const VertexBuffer& from);
  VertexBuffer(VertexBuffer&& from) noexcept
    : VertexBuffer() {
    *this = ::std::move(from);
  }

  inline VertexBuffer& operator=(const VertexBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexBuffer& operator=(VertexBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexBuffer* internal_default_instance() {
    return reinterpret_cast<const VertexBuffer*>(
               &_VertexBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VertexBuffer& a, VertexBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexBuffer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexBuffer* New() const final {
    return CreateMaybeMessage<VertexBuffer>(nullptr);
  }

  VertexBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexBuffer& from);
  void MergeFrom(const VertexBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.VertexBuffer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kVerticesFieldNumber = 2,
  };
  // repeated .Tiny3D.Script.ModelSystem.VertexAttribute attributes = 1;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::Tiny3D::Script::ModelSystem::VertexAttribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute >*
      mutable_attributes();
  private:
  const ::Tiny3D::Script::ModelSystem::VertexAttribute& _internal_attributes(int index) const;
  ::Tiny3D::Script::ModelSystem::VertexAttribute* _internal_add_attributes();
  public:
  const ::Tiny3D::Script::ModelSystem::VertexAttribute& attributes(int index) const;
  ::Tiny3D::Script::ModelSystem::VertexAttribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute >&
      attributes() const;

  // repeated .Tiny3D.Script.ModelSystem.Vertex vertices = 2;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::Tiny3D::Script::ModelSystem::Vertex* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Vertex >*
      mutable_vertices();
  private:
  const ::Tiny3D::Script::ModelSystem::Vertex& _internal_vertices(int index) const;
  ::Tiny3D::Script::ModelSystem::Vertex* _internal_add_vertices();
  public:
  const ::Tiny3D::Script::ModelSystem::Vertex& vertices(int index) const;
  ::Tiny3D::Script::ModelSystem::Vertex* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Vertex >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.VertexBuffer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Vertex > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Sphere :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Sphere) */ {
 public:
  Sphere();
  virtual ~Sphere();

  Sphere(const Sphere& from);
  Sphere(Sphere&& from) noexcept
    : Sphere() {
    *this = ::std::move(from);
  }

  inline Sphere& operator=(const Sphere& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sphere& operator=(Sphere&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sphere& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sphere* internal_default_instance() {
    return reinterpret_cast<const Sphere*>(
               &_Sphere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Sphere& a, Sphere& b) {
    a.Swap(&b);
  }
  inline void Swap(Sphere* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sphere* New() const final {
    return CreateMaybeMessage<Sphere>(nullptr);
  }

  Sphere* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sphere>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sphere& from);
  void MergeFrom(const Sphere& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sphere* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Sphere";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .Tiny3D.Script.Vector3 center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::Tiny3D::Script::Vector3& center() const;
  ::Tiny3D::Script::Vector3* release_center();
  ::Tiny3D::Script::Vector3* mutable_center();
  void set_allocated_center(::Tiny3D::Script::Vector3* center);
  private:
  const ::Tiny3D::Script::Vector3& _internal_center() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_center();
  public:

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Sphere)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::Vector3* center_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Aabb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Aabb) */ {
 public:
  Aabb();
  virtual ~Aabb();

  Aabb(const Aabb& from);
  Aabb(Aabb&& from) noexcept
    : Aabb() {
    *this = ::std::move(from);
  }

  inline Aabb& operator=(const Aabb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aabb& operator=(Aabb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Aabb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Aabb* internal_default_instance() {
    return reinterpret_cast<const Aabb*>(
               &_Aabb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Aabb& a, Aabb& b) {
    a.Swap(&b);
  }
  inline void Swap(Aabb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Aabb* New() const final {
    return CreateMaybeMessage<Aabb>(nullptr);
  }

  Aabb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Aabb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Aabb& from);
  void MergeFrom(const Aabb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aabb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Aabb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinXFieldNumber = 1,
    kMaxXFieldNumber = 2,
    kMinYFieldNumber = 3,
    kMaxYFieldNumber = 4,
    kMinZFieldNumber = 5,
    kMaxZFieldNumber = 6,
  };
  // float min_x = 1;
  void clear_min_x();
  float min_x() const;
  void set_min_x(float value);
  private:
  float _internal_min_x() const;
  void _internal_set_min_x(float value);
  public:

  // float max_x = 2;
  void clear_max_x();
  float max_x() const;
  void set_max_x(float value);
  private:
  float _internal_max_x() const;
  void _internal_set_max_x(float value);
  public:

  // float min_y = 3;
  void clear_min_y();
  float min_y() const;
  void set_min_y(float value);
  private:
  float _internal_min_y() const;
  void _internal_set_min_y(float value);
  public:

  // float max_y = 4;
  void clear_max_y();
  float max_y() const;
  void set_max_y(float value);
  private:
  float _internal_max_y() const;
  void _internal_set_max_y(float value);
  public:

  // float min_z = 5;
  void clear_min_z();
  float min_z() const;
  void set_min_z(float value);
  private:
  float _internal_min_z() const;
  void _internal_set_min_z(float value);
  public:

  // float max_z = 6;
  void clear_max_z();
  float max_z() const;
  void set_max_z(float value);
  private:
  float _internal_max_z() const;
  void _internal_set_max_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Aabb)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float min_x_;
  float max_x_;
  float min_y_;
  float max_y_;
  float min_z_;
  float max_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Obb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Obb) */ {
 public:
  Obb();
  virtual ~Obb();

  Obb(const Obb& from);
  Obb(Obb&& from) noexcept
    : Obb() {
    *this = ::std::move(from);
  }

  inline Obb& operator=(const Obb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obb& operator=(Obb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obb* internal_default_instance() {
    return reinterpret_cast<const Obb*>(
               &_Obb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Obb& a, Obb& b) {
    a.Swap(&b);
  }
  inline void Swap(Obb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obb* New() const final {
    return CreateMaybeMessage<Obb>(nullptr);
  }

  Obb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obb& from);
  void MergeFrom(const Obb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Obb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 2,
    kExtentFieldNumber = 3,
    kCenterFieldNumber = 1,
  };
  // repeated .Tiny3D.Script.Vector3 axis = 2;
  int axis_size() const;
  private:
  int _internal_axis_size() const;
  public:
  void clear_axis();
  ::Tiny3D::Script::Vector3* mutable_axis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 >*
      mutable_axis();
  private:
  const ::Tiny3D::Script::Vector3& _internal_axis(int index) const;
  ::Tiny3D::Script::Vector3* _internal_add_axis();
  public:
  const ::Tiny3D::Script::Vector3& axis(int index) const;
  ::Tiny3D::Script::Vector3* add_axis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 >&
      axis() const;

  // repeated float extent = 3;
  int extent_size() const;
  private:
  int _internal_extent_size() const;
  public:
  void clear_extent();
  private:
  float _internal_extent(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_extent() const;
  void _internal_add_extent(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_extent();
  public:
  float extent(int index) const;
  void set_extent(int index, float value);
  void add_extent(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      extent() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_extent();

  // .Tiny3D.Script.Vector3 center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::Tiny3D::Script::Vector3& center() const;
  ::Tiny3D::Script::Vector3* release_center();
  ::Tiny3D::Script::Vector3* mutable_center();
  void set_allocated_center(::Tiny3D::Script::Vector3* center);
  private:
  const ::Tiny3D::Script::Vector3& _internal_center() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_center();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Obb)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 > axis_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > extent_;
  mutable std::atomic<int> _extent_cached_byte_size_;
  ::Tiny3D::Script::Vector3* center_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Bound :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Bound) */ {
 public:
  Bound();
  virtual ~Bound();

  Bound(const Bound& from);
  Bound(Bound&& from) noexcept
    : Bound() {
    *this = ::std::move(from);
  }

  inline Bound& operator=(const Bound& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bound& operator=(Bound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bound& default_instance();

  enum ValueOfCase {
    kSphere = 2,
    kAabb = 3,
    kObb = 4,
    VALUEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bound* internal_default_instance() {
    return reinterpret_cast<const Bound*>(
               &_Bound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Bound& a, Bound& b) {
    a.Swap(&b);
  }
  inline void Swap(Bound* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bound* New() const final {
    return CreateMaybeMessage<Bound>(nullptr);
  }

  Bound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bound& from);
  void MergeFrom(const Bound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Bound";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bound_Type Type;
  static constexpr Type BT_SPHERE =
    Bound_Type_BT_SPHERE;
  static constexpr Type BT_AABB =
    Bound_Type_BT_AABB;
  static constexpr Type BT_OBB =
    Bound_Type_BT_OBB;
  static inline bool Type_IsValid(int value) {
    return Bound_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Bound_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Bound_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Bound_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Bound_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Bound_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Bound_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSphereFieldNumber = 2,
    kAabbFieldNumber = 3,
    kObbFieldNumber = 4,
  };
  // .Tiny3D.Script.ModelSystem.Bound.Type type = 1;
  void clear_type();
  ::Tiny3D::Script::ModelSystem::Bound_Type type() const;
  void set_type(::Tiny3D::Script::ModelSystem::Bound_Type value);
  private:
  ::Tiny3D::Script::ModelSystem::Bound_Type _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::ModelSystem::Bound_Type value);
  public:

  // .Tiny3D.Script.ModelSystem.Sphere sphere = 2;
  bool has_sphere() const;
  private:
  bool _internal_has_sphere() const;
  public:
  void clear_sphere();
  const ::Tiny3D::Script::ModelSystem::Sphere& sphere() const;
  ::Tiny3D::Script::ModelSystem::Sphere* release_sphere();
  ::Tiny3D::Script::ModelSystem::Sphere* mutable_sphere();
  void set_allocated_sphere(::Tiny3D::Script::ModelSystem::Sphere* sphere);
  private:
  const ::Tiny3D::Script::ModelSystem::Sphere& _internal_sphere() const;
  ::Tiny3D::Script::ModelSystem::Sphere* _internal_mutable_sphere();
  public:

  // .Tiny3D.Script.ModelSystem.Aabb aabb = 3;
  bool has_aabb() const;
  private:
  bool _internal_has_aabb() const;
  public:
  void clear_aabb();
  const ::Tiny3D::Script::ModelSystem::Aabb& aabb() const;
  ::Tiny3D::Script::ModelSystem::Aabb* release_aabb();
  ::Tiny3D::Script::ModelSystem::Aabb* mutable_aabb();
  void set_allocated_aabb(::Tiny3D::Script::ModelSystem::Aabb* aabb);
  private:
  const ::Tiny3D::Script::ModelSystem::Aabb& _internal_aabb() const;
  ::Tiny3D::Script::ModelSystem::Aabb* _internal_mutable_aabb();
  public:

  // .Tiny3D.Script.ModelSystem.Obb obb = 4;
  bool has_obb() const;
  private:
  bool _internal_has_obb() const;
  public:
  void clear_obb();
  const ::Tiny3D::Script::ModelSystem::Obb& obb() const;
  ::Tiny3D::Script::ModelSystem::Obb* release_obb();
  ::Tiny3D::Script::ModelSystem::Obb* mutable_obb();
  void set_allocated_obb(::Tiny3D::Script::ModelSystem::Obb* obb);
  private:
  const ::Tiny3D::Script::ModelSystem::Obb& _internal_obb() const;
  ::Tiny3D::Script::ModelSystem::Obb* _internal_mutable_obb();
  public:

  void clear_ValueOf();
  ValueOfCase ValueOf_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Bound)
 private:
  class _Internal;
  void set_has_sphere();
  void set_has_aabb();
  void set_has_obb();

  inline bool has_ValueOf() const;
  inline void clear_has_ValueOf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ValueOfUnion {
    ValueOfUnion() {}
    ::Tiny3D::Script::ModelSystem::Sphere* sphere_;
    ::Tiny3D::Script::ModelSystem::Aabb* aabb_;
    ::Tiny3D::Script::ModelSystem::Obb* obb_;
  } ValueOf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class IndexBuffer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.IndexBuffer) */ {
 public:
  IndexBuffer();
  virtual ~IndexBuffer();

  IndexBuffer(const IndexBuffer& from);
  IndexBuffer(IndexBuffer&& from) noexcept
    : IndexBuffer() {
    *this = ::std::move(from);
  }

  inline IndexBuffer& operator=(const IndexBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexBuffer& operator=(IndexBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexBuffer* internal_default_instance() {
    return reinterpret_cast<const IndexBuffer*>(
               &_IndexBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IndexBuffer& a, IndexBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexBuffer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexBuffer* New() const final {
    return CreateMaybeMessage<IndexBuffer>(nullptr);
  }

  IndexBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexBuffer& from);
  void MergeFrom(const IndexBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.IndexBuffer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 6,
    kMaterialFieldNumber = 4,
    kBoundFieldNumber = 5,
    kIs16BitFieldNumber = 1,
    kPrimitiveTypeFieldNumber = 2,
    kPrimitiveCountFieldNumber = 3,
  };
  // repeated int32 indices = 6;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // string material = 4;
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // .Tiny3D.Script.ModelSystem.Bound bound = 5;
  bool has_bound() const;
  private:
  bool _internal_has_bound() const;
  public:
  void clear_bound();
  const ::Tiny3D::Script::ModelSystem::Bound& bound() const;
  ::Tiny3D::Script::ModelSystem::Bound* release_bound();
  ::Tiny3D::Script::ModelSystem::Bound* mutable_bound();
  void set_allocated_bound(::Tiny3D::Script::ModelSystem::Bound* bound);
  private:
  const ::Tiny3D::Script::ModelSystem::Bound& _internal_bound() const;
  ::Tiny3D::Script::ModelSystem::Bound* _internal_mutable_bound();
  public:

  // bool is_16bit = 1;
  void clear_is_16bit();
  bool is_16bit() const;
  void set_is_16bit(bool value);
  private:
  bool _internal_is_16bit() const;
  void _internal_set_is_16bit(bool value);
  public:

  // .Tiny3D.Script.ModelSystem.PrimitiveType primitive_type = 2;
  void clear_primitive_type();
  ::Tiny3D::Script::ModelSystem::PrimitiveType primitive_type() const;
  void set_primitive_type(::Tiny3D::Script::ModelSystem::PrimitiveType value);
  private:
  ::Tiny3D::Script::ModelSystem::PrimitiveType _internal_primitive_type() const;
  void _internal_set_primitive_type(::Tiny3D::Script::ModelSystem::PrimitiveType value);
  public:

  // uint32 primitive_count = 3;
  void clear_primitive_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 primitive_count() const;
  void set_primitive_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_primitive_count() const;
  void _internal_set_primitive_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.IndexBuffer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  ::Tiny3D::Script::ModelSystem::Bound* bound_;
  bool is_16bit_;
  int primitive_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 primitive_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class KeyframeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.KeyframeData) */ {
 public:
  KeyframeData();
  virtual ~KeyframeData();

  KeyframeData(const KeyframeData& from);
  KeyframeData(KeyframeData&& from) noexcept
    : KeyframeData() {
    *this = ::std::move(from);
  }

  inline KeyframeData& operator=(const KeyframeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyframeData& operator=(KeyframeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyframeData& default_instance();

  enum KeyframeOneOfCase {
    kTranslation = 2,
    kRotation = 3,
    kScaling = 4,
    KEYFRAMEONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyframeData* internal_default_instance() {
    return reinterpret_cast<const KeyframeData*>(
               &_KeyframeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KeyframeData& a, KeyframeData& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyframeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyframeData* New() const final {
    return CreateMaybeMessage<KeyframeData>(nullptr);
  }

  KeyframeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyframeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyframeData& from);
  void MergeFrom(const KeyframeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyframeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.KeyframeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kTranslationFieldNumber = 2,
    kRotationFieldNumber = 3,
    kScalingFieldNumber = 4,
  };
  // float time = 1;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // .Tiny3D.Script.Vector3 translation = 2;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::Tiny3D::Script::Vector3& translation() const;
  ::Tiny3D::Script::Vector3* release_translation();
  ::Tiny3D::Script::Vector3* mutable_translation();
  void set_allocated_translation(::Tiny3D::Script::Vector3* translation);
  private:
  const ::Tiny3D::Script::Vector3& _internal_translation() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_translation();
  public:

  // .Tiny3D.Script.Quaternion rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Tiny3D::Script::Quaternion& rotation() const;
  ::Tiny3D::Script::Quaternion* release_rotation();
  ::Tiny3D::Script::Quaternion* mutable_rotation();
  void set_allocated_rotation(::Tiny3D::Script::Quaternion* rotation);
  private:
  const ::Tiny3D::Script::Quaternion& _internal_rotation() const;
  ::Tiny3D::Script::Quaternion* _internal_mutable_rotation();
  public:

  // .Tiny3D.Script.Vector3 scaling = 4;
  bool has_scaling() const;
  private:
  bool _internal_has_scaling() const;
  public:
  void clear_scaling();
  const ::Tiny3D::Script::Vector3& scaling() const;
  ::Tiny3D::Script::Vector3* release_scaling();
  ::Tiny3D::Script::Vector3* mutable_scaling();
  void set_allocated_scaling(::Tiny3D::Script::Vector3* scaling);
  private:
  const ::Tiny3D::Script::Vector3& _internal_scaling() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_scaling();
  public:

  void clear_KeyframeOneOf();
  KeyframeOneOfCase KeyframeOneOf_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.KeyframeData)
 private:
  class _Internal;
  void set_has_translation();
  void set_has_rotation();
  void set_has_scaling();

  inline bool has_KeyframeOneOf() const;
  inline void clear_has_KeyframeOneOf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float time_;
  union KeyframeOneOfUnion {
    KeyframeOneOfUnion() {}
    ::Tiny3D::Script::Vector3* translation_;
    ::Tiny3D::Script::Quaternion* rotation_;
    ::Tiny3D::Script::Vector3* scaling_;
  } KeyframeOneOf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Keyframe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Keyframe) */ {
 public:
  Keyframe();
  virtual ~Keyframe();

  Keyframe(const Keyframe& from);
  Keyframe(Keyframe&& from) noexcept
    : Keyframe() {
    *this = ::std::move(from);
  }

  inline Keyframe& operator=(const Keyframe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keyframe& operator=(Keyframe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Keyframe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Keyframe* internal_default_instance() {
    return reinterpret_cast<const Keyframe*>(
               &_Keyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Keyframe& a, Keyframe& b) {
    a.Swap(&b);
  }
  inline void Swap(Keyframe* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Keyframe* New() const final {
    return CreateMaybeMessage<Keyframe>(nullptr);
  }

  Keyframe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Keyframe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Keyframe& from);
  void MergeFrom(const Keyframe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Keyframe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Keyframe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Keyframe_Type Type;
  static constexpr Type KT_TRANSLATION =
    Keyframe_Type_KT_TRANSLATION;
  static constexpr Type KT_ROTATION =
    Keyframe_Type_KT_ROTATION;
  static constexpr Type KT_SCALING =
    Keyframe_Type_KT_SCALING;
  static inline bool Type_IsValid(int value) {
    return Keyframe_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Keyframe_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Keyframe_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Keyframe_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Keyframe_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Keyframe_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Keyframe_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 3,
    kBoneFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .Tiny3D.Script.ModelSystem.KeyframeData frames = 3;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::Tiny3D::Script::ModelSystem::KeyframeData* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::KeyframeData >*
      mutable_frames();
  private:
  const ::Tiny3D::Script::ModelSystem::KeyframeData& _internal_frames(int index) const;
  ::Tiny3D::Script::ModelSystem::KeyframeData* _internal_add_frames();
  public:
  const ::Tiny3D::Script::ModelSystem::KeyframeData& frames(int index) const;
  ::Tiny3D::Script::ModelSystem::KeyframeData* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::KeyframeData >&
      frames() const;

  // string bone = 2;
  void clear_bone();
  const std::string& bone() const;
  void set_bone(const std::string& value);
  void set_bone(std::string&& value);
  void set_bone(const char* value);
  void set_bone(const char* value, size_t size);
  std::string* mutable_bone();
  std::string* release_bone();
  void set_allocated_bone(std::string* bone);
  private:
  const std::string& _internal_bone() const;
  void _internal_set_bone(const std::string& value);
  std::string* _internal_mutable_bone();
  public:

  // .Tiny3D.Script.ModelSystem.Keyframe.Type type = 1;
  void clear_type();
  ::Tiny3D::Script::ModelSystem::Keyframe_Type type() const;
  void set_type(::Tiny3D::Script::ModelSystem::Keyframe_Type value);
  private:
  ::Tiny3D::Script::ModelSystem::Keyframe_Type _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::ModelSystem::Keyframe_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Keyframe)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::KeyframeData > frames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bone_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class AnimationClip :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.AnimationClip) */ {
 public:
  AnimationClip();
  virtual ~AnimationClip();

  AnimationClip(const AnimationClip& from);
  AnimationClip(AnimationClip&& from) noexcept
    : AnimationClip() {
    *this = ::std::move(from);
  }

  inline AnimationClip& operator=(const AnimationClip& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationClip& operator=(AnimationClip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationClip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimationClip* internal_default_instance() {
    return reinterpret_cast<const AnimationClip*>(
               &_AnimationClip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AnimationClip& a, AnimationClip& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationClip* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationClip* New() const final {
    return CreateMaybeMessage<AnimationClip>(nullptr);
  }

  AnimationClip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationClip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationClip& from);
  void MergeFrom(const AnimationClip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationClip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.AnimationClip";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 3,
    kNameFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // repeated .Tiny3D.Script.ModelSystem.Keyframe keyframes = 3;
  int keyframes_size() const;
  private:
  int _internal_keyframes_size() const;
  public:
  void clear_keyframes();
  ::Tiny3D::Script::ModelSystem::Keyframe* mutable_keyframes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >*
      mutable_keyframes();
  private:
  const ::Tiny3D::Script::ModelSystem::Keyframe& _internal_keyframes(int index) const;
  ::Tiny3D::Script::ModelSystem::Keyframe* _internal_add_keyframes();
  public:
  const ::Tiny3D::Script::ModelSystem::Keyframe& keyframes(int index) const;
  ::Tiny3D::Script::ModelSystem::Keyframe* add_keyframes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >&
      keyframes() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float duration = 2;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.AnimationClip)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe > keyframes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class MeshData_OffsetEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MeshData_OffsetEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::Matrix4,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MeshData_OffsetEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::Matrix4,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MeshData_OffsetEntry_DoNotUse();
  MeshData_OffsetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MeshData_OffsetEntry_DoNotUse& other);
  static const MeshData_OffsetEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MeshData_OffsetEntry_DoNotUse*>(&_MeshData_OffsetEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.ModelSystem.MeshData.OffsetEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class MeshData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.MeshData) */ {
 public:
  MeshData();
  virtual ~MeshData();

  MeshData(const MeshData& from);
  MeshData(MeshData&& from) noexcept
    : MeshData() {
    *this = ::std::move(from);
  }

  inline MeshData& operator=(const MeshData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshData& operator=(MeshData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshData* internal_default_instance() {
    return reinterpret_cast<const MeshData*>(
               &_MeshData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MeshData& a, MeshData& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshData* New() const final {
    return CreateMaybeMessage<MeshData>(nullptr);
  }

  MeshData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshData& from);
  void MergeFrom(const MeshData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.MeshData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVertexBuffersFieldNumber = 2,
    kIndexBuffersFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kClipsFieldNumber = 5,
    kNameFieldNumber = 1,
  };
  // repeated .Tiny3D.Script.ModelSystem.VertexBuffer vertex_buffers = 2;
  int vertex_buffers_size() const;
  private:
  int _internal_vertex_buffers_size() const;
  public:
  void clear_vertex_buffers();
  ::Tiny3D::Script::ModelSystem::VertexBuffer* mutable_vertex_buffers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer >*
      mutable_vertex_buffers();
  private:
  const ::Tiny3D::Script::ModelSystem::VertexBuffer& _internal_vertex_buffers(int index) const;
  ::Tiny3D::Script::ModelSystem::VertexBuffer* _internal_add_vertex_buffers();
  public:
  const ::Tiny3D::Script::ModelSystem::VertexBuffer& vertex_buffers(int index) const;
  ::Tiny3D::Script::ModelSystem::VertexBuffer* add_vertex_buffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer >&
      vertex_buffers() const;

  // repeated .Tiny3D.Script.ModelSystem.IndexBuffer index_buffers = 3;
  int index_buffers_size() const;
  private:
  int _internal_index_buffers_size() const;
  public:
  void clear_index_buffers();
  ::Tiny3D::Script::ModelSystem::IndexBuffer* mutable_index_buffers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer >*
      mutable_index_buffers();
  private:
  const ::Tiny3D::Script::ModelSystem::IndexBuffer& _internal_index_buffers(int index) const;
  ::Tiny3D::Script::ModelSystem::IndexBuffer* _internal_add_index_buffers();
  public:
  const ::Tiny3D::Script::ModelSystem::IndexBuffer& index_buffers(int index) const;
  ::Tiny3D::Script::ModelSystem::IndexBuffer* add_index_buffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer >&
      index_buffers() const;

  // map<string, .Tiny3D.Script.Matrix4> offset = 4;
  int offset_size() const;
  private:
  int _internal_offset_size() const;
  public:
  void clear_offset();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >&
      _internal_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >*
      _internal_mutable_offset();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >&
      offset() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >*
      mutable_offset();

  // repeated .Tiny3D.Script.ModelSystem.AnimationClip clips = 5;
  int clips_size() const;
  private:
  int _internal_clips_size() const;
  public:
  void clear_clips();
  ::Tiny3D::Script::ModelSystem::AnimationClip* mutable_clips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::AnimationClip >*
      mutable_clips();
  private:
  const ::Tiny3D::Script::ModelSystem::AnimationClip& _internal_clips(int index) const;
  ::Tiny3D::Script::ModelSystem::AnimationClip* _internal_add_clips();
  public:
  const ::Tiny3D::Script::ModelSystem::AnimationClip& clips(int index) const;
  ::Tiny3D::Script::ModelSystem::AnimationClip* add_clips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::AnimationClip >&
      clips() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.MeshData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer > vertex_buffers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer > index_buffers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MeshData_OffsetEntry_DoNotUse,
      std::string, ::Tiny3D::Script::Matrix4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > offset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::AnimationClip > clips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VertexAttribute

// .Tiny3D.Script.ModelSystem.VertexAttribute.Semantic semantic = 1;
inline void VertexAttribute::clear_semantic() {
  semantic_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic VertexAttribute::_internal_semantic() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic >(semantic_);
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic VertexAttribute::semantic() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexAttribute.semantic)
  return _internal_semantic();
}
inline void VertexAttribute::_internal_set_semantic(::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic value) {
  
  semantic_ = value;
}
inline void VertexAttribute::set_semantic(::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic value) {
  _internal_set_semantic(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.VertexAttribute.semantic)
}

// .Tiny3D.Script.ModelSystem.VertexAttribute.Type type = 2;
inline void VertexAttribute::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute_Type VertexAttribute::_internal_type() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::VertexAttribute_Type >(type_);
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute_Type VertexAttribute::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexAttribute.type)
  return _internal_type();
}
inline void VertexAttribute::_internal_set_type(::Tiny3D::Script::ModelSystem::VertexAttribute_Type value) {
  
  type_ = value;
}
inline void VertexAttribute::set_type(::Tiny3D::Script::ModelSystem::VertexAttribute_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.VertexAttribute.type)
}

// uint32 size = 3;
inline void VertexAttribute::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexAttribute::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexAttribute::size() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexAttribute.size)
  return _internal_size();
}
inline void VertexAttribute::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void VertexAttribute::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.VertexAttribute.size)
}

// -------------------------------------------------------------------

// Vertex

// .Tiny3D.Script.Vector3 pos = 1;
inline bool Vertex::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Vertex::has_pos() const {
  return _internal_has_pos();
}
inline const ::Tiny3D::Script::Vector3& Vertex::_internal_pos() const {
  const ::Tiny3D::Script::Vector3* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Vertex::pos() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.pos)
  return _internal_pos();
}
inline ::Tiny3D::Script::Vector3* Vertex::release_pos() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.pos)
  
  ::Tiny3D::Script::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Vertex::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::Tiny3D::Script::Vector3* Vertex::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.pos)
  return _internal_mutable_pos();
}
inline void Vertex::set_allocated_pos(::Tiny3D::Script::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.pos)
}

// .Tiny3D.Script.Vector2List texcoord = 2;
inline bool Vertex::_internal_has_texcoord() const {
  return Extension_case() == kTexcoord;
}
inline bool Vertex::has_texcoord() const {
  return _internal_has_texcoord();
}
inline void Vertex::set_has_texcoord() {
  _oneof_case_[0] = kTexcoord;
}
inline ::Tiny3D::Script::Vector2List* Vertex::release_texcoord() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.texcoord)
  if (_internal_has_texcoord()) {
    clear_has_Extension();
      ::Tiny3D::Script::Vector2List* temp = Extension_.texcoord_;
    Extension_.texcoord_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector2List& Vertex::_internal_texcoord() const {
  return _internal_has_texcoord()
      ? *Extension_.texcoord_
      : *reinterpret_cast< ::Tiny3D::Script::Vector2List*>(&::Tiny3D::Script::_Vector2List_default_instance_);
}
inline const ::Tiny3D::Script::Vector2List& Vertex::texcoord() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.texcoord)
  return _internal_texcoord();
}
inline ::Tiny3D::Script::Vector2List* Vertex::_internal_mutable_texcoord() {
  if (!_internal_has_texcoord()) {
    clear_Extension();
    set_has_texcoord();
    Extension_.texcoord_ = CreateMaybeMessage< ::Tiny3D::Script::Vector2List >(
        GetArenaNoVirtual());
  }
  return Extension_.texcoord_;
}
inline ::Tiny3D::Script::Vector2List* Vertex::mutable_texcoord() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.texcoord)
  return _internal_mutable_texcoord();
}

// .Tiny3D.Script.Vector3List normal = 3;
inline bool Vertex::_internal_has_normal() const {
  return Extension_case() == kNormal;
}
inline bool Vertex::has_normal() const {
  return _internal_has_normal();
}
inline void Vertex::set_has_normal() {
  _oneof_case_[0] = kNormal;
}
inline ::Tiny3D::Script::Vector3List* Vertex::release_normal() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.normal)
  if (_internal_has_normal()) {
    clear_has_Extension();
      ::Tiny3D::Script::Vector3List* temp = Extension_.normal_;
    Extension_.normal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector3List& Vertex::_internal_normal() const {
  return _internal_has_normal()
      ? *Extension_.normal_
      : *reinterpret_cast< ::Tiny3D::Script::Vector3List*>(&::Tiny3D::Script::_Vector3List_default_instance_);
}
inline const ::Tiny3D::Script::Vector3List& Vertex::normal() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.normal)
  return _internal_normal();
}
inline ::Tiny3D::Script::Vector3List* Vertex::_internal_mutable_normal() {
  if (!_internal_has_normal()) {
    clear_Extension();
    set_has_normal();
    Extension_.normal_ = CreateMaybeMessage< ::Tiny3D::Script::Vector3List >(
        GetArenaNoVirtual());
  }
  return Extension_.normal_;
}
inline ::Tiny3D::Script::Vector3List* Vertex::mutable_normal() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.normal)
  return _internal_mutable_normal();
}

// .Tiny3D.Script.Vector3List tangent = 4;
inline bool Vertex::_internal_has_tangent() const {
  return Extension_case() == kTangent;
}
inline bool Vertex::has_tangent() const {
  return _internal_has_tangent();
}
inline void Vertex::set_has_tangent() {
  _oneof_case_[0] = kTangent;
}
inline ::Tiny3D::Script::Vector3List* Vertex::release_tangent() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.tangent)
  if (_internal_has_tangent()) {
    clear_has_Extension();
      ::Tiny3D::Script::Vector3List* temp = Extension_.tangent_;
    Extension_.tangent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector3List& Vertex::_internal_tangent() const {
  return _internal_has_tangent()
      ? *Extension_.tangent_
      : *reinterpret_cast< ::Tiny3D::Script::Vector3List*>(&::Tiny3D::Script::_Vector3List_default_instance_);
}
inline const ::Tiny3D::Script::Vector3List& Vertex::tangent() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.tangent)
  return _internal_tangent();
}
inline ::Tiny3D::Script::Vector3List* Vertex::_internal_mutable_tangent() {
  if (!_internal_has_tangent()) {
    clear_Extension();
    set_has_tangent();
    Extension_.tangent_ = CreateMaybeMessage< ::Tiny3D::Script::Vector3List >(
        GetArenaNoVirtual());
  }
  return Extension_.tangent_;
}
inline ::Tiny3D::Script::Vector3List* Vertex::mutable_tangent() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.tangent)
  return _internal_mutable_tangent();
}

// .Tiny3D.Script.Vector3List binormal = 5;
inline bool Vertex::_internal_has_binormal() const {
  return Extension_case() == kBinormal;
}
inline bool Vertex::has_binormal() const {
  return _internal_has_binormal();
}
inline void Vertex::set_has_binormal() {
  _oneof_case_[0] = kBinormal;
}
inline ::Tiny3D::Script::Vector3List* Vertex::release_binormal() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.binormal)
  if (_internal_has_binormal()) {
    clear_has_Extension();
      ::Tiny3D::Script::Vector3List* temp = Extension_.binormal_;
    Extension_.binormal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector3List& Vertex::_internal_binormal() const {
  return _internal_has_binormal()
      ? *Extension_.binormal_
      : *reinterpret_cast< ::Tiny3D::Script::Vector3List*>(&::Tiny3D::Script::_Vector3List_default_instance_);
}
inline const ::Tiny3D::Script::Vector3List& Vertex::binormal() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.binormal)
  return _internal_binormal();
}
inline ::Tiny3D::Script::Vector3List* Vertex::_internal_mutable_binormal() {
  if (!_internal_has_binormal()) {
    clear_Extension();
    set_has_binormal();
    Extension_.binormal_ = CreateMaybeMessage< ::Tiny3D::Script::Vector3List >(
        GetArenaNoVirtual());
  }
  return Extension_.binormal_;
}
inline ::Tiny3D::Script::Vector3List* Vertex::mutable_binormal() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.binormal)
  return _internal_mutable_binormal();
}

// .Tiny3D.Script.ColorList diffuse = 6;
inline bool Vertex::_internal_has_diffuse() const {
  return Extension_case() == kDiffuse;
}
inline bool Vertex::has_diffuse() const {
  return _internal_has_diffuse();
}
inline void Vertex::set_has_diffuse() {
  _oneof_case_[0] = kDiffuse;
}
inline ::Tiny3D::Script::ColorList* Vertex::release_diffuse() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.diffuse)
  if (_internal_has_diffuse()) {
    clear_has_Extension();
      ::Tiny3D::Script::ColorList* temp = Extension_.diffuse_;
    Extension_.diffuse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ColorList& Vertex::_internal_diffuse() const {
  return _internal_has_diffuse()
      ? *Extension_.diffuse_
      : *reinterpret_cast< ::Tiny3D::Script::ColorList*>(&::Tiny3D::Script::_ColorList_default_instance_);
}
inline const ::Tiny3D::Script::ColorList& Vertex::diffuse() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.diffuse)
  return _internal_diffuse();
}
inline ::Tiny3D::Script::ColorList* Vertex::_internal_mutable_diffuse() {
  if (!_internal_has_diffuse()) {
    clear_Extension();
    set_has_diffuse();
    Extension_.diffuse_ = CreateMaybeMessage< ::Tiny3D::Script::ColorList >(
        GetArenaNoVirtual());
  }
  return Extension_.diffuse_;
}
inline ::Tiny3D::Script::ColorList* Vertex::mutable_diffuse() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.diffuse)
  return _internal_mutable_diffuse();
}

// .Tiny3D.Script.ColorList specular = 7;
inline bool Vertex::_internal_has_specular() const {
  return Extension_case() == kSpecular;
}
inline bool Vertex::has_specular() const {
  return _internal_has_specular();
}
inline void Vertex::set_has_specular() {
  _oneof_case_[0] = kSpecular;
}
inline ::Tiny3D::Script::ColorList* Vertex::release_specular() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.specular)
  if (_internal_has_specular()) {
    clear_has_Extension();
      ::Tiny3D::Script::ColorList* temp = Extension_.specular_;
    Extension_.specular_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ColorList& Vertex::_internal_specular() const {
  return _internal_has_specular()
      ? *Extension_.specular_
      : *reinterpret_cast< ::Tiny3D::Script::ColorList*>(&::Tiny3D::Script::_ColorList_default_instance_);
}
inline const ::Tiny3D::Script::ColorList& Vertex::specular() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.specular)
  return _internal_specular();
}
inline ::Tiny3D::Script::ColorList* Vertex::_internal_mutable_specular() {
  if (!_internal_has_specular()) {
    clear_Extension();
    set_has_specular();
    Extension_.specular_ = CreateMaybeMessage< ::Tiny3D::Script::ColorList >(
        GetArenaNoVirtual());
  }
  return Extension_.specular_;
}
inline ::Tiny3D::Script::ColorList* Vertex::mutable_specular() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.specular)
  return _internal_mutable_specular();
}

// .Tiny3D.Script.UintList blend_indices = 8;
inline bool Vertex::_internal_has_blend_indices() const {
  return Extension_case() == kBlendIndices;
}
inline bool Vertex::has_blend_indices() const {
  return _internal_has_blend_indices();
}
inline void Vertex::set_has_blend_indices() {
  _oneof_case_[0] = kBlendIndices;
}
inline ::Tiny3D::Script::UintList* Vertex::release_blend_indices() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.blend_indices)
  if (_internal_has_blend_indices()) {
    clear_has_Extension();
      ::Tiny3D::Script::UintList* temp = Extension_.blend_indices_;
    Extension_.blend_indices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::UintList& Vertex::_internal_blend_indices() const {
  return _internal_has_blend_indices()
      ? *Extension_.blend_indices_
      : *reinterpret_cast< ::Tiny3D::Script::UintList*>(&::Tiny3D::Script::_UintList_default_instance_);
}
inline const ::Tiny3D::Script::UintList& Vertex::blend_indices() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.blend_indices)
  return _internal_blend_indices();
}
inline ::Tiny3D::Script::UintList* Vertex::_internal_mutable_blend_indices() {
  if (!_internal_has_blend_indices()) {
    clear_Extension();
    set_has_blend_indices();
    Extension_.blend_indices_ = CreateMaybeMessage< ::Tiny3D::Script::UintList >(
        GetArenaNoVirtual());
  }
  return Extension_.blend_indices_;
}
inline ::Tiny3D::Script::UintList* Vertex::mutable_blend_indices() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.blend_indices)
  return _internal_mutable_blend_indices();
}

// .Tiny3D.Script.FloatList blend_weights = 9;
inline bool Vertex::_internal_has_blend_weights() const {
  return Extension_case() == kBlendWeights;
}
inline bool Vertex::has_blend_weights() const {
  return _internal_has_blend_weights();
}
inline void Vertex::set_has_blend_weights() {
  _oneof_case_[0] = kBlendWeights;
}
inline ::Tiny3D::Script::FloatList* Vertex::release_blend_weights() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Vertex.blend_weights)
  if (_internal_has_blend_weights()) {
    clear_has_Extension();
      ::Tiny3D::Script::FloatList* temp = Extension_.blend_weights_;
    Extension_.blend_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::FloatList& Vertex::_internal_blend_weights() const {
  return _internal_has_blend_weights()
      ? *Extension_.blend_weights_
      : *reinterpret_cast< ::Tiny3D::Script::FloatList*>(&::Tiny3D::Script::_FloatList_default_instance_);
}
inline const ::Tiny3D::Script::FloatList& Vertex::blend_weights() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertex.blend_weights)
  return _internal_blend_weights();
}
inline ::Tiny3D::Script::FloatList* Vertex::_internal_mutable_blend_weights() {
  if (!_internal_has_blend_weights()) {
    clear_Extension();
    set_has_blend_weights();
    Extension_.blend_weights_ = CreateMaybeMessage< ::Tiny3D::Script::FloatList >(
        GetArenaNoVirtual());
  }
  return Extension_.blend_weights_;
}
inline ::Tiny3D::Script::FloatList* Vertex::mutable_blend_weights() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Vertex.blend_weights)
  return _internal_mutable_blend_weights();
}

inline bool Vertex::has_Extension() const {
  return Extension_case() != EXTENSION_NOT_SET;
}
inline void Vertex::clear_has_Extension() {
  _oneof_case_[0] = EXTENSION_NOT_SET;
}
inline Vertex::ExtensionCase Vertex::Extension_case() const {
  return Vertex::ExtensionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VertexBuffer

// repeated .Tiny3D.Script.ModelSystem.VertexAttribute attributes = 1;
inline int VertexBuffer::_internal_attributes_size() const {
  return attributes_.size();
}
inline int VertexBuffer::attributes_size() const {
  return _internal_attributes_size();
}
inline void VertexBuffer::clear_attributes() {
  attributes_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute* VertexBuffer::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute >*
VertexBuffer::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return &attributes_;
}
inline const ::Tiny3D::Script::ModelSystem::VertexAttribute& VertexBuffer::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::VertexAttribute& VertexBuffer::attributes(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return _internal_attributes(index);
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute* VertexBuffer::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute* VertexBuffer::add_attributes() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute >&
VertexBuffer::attributes() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return attributes_;
}

// repeated .Tiny3D.Script.ModelSystem.Vertex vertices = 2;
inline int VertexBuffer::_internal_vertices_size() const {
  return vertices_.size();
}
inline int VertexBuffer::vertices_size() const {
  return _internal_vertices_size();
}
inline void VertexBuffer::clear_vertices() {
  vertices_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::Vertex* VertexBuffer::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.VertexBuffer.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Vertex >*
VertexBuffer::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.VertexBuffer.vertices)
  return &vertices_;
}
inline const ::Tiny3D::Script::ModelSystem::Vertex& VertexBuffer::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::Vertex& VertexBuffer::vertices(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexBuffer.vertices)
  return _internal_vertices(index);
}
inline ::Tiny3D::Script::ModelSystem::Vertex* VertexBuffer::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::Tiny3D::Script::ModelSystem::Vertex* VertexBuffer::add_vertices() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.VertexBuffer.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Vertex >&
VertexBuffer::vertices() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.VertexBuffer.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// Sphere

// .Tiny3D.Script.Vector3 center = 1;
inline bool Sphere::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Sphere::has_center() const {
  return _internal_has_center();
}
inline const ::Tiny3D::Script::Vector3& Sphere::_internal_center() const {
  const ::Tiny3D::Script::Vector3* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Sphere::center() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Sphere.center)
  return _internal_center();
}
inline ::Tiny3D::Script::Vector3* Sphere::release_center() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Sphere.center)
  
  ::Tiny3D::Script::Vector3* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Sphere::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::Tiny3D::Script::Vector3* Sphere::mutable_center() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Sphere.center)
  return _internal_mutable_center();
}
inline void Sphere::set_allocated_center(::Tiny3D::Script::Vector3* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Sphere.center)
}

// float radius = 2;
inline void Sphere::clear_radius() {
  radius_ = 0;
}
inline float Sphere::_internal_radius() const {
  return radius_;
}
inline float Sphere::radius() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Sphere.radius)
  return _internal_radius();
}
inline void Sphere::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void Sphere::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Sphere.radius)
}

// -------------------------------------------------------------------

// Aabb

// float min_x = 1;
inline void Aabb::clear_min_x() {
  min_x_ = 0;
}
inline float Aabb::_internal_min_x() const {
  return min_x_;
}
inline float Aabb::min_x() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.min_x)
  return _internal_min_x();
}
inline void Aabb::_internal_set_min_x(float value) {
  
  min_x_ = value;
}
inline void Aabb::set_min_x(float value) {
  _internal_set_min_x(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.min_x)
}

// float max_x = 2;
inline void Aabb::clear_max_x() {
  max_x_ = 0;
}
inline float Aabb::_internal_max_x() const {
  return max_x_;
}
inline float Aabb::max_x() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.max_x)
  return _internal_max_x();
}
inline void Aabb::_internal_set_max_x(float value) {
  
  max_x_ = value;
}
inline void Aabb::set_max_x(float value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.max_x)
}

// float min_y = 3;
inline void Aabb::clear_min_y() {
  min_y_ = 0;
}
inline float Aabb::_internal_min_y() const {
  return min_y_;
}
inline float Aabb::min_y() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.min_y)
  return _internal_min_y();
}
inline void Aabb::_internal_set_min_y(float value) {
  
  min_y_ = value;
}
inline void Aabb::set_min_y(float value) {
  _internal_set_min_y(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.min_y)
}

// float max_y = 4;
inline void Aabb::clear_max_y() {
  max_y_ = 0;
}
inline float Aabb::_internal_max_y() const {
  return max_y_;
}
inline float Aabb::max_y() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.max_y)
  return _internal_max_y();
}
inline void Aabb::_internal_set_max_y(float value) {
  
  max_y_ = value;
}
inline void Aabb::set_max_y(float value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.max_y)
}

// float min_z = 5;
inline void Aabb::clear_min_z() {
  min_z_ = 0;
}
inline float Aabb::_internal_min_z() const {
  return min_z_;
}
inline float Aabb::min_z() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.min_z)
  return _internal_min_z();
}
inline void Aabb::_internal_set_min_z(float value) {
  
  min_z_ = value;
}
inline void Aabb::set_min_z(float value) {
  _internal_set_min_z(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.min_z)
}

// float max_z = 6;
inline void Aabb::clear_max_z() {
  max_z_ = 0;
}
inline float Aabb::_internal_max_z() const {
  return max_z_;
}
inline float Aabb::max_z() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.max_z)
  return _internal_max_z();
}
inline void Aabb::_internal_set_max_z(float value) {
  
  max_z_ = value;
}
inline void Aabb::set_max_z(float value) {
  _internal_set_max_z(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.max_z)
}

// -------------------------------------------------------------------

// Obb

// .Tiny3D.Script.Vector3 center = 1;
inline bool Obb::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Obb::has_center() const {
  return _internal_has_center();
}
inline const ::Tiny3D::Script::Vector3& Obb::_internal_center() const {
  const ::Tiny3D::Script::Vector3* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Obb::center() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Obb.center)
  return _internal_center();
}
inline ::Tiny3D::Script::Vector3* Obb::release_center() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Obb.center)
  
  ::Tiny3D::Script::Vector3* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Obb::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::Tiny3D::Script::Vector3* Obb::mutable_center() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Obb.center)
  return _internal_mutable_center();
}
inline void Obb::set_allocated_center(::Tiny3D::Script::Vector3* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Obb.center)
}

// repeated .Tiny3D.Script.Vector3 axis = 2;
inline int Obb::_internal_axis_size() const {
  return axis_.size();
}
inline int Obb::axis_size() const {
  return _internal_axis_size();
}
inline ::Tiny3D::Script::Vector3* Obb::mutable_axis(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Obb.axis)
  return axis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 >*
Obb::mutable_axis() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Obb.axis)
  return &axis_;
}
inline const ::Tiny3D::Script::Vector3& Obb::_internal_axis(int index) const {
  return axis_.Get(index);
}
inline const ::Tiny3D::Script::Vector3& Obb::axis(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Obb.axis)
  return _internal_axis(index);
}
inline ::Tiny3D::Script::Vector3* Obb::_internal_add_axis() {
  return axis_.Add();
}
inline ::Tiny3D::Script::Vector3* Obb::add_axis() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Obb.axis)
  return _internal_add_axis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 >&
Obb::axis() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Obb.axis)
  return axis_;
}

// repeated float extent = 3;
inline int Obb::_internal_extent_size() const {
  return extent_.size();
}
inline int Obb::extent_size() const {
  return _internal_extent_size();
}
inline void Obb::clear_extent() {
  extent_.Clear();
}
inline float Obb::_internal_extent(int index) const {
  return extent_.Get(index);
}
inline float Obb::extent(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Obb.extent)
  return _internal_extent(index);
}
inline void Obb::set_extent(int index, float value) {
  extent_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Obb.extent)
}
inline void Obb::_internal_add_extent(float value) {
  extent_.Add(value);
}
inline void Obb::add_extent(float value) {
  _internal_add_extent(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Obb.extent)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obb::_internal_extent() const {
  return extent_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obb::extent() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Obb.extent)
  return _internal_extent();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obb::_internal_mutable_extent() {
  return &extent_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obb::mutable_extent() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Obb.extent)
  return _internal_mutable_extent();
}

// -------------------------------------------------------------------

// Bound

// .Tiny3D.Script.ModelSystem.Bound.Type type = 1;
inline void Bound::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::Bound_Type Bound::_internal_type() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::Bound_Type >(type_);
}
inline ::Tiny3D::Script::ModelSystem::Bound_Type Bound::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Bound.type)
  return _internal_type();
}
inline void Bound::_internal_set_type(::Tiny3D::Script::ModelSystem::Bound_Type value) {
  
  type_ = value;
}
inline void Bound::set_type(::Tiny3D::Script::ModelSystem::Bound_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Bound.type)
}

// .Tiny3D.Script.ModelSystem.Sphere sphere = 2;
inline bool Bound::_internal_has_sphere() const {
  return ValueOf_case() == kSphere;
}
inline bool Bound::has_sphere() const {
  return _internal_has_sphere();
}
inline void Bound::set_has_sphere() {
  _oneof_case_[0] = kSphere;
}
inline void Bound::clear_sphere() {
  if (_internal_has_sphere()) {
    delete ValueOf_.sphere_;
    clear_has_ValueOf();
  }
}
inline ::Tiny3D::Script::ModelSystem::Sphere* Bound::release_sphere() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Bound.sphere)
  if (_internal_has_sphere()) {
    clear_has_ValueOf();
      ::Tiny3D::Script::ModelSystem::Sphere* temp = ValueOf_.sphere_;
    ValueOf_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ModelSystem::Sphere& Bound::_internal_sphere() const {
  return _internal_has_sphere()
      ? *ValueOf_.sphere_
      : *reinterpret_cast< ::Tiny3D::Script::ModelSystem::Sphere*>(&::Tiny3D::Script::ModelSystem::_Sphere_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Sphere& Bound::sphere() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Bound.sphere)
  return _internal_sphere();
}
inline ::Tiny3D::Script::ModelSystem::Sphere* Bound::_internal_mutable_sphere() {
  if (!_internal_has_sphere()) {
    clear_ValueOf();
    set_has_sphere();
    ValueOf_.sphere_ = CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Sphere >(
        GetArenaNoVirtual());
  }
  return ValueOf_.sphere_;
}
inline ::Tiny3D::Script::ModelSystem::Sphere* Bound::mutable_sphere() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Bound.sphere)
  return _internal_mutable_sphere();
}

// .Tiny3D.Script.ModelSystem.Aabb aabb = 3;
inline bool Bound::_internal_has_aabb() const {
  return ValueOf_case() == kAabb;
}
inline bool Bound::has_aabb() const {
  return _internal_has_aabb();
}
inline void Bound::set_has_aabb() {
  _oneof_case_[0] = kAabb;
}
inline void Bound::clear_aabb() {
  if (_internal_has_aabb()) {
    delete ValueOf_.aabb_;
    clear_has_ValueOf();
  }
}
inline ::Tiny3D::Script::ModelSystem::Aabb* Bound::release_aabb() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Bound.aabb)
  if (_internal_has_aabb()) {
    clear_has_ValueOf();
      ::Tiny3D::Script::ModelSystem::Aabb* temp = ValueOf_.aabb_;
    ValueOf_.aabb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ModelSystem::Aabb& Bound::_internal_aabb() const {
  return _internal_has_aabb()
      ? *ValueOf_.aabb_
      : *reinterpret_cast< ::Tiny3D::Script::ModelSystem::Aabb*>(&::Tiny3D::Script::ModelSystem::_Aabb_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Aabb& Bound::aabb() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Bound.aabb)
  return _internal_aabb();
}
inline ::Tiny3D::Script::ModelSystem::Aabb* Bound::_internal_mutable_aabb() {
  if (!_internal_has_aabb()) {
    clear_ValueOf();
    set_has_aabb();
    ValueOf_.aabb_ = CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Aabb >(
        GetArenaNoVirtual());
  }
  return ValueOf_.aabb_;
}
inline ::Tiny3D::Script::ModelSystem::Aabb* Bound::mutable_aabb() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Bound.aabb)
  return _internal_mutable_aabb();
}

// .Tiny3D.Script.ModelSystem.Obb obb = 4;
inline bool Bound::_internal_has_obb() const {
  return ValueOf_case() == kObb;
}
inline bool Bound::has_obb() const {
  return _internal_has_obb();
}
inline void Bound::set_has_obb() {
  _oneof_case_[0] = kObb;
}
inline void Bound::clear_obb() {
  if (_internal_has_obb()) {
    delete ValueOf_.obb_;
    clear_has_ValueOf();
  }
}
inline ::Tiny3D::Script::ModelSystem::Obb* Bound::release_obb() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Bound.obb)
  if (_internal_has_obb()) {
    clear_has_ValueOf();
      ::Tiny3D::Script::ModelSystem::Obb* temp = ValueOf_.obb_;
    ValueOf_.obb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ModelSystem::Obb& Bound::_internal_obb() const {
  return _internal_has_obb()
      ? *ValueOf_.obb_
      : *reinterpret_cast< ::Tiny3D::Script::ModelSystem::Obb*>(&::Tiny3D::Script::ModelSystem::_Obb_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Obb& Bound::obb() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Bound.obb)
  return _internal_obb();
}
inline ::Tiny3D::Script::ModelSystem::Obb* Bound::_internal_mutable_obb() {
  if (!_internal_has_obb()) {
    clear_ValueOf();
    set_has_obb();
    ValueOf_.obb_ = CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Obb >(
        GetArenaNoVirtual());
  }
  return ValueOf_.obb_;
}
inline ::Tiny3D::Script::ModelSystem::Obb* Bound::mutable_obb() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Bound.obb)
  return _internal_mutable_obb();
}

inline bool Bound::has_ValueOf() const {
  return ValueOf_case() != VALUEOF_NOT_SET;
}
inline void Bound::clear_has_ValueOf() {
  _oneof_case_[0] = VALUEOF_NOT_SET;
}
inline Bound::ValueOfCase Bound::ValueOf_case() const {
  return Bound::ValueOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IndexBuffer

// bool is_16bit = 1;
inline void IndexBuffer::clear_is_16bit() {
  is_16bit_ = false;
}
inline bool IndexBuffer::_internal_is_16bit() const {
  return is_16bit_;
}
inline bool IndexBuffer::is_16bit() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.is_16bit)
  return _internal_is_16bit();
}
inline void IndexBuffer::_internal_set_is_16bit(bool value) {
  
  is_16bit_ = value;
}
inline void IndexBuffer::set_is_16bit(bool value) {
  _internal_set_is_16bit(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.is_16bit)
}

// .Tiny3D.Script.ModelSystem.PrimitiveType primitive_type = 2;
inline void IndexBuffer::clear_primitive_type() {
  primitive_type_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::PrimitiveType IndexBuffer::_internal_primitive_type() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::PrimitiveType >(primitive_type_);
}
inline ::Tiny3D::Script::ModelSystem::PrimitiveType IndexBuffer::primitive_type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.primitive_type)
  return _internal_primitive_type();
}
inline void IndexBuffer::_internal_set_primitive_type(::Tiny3D::Script::ModelSystem::PrimitiveType value) {
  
  primitive_type_ = value;
}
inline void IndexBuffer::set_primitive_type(::Tiny3D::Script::ModelSystem::PrimitiveType value) {
  _internal_set_primitive_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.primitive_type)
}

// uint32 primitive_count = 3;
inline void IndexBuffer::clear_primitive_count() {
  primitive_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexBuffer::_internal_primitive_count() const {
  return primitive_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexBuffer::primitive_count() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.primitive_count)
  return _internal_primitive_count();
}
inline void IndexBuffer::_internal_set_primitive_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  primitive_count_ = value;
}
inline void IndexBuffer::set_primitive_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_primitive_count(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.primitive_count)
}

// string material = 4;
inline void IndexBuffer::clear_material() {
  material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexBuffer::material() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.material)
  return _internal_material();
}
inline void IndexBuffer::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}
inline std::string* IndexBuffer::mutable_material() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.IndexBuffer.material)
  return _internal_mutable_material();
}
inline const std::string& IndexBuffer::_internal_material() const {
  return material_.GetNoArena();
}
inline void IndexBuffer::_internal_set_material(const std::string& value) {
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexBuffer::set_material(std::string&& value) {
  
  material_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}
inline void IndexBuffer::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}
inline void IndexBuffer::set_material(const char* value, size_t size) {
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}
inline std::string* IndexBuffer::_internal_mutable_material() {
  
  return material_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexBuffer::release_material() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.IndexBuffer.material)
  
  return material_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexBuffer::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  material_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}

// .Tiny3D.Script.ModelSystem.Bound bound = 5;
inline bool IndexBuffer::_internal_has_bound() const {
  return this != internal_default_instance() && bound_ != nullptr;
}
inline bool IndexBuffer::has_bound() const {
  return _internal_has_bound();
}
inline void IndexBuffer::clear_bound() {
  if (GetArenaNoVirtual() == nullptr && bound_ != nullptr) {
    delete bound_;
  }
  bound_ = nullptr;
}
inline const ::Tiny3D::Script::ModelSystem::Bound& IndexBuffer::_internal_bound() const {
  const ::Tiny3D::Script::ModelSystem::Bound* p = bound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ModelSystem::Bound*>(
      &::Tiny3D::Script::ModelSystem::_Bound_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Bound& IndexBuffer::bound() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.bound)
  return _internal_bound();
}
inline ::Tiny3D::Script::ModelSystem::Bound* IndexBuffer::release_bound() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.IndexBuffer.bound)
  
  ::Tiny3D::Script::ModelSystem::Bound* temp = bound_;
  bound_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ModelSystem::Bound* IndexBuffer::_internal_mutable_bound() {
  
  if (bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Bound>(GetArenaNoVirtual());
    bound_ = p;
  }
  return bound_;
}
inline ::Tiny3D::Script::ModelSystem::Bound* IndexBuffer::mutable_bound() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.IndexBuffer.bound)
  return _internal_mutable_bound();
}
inline void IndexBuffer::set_allocated_bound(::Tiny3D::Script::ModelSystem::Bound* bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bound_;
  }
  if (bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bound, submessage_arena);
    }
    
  } else {
    
  }
  bound_ = bound;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.IndexBuffer.bound)
}

// repeated int32 indices = 6;
inline int IndexBuffer::_internal_indices_size() const {
  return indices_.size();
}
inline int IndexBuffer::indices_size() const {
  return _internal_indices_size();
}
inline void IndexBuffer::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexBuffer::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexBuffer::indices(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.indices)
  return _internal_indices(index);
}
inline void IndexBuffer::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.indices)
}
inline void IndexBuffer::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void IndexBuffer::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.IndexBuffer.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IndexBuffer::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IndexBuffer::indices() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.IndexBuffer.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IndexBuffer::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IndexBuffer::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.IndexBuffer.indices)
  return _internal_mutable_indices();
}

// -------------------------------------------------------------------

// KeyframeData

// float time = 1;
inline void KeyframeData::clear_time() {
  time_ = 0;
}
inline float KeyframeData::_internal_time() const {
  return time_;
}
inline float KeyframeData::time() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.KeyframeData.time)
  return _internal_time();
}
inline void KeyframeData::_internal_set_time(float value) {
  
  time_ = value;
}
inline void KeyframeData::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.KeyframeData.time)
}

// .Tiny3D.Script.Vector3 translation = 2;
inline bool KeyframeData::_internal_has_translation() const {
  return KeyframeOneOf_case() == kTranslation;
}
inline bool KeyframeData::has_translation() const {
  return _internal_has_translation();
}
inline void KeyframeData::set_has_translation() {
  _oneof_case_[0] = kTranslation;
}
inline ::Tiny3D::Script::Vector3* KeyframeData::release_translation() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.KeyframeData.translation)
  if (_internal_has_translation()) {
    clear_has_KeyframeOneOf();
      ::Tiny3D::Script::Vector3* temp = KeyframeOneOf_.translation_;
    KeyframeOneOf_.translation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector3& KeyframeData::_internal_translation() const {
  return _internal_has_translation()
      ? *KeyframeOneOf_.translation_
      : *reinterpret_cast< ::Tiny3D::Script::Vector3*>(&::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& KeyframeData::translation() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.KeyframeData.translation)
  return _internal_translation();
}
inline ::Tiny3D::Script::Vector3* KeyframeData::_internal_mutable_translation() {
  if (!_internal_has_translation()) {
    clear_KeyframeOneOf();
    set_has_translation();
    KeyframeOneOf_.translation_ = CreateMaybeMessage< ::Tiny3D::Script::Vector3 >(
        GetArenaNoVirtual());
  }
  return KeyframeOneOf_.translation_;
}
inline ::Tiny3D::Script::Vector3* KeyframeData::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.KeyframeData.translation)
  return _internal_mutable_translation();
}

// .Tiny3D.Script.Quaternion rotation = 3;
inline bool KeyframeData::_internal_has_rotation() const {
  return KeyframeOneOf_case() == kRotation;
}
inline bool KeyframeData::has_rotation() const {
  return _internal_has_rotation();
}
inline void KeyframeData::set_has_rotation() {
  _oneof_case_[0] = kRotation;
}
inline ::Tiny3D::Script::Quaternion* KeyframeData::release_rotation() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.KeyframeData.rotation)
  if (_internal_has_rotation()) {
    clear_has_KeyframeOneOf();
      ::Tiny3D::Script::Quaternion* temp = KeyframeOneOf_.rotation_;
    KeyframeOneOf_.rotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Quaternion& KeyframeData::_internal_rotation() const {
  return _internal_has_rotation()
      ? *KeyframeOneOf_.rotation_
      : *reinterpret_cast< ::Tiny3D::Script::Quaternion*>(&::Tiny3D::Script::_Quaternion_default_instance_);
}
inline const ::Tiny3D::Script::Quaternion& KeyframeData::rotation() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.KeyframeData.rotation)
  return _internal_rotation();
}
inline ::Tiny3D::Script::Quaternion* KeyframeData::_internal_mutable_rotation() {
  if (!_internal_has_rotation()) {
    clear_KeyframeOneOf();
    set_has_rotation();
    KeyframeOneOf_.rotation_ = CreateMaybeMessage< ::Tiny3D::Script::Quaternion >(
        GetArenaNoVirtual());
  }
  return KeyframeOneOf_.rotation_;
}
inline ::Tiny3D::Script::Quaternion* KeyframeData::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.KeyframeData.rotation)
  return _internal_mutable_rotation();
}

// .Tiny3D.Script.Vector3 scaling = 4;
inline bool KeyframeData::_internal_has_scaling() const {
  return KeyframeOneOf_case() == kScaling;
}
inline bool KeyframeData::has_scaling() const {
  return _internal_has_scaling();
}
inline void KeyframeData::set_has_scaling() {
  _oneof_case_[0] = kScaling;
}
inline ::Tiny3D::Script::Vector3* KeyframeData::release_scaling() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.KeyframeData.scaling)
  if (_internal_has_scaling()) {
    clear_has_KeyframeOneOf();
      ::Tiny3D::Script::Vector3* temp = KeyframeOneOf_.scaling_;
    KeyframeOneOf_.scaling_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector3& KeyframeData::_internal_scaling() const {
  return _internal_has_scaling()
      ? *KeyframeOneOf_.scaling_
      : *reinterpret_cast< ::Tiny3D::Script::Vector3*>(&::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& KeyframeData::scaling() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.KeyframeData.scaling)
  return _internal_scaling();
}
inline ::Tiny3D::Script::Vector3* KeyframeData::_internal_mutable_scaling() {
  if (!_internal_has_scaling()) {
    clear_KeyframeOneOf();
    set_has_scaling();
    KeyframeOneOf_.scaling_ = CreateMaybeMessage< ::Tiny3D::Script::Vector3 >(
        GetArenaNoVirtual());
  }
  return KeyframeOneOf_.scaling_;
}
inline ::Tiny3D::Script::Vector3* KeyframeData::mutable_scaling() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.KeyframeData.scaling)
  return _internal_mutable_scaling();
}

inline bool KeyframeData::has_KeyframeOneOf() const {
  return KeyframeOneOf_case() != KEYFRAMEONEOF_NOT_SET;
}
inline void KeyframeData::clear_has_KeyframeOneOf() {
  _oneof_case_[0] = KEYFRAMEONEOF_NOT_SET;
}
inline KeyframeData::KeyframeOneOfCase KeyframeData::KeyframeOneOf_case() const {
  return KeyframeData::KeyframeOneOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Keyframe

// .Tiny3D.Script.ModelSystem.Keyframe.Type type = 1;
inline void Keyframe::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::Keyframe_Type Keyframe::_internal_type() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::Keyframe_Type >(type_);
}
inline ::Tiny3D::Script::ModelSystem::Keyframe_Type Keyframe::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframe.type)
  return _internal_type();
}
inline void Keyframe::_internal_set_type(::Tiny3D::Script::ModelSystem::Keyframe_Type value) {
  
  type_ = value;
}
inline void Keyframe::set_type(::Tiny3D::Script::ModelSystem::Keyframe_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Keyframe.type)
}

// string bone = 2;
inline void Keyframe::clear_bone() {
  bone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Keyframe::bone() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframe.bone)
  return _internal_bone();
}
inline void Keyframe::set_bone(const std::string& value) {
  _internal_set_bone(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Keyframe.bone)
}
inline std::string* Keyframe::mutable_bone() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Keyframe.bone)
  return _internal_mutable_bone();
}
inline const std::string& Keyframe::_internal_bone() const {
  return bone_.GetNoArena();
}
inline void Keyframe::_internal_set_bone(const std::string& value) {
  
  bone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Keyframe::set_bone(std::string&& value) {
  
  bone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.Keyframe.bone)
}
inline void Keyframe::set_bone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.Keyframe.bone)
}
inline void Keyframe::set_bone(const char* value, size_t size) {
  
  bone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.Keyframe.bone)
}
inline std::string* Keyframe::_internal_mutable_bone() {
  
  return bone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Keyframe::release_bone() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Keyframe.bone)
  
  return bone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Keyframe::set_allocated_bone(std::string* bone) {
  if (bone != nullptr) {
    
  } else {
    
  }
  bone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bone);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Keyframe.bone)
}

// repeated .Tiny3D.Script.ModelSystem.KeyframeData frames = 3;
inline int Keyframe::_internal_frames_size() const {
  return frames_.size();
}
inline int Keyframe::frames_size() const {
  return _internal_frames_size();
}
inline void Keyframe::clear_frames() {
  frames_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::KeyframeData* Keyframe::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Keyframe.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::KeyframeData >*
Keyframe::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Keyframe.frames)
  return &frames_;
}
inline const ::Tiny3D::Script::ModelSystem::KeyframeData& Keyframe::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::KeyframeData& Keyframe::frames(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframe.frames)
  return _internal_frames(index);
}
inline ::Tiny3D::Script::ModelSystem::KeyframeData* Keyframe::_internal_add_frames() {
  return frames_.Add();
}
inline ::Tiny3D::Script::ModelSystem::KeyframeData* Keyframe::add_frames() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Keyframe.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::KeyframeData >&
Keyframe::frames() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Keyframe.frames)
  return frames_;
}

// -------------------------------------------------------------------

// AnimationClip

// string name = 1;
inline void AnimationClip::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AnimationClip::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.AnimationClip.name)
  return _internal_name();
}
inline void AnimationClip::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.AnimationClip.name)
}
inline std::string* AnimationClip::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.AnimationClip.name)
  return _internal_mutable_name();
}
inline const std::string& AnimationClip::_internal_name() const {
  return name_.GetNoArena();
}
inline void AnimationClip::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AnimationClip::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.AnimationClip.name)
}
inline void AnimationClip::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.AnimationClip.name)
}
inline void AnimationClip::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.AnimationClip.name)
}
inline std::string* AnimationClip::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AnimationClip::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.AnimationClip.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AnimationClip::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.AnimationClip.name)
}

// float duration = 2;
inline void AnimationClip::clear_duration() {
  duration_ = 0;
}
inline float AnimationClip::_internal_duration() const {
  return duration_;
}
inline float AnimationClip::duration() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.AnimationClip.duration)
  return _internal_duration();
}
inline void AnimationClip::_internal_set_duration(float value) {
  
  duration_ = value;
}
inline void AnimationClip::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.AnimationClip.duration)
}

// repeated .Tiny3D.Script.ModelSystem.Keyframe keyframes = 3;
inline int AnimationClip::_internal_keyframes_size() const {
  return keyframes_.size();
}
inline int AnimationClip::keyframes_size() const {
  return _internal_keyframes_size();
}
inline void AnimationClip::clear_keyframes() {
  keyframes_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* AnimationClip::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.AnimationClip.keyframes)
  return keyframes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >*
AnimationClip::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.AnimationClip.keyframes)
  return &keyframes_;
}
inline const ::Tiny3D::Script::ModelSystem::Keyframe& AnimationClip::_internal_keyframes(int index) const {
  return keyframes_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::Keyframe& AnimationClip::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.AnimationClip.keyframes)
  return _internal_keyframes(index);
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* AnimationClip::_internal_add_keyframes() {
  return keyframes_.Add();
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* AnimationClip::add_keyframes() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.AnimationClip.keyframes)
  return _internal_add_keyframes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >&
AnimationClip::keyframes() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.AnimationClip.keyframes)
  return keyframes_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MeshData

// string name = 1;
inline void MeshData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MeshData::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.MeshData.name)
  return _internal_name();
}
inline void MeshData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.MeshData.name)
}
inline std::string* MeshData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.MeshData.name)
  return _internal_mutable_name();
}
inline const std::string& MeshData::_internal_name() const {
  return name_.GetNoArena();
}
inline void MeshData::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MeshData::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.MeshData.name)
}
inline void MeshData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.MeshData.name)
}
inline void MeshData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.MeshData.name)
}
inline std::string* MeshData::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeshData::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.MeshData.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeshData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.MeshData.name)
}

// repeated .Tiny3D.Script.ModelSystem.VertexBuffer vertex_buffers = 2;
inline int MeshData::_internal_vertex_buffers_size() const {
  return vertex_buffers_.size();
}
inline int MeshData::vertex_buffers_size() const {
  return _internal_vertex_buffers_size();
}
inline void MeshData::clear_vertex_buffers() {
  vertex_buffers_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::VertexBuffer* MeshData::mutable_vertex_buffers(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return vertex_buffers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer >*
MeshData::mutable_vertex_buffers() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return &vertex_buffers_;
}
inline const ::Tiny3D::Script::ModelSystem::VertexBuffer& MeshData::_internal_vertex_buffers(int index) const {
  return vertex_buffers_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::VertexBuffer& MeshData::vertex_buffers(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return _internal_vertex_buffers(index);
}
inline ::Tiny3D::Script::ModelSystem::VertexBuffer* MeshData::_internal_add_vertex_buffers() {
  return vertex_buffers_.Add();
}
inline ::Tiny3D::Script::ModelSystem::VertexBuffer* MeshData::add_vertex_buffers() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return _internal_add_vertex_buffers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer >&
MeshData::vertex_buffers() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return vertex_buffers_;
}

// repeated .Tiny3D.Script.ModelSystem.IndexBuffer index_buffers = 3;
inline int MeshData::_internal_index_buffers_size() const {
  return index_buffers_.size();
}
inline int MeshData::index_buffers_size() const {
  return _internal_index_buffers_size();
}
inline void MeshData::clear_index_buffers() {
  index_buffers_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::IndexBuffer* MeshData::mutable_index_buffers(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return index_buffers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer >*
MeshData::mutable_index_buffers() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return &index_buffers_;
}
inline const ::Tiny3D::Script::ModelSystem::IndexBuffer& MeshData::_internal_index_buffers(int index) const {
  return index_buffers_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::IndexBuffer& MeshData::index_buffers(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return _internal_index_buffers(index);
}
inline ::Tiny3D::Script::ModelSystem::IndexBuffer* MeshData::_internal_add_index_buffers() {
  return index_buffers_.Add();
}
inline ::Tiny3D::Script::ModelSystem::IndexBuffer* MeshData::add_index_buffers() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return _internal_add_index_buffers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer >&
MeshData::index_buffers() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return index_buffers_;
}

// map<string, .Tiny3D.Script.Matrix4> offset = 4;
inline int MeshData::_internal_offset_size() const {
  return offset_.size();
}
inline int MeshData::offset_size() const {
  return _internal_offset_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >&
MeshData::_internal_offset() const {
  return offset_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >&
MeshData::offset() const {
  // @@protoc_insertion_point(field_map:Tiny3D.Script.ModelSystem.MeshData.offset)
  return _internal_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >*
MeshData::_internal_mutable_offset() {
  return offset_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >*
MeshData::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_map:Tiny3D.Script.ModelSystem.MeshData.offset)
  return _internal_mutable_offset();
}

// repeated .Tiny3D.Script.ModelSystem.AnimationClip clips = 5;
inline int MeshData::_internal_clips_size() const {
  return clips_.size();
}
inline int MeshData::clips_size() const {
  return _internal_clips_size();
}
inline void MeshData::clear_clips() {
  clips_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::AnimationClip* MeshData::mutable_clips(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.MeshData.clips)
  return clips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::AnimationClip >*
MeshData::mutable_clips() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.MeshData.clips)
  return &clips_;
}
inline const ::Tiny3D::Script::ModelSystem::AnimationClip& MeshData::_internal_clips(int index) const {
  return clips_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::AnimationClip& MeshData::clips(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.MeshData.clips)
  return _internal_clips(index);
}
inline ::Tiny3D::Script::ModelSystem::AnimationClip* MeshData::_internal_add_clips() {
  return clips_.Add();
}
inline ::Tiny3D::Script::ModelSystem::AnimationClip* MeshData::add_clips() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.MeshData.clips)
  return _internal_add_clips();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::AnimationClip >&
MeshData::clips() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.MeshData.clips)
  return clips_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic>() {
  return ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::VertexAttribute_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::VertexAttribute_Type>() {
  return ::Tiny3D::Script::ModelSystem::VertexAttribute_Type_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::Bound_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::Bound_Type>() {
  return ::Tiny3D::Script::ModelSystem::Bound_Type_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::Keyframe_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::Keyframe_Type>() {
  return ::Tiny3D::Script::ModelSystem::Keyframe_Type_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::PrimitiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::PrimitiveType>() {
  return ::Tiny3D::Script::ModelSystem::PrimitiveType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto
