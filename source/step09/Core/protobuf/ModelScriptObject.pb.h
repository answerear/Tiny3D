// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModelScriptObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "CommonScriptObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ModelScriptObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Tiny3D {
namespace Script {
namespace ModelSystem {
class ModelFile;
class ModelFileDefaultTypeInternal;
extern ModelFileDefaultTypeInternal _ModelFile_default_instance_;
}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> ::Tiny3D::Script::ModelSystem::ModelFile* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::ModelFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tiny3D {
namespace Script {
namespace ModelSystem {

// ===================================================================

class ModelFile :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.ModelFile) */ {
 public:
  ModelFile();
  virtual ~ModelFile();

  ModelFile(const ModelFile& from);
  ModelFile(ModelFile&& from) noexcept
    : ModelFile() {
    *this = ::std::move(from);
  }

  inline ModelFile& operator=(const ModelFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelFile& operator=(ModelFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ModelFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelFile* internal_default_instance() {
    return reinterpret_cast<const ModelFile*>(
               &_ModelFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelFile& a, ModelFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelFile* New() const final {
    return CreateMaybeMessage<ModelFile>(nullptr);
  }

  ModelFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelFile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ModelFile& from);
  void MergeFrom(const ModelFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.ModelFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .Tiny3D.Script.FileHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::FileHeader& header() const;
  ::Tiny3D::Script::FileHeader* release_header();
  ::Tiny3D::Script::FileHeader* mutable_header();
  void set_allocated_header(::Tiny3D::Script::FileHeader* header);
  private:
  const ::Tiny3D::Script::FileHeader& _internal_header() const;
  ::Tiny3D::Script::FileHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.ModelFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Tiny3D::Script::FileHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelFile

// .Tiny3D.Script.FileHeader header = 1;
inline bool ModelFile::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ModelFile::has_header() const {
  return _internal_has_header();
}
inline const ::Tiny3D::Script::FileHeader& ModelFile::_internal_header() const {
  const ::Tiny3D::Script::FileHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::FileHeader*>(
      &::Tiny3D::Script::_FileHeader_default_instance_);
}
inline const ::Tiny3D::Script::FileHeader& ModelFile::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.ModelFile.header)
  return _internal_header();
}
inline ::Tiny3D::Script::FileHeader* ModelFile::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.ModelFile.header)
  
  ::Tiny3D::Script::FileHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::FileHeader* ModelFile::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::FileHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::FileHeader* ModelFile::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.ModelFile.header)
  return _internal_mutable_header();
}
inline void ModelFile::set_allocated_header(::Tiny3D::Script::FileHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.ModelFile.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto
