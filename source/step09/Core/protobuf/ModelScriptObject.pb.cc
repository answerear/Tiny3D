// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModelScriptObject.proto

#include "ModelScriptObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColorList_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatList_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix4_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Aabb_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnimationClip_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Bound_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexBuffer_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Keyframe_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KeyframeData_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshData_OffsetEntry_DoNotUse_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obb_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Sphere_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Vertex_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexAttribute_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VertexBuffer_ModelScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UintList_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vector2List_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vector3List_CommonScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace ModelSystem {
class VertexAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexAttribute> _instance;
} _VertexAttribute_default_instance_;
class VertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vertex> _instance;
  const ::Tiny3D::Script::Vector2List* texcoord_;
  const ::Tiny3D::Script::Vector3List* normal_;
  const ::Tiny3D::Script::Vector3List* tangent_;
  const ::Tiny3D::Script::Vector3List* binormal_;
  const ::Tiny3D::Script::ColorList* diffuse_;
  const ::Tiny3D::Script::ColorList* specular_;
  const ::Tiny3D::Script::UintList* blend_indices_;
  const ::Tiny3D::Script::FloatList* blend_weights_;
} _Vertex_default_instance_;
class VertexBufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexBuffer> _instance;
} _VertexBuffer_default_instance_;
class SphereDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sphere> _instance;
} _Sphere_default_instance_;
class AabbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Aabb> _instance;
} _Aabb_default_instance_;
class ObbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obb> _instance;
} _Obb_default_instance_;
class BoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bound> _instance;
  const ::Tiny3D::Script::ModelSystem::Sphere* sphere_;
  const ::Tiny3D::Script::ModelSystem::Aabb* aabb_;
  const ::Tiny3D::Script::ModelSystem::Obb* obb_;
} _Bound_default_instance_;
class IndexBufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexBuffer> _instance;
} _IndexBuffer_default_instance_;
class KeyframeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyframeData> _instance;
  const ::Tiny3D::Script::Vector3* translation_;
  const ::Tiny3D::Script::Quaternion* rotation_;
  const ::Tiny3D::Script::Vector3* scaling_;
} _KeyframeData_default_instance_;
class KeyframeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Keyframe> _instance;
} _Keyframe_default_instance_;
class AnimationClipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationClip> _instance;
} _AnimationClip_default_instance_;
class MeshData_OffsetEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshData_OffsetEntry_DoNotUse> _instance;
} _MeshData_OffsetEntry_DoNotUse_default_instance_;
class MeshDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshData> _instance;
} _MeshData_default_instance_;
}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D
static void InitDefaultsscc_info_Aabb_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_Aabb_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::Aabb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::Aabb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Aabb_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Aabb_ModelScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_AnimationClip_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_AnimationClip_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::AnimationClip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::AnimationClip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnimationClip_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnimationClip_ModelScriptObject_2eproto}, {
      &scc_info_Keyframe_ModelScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Bound_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_Bound_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::Bound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::Bound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Bound_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Bound_ModelScriptObject_2eproto}, {
      &scc_info_Sphere_ModelScriptObject_2eproto.base,
      &scc_info_Aabb_ModelScriptObject_2eproto.base,
      &scc_info_Obb_ModelScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_IndexBuffer_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_IndexBuffer_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::IndexBuffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::IndexBuffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexBuffer_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IndexBuffer_ModelScriptObject_2eproto}, {
      &scc_info_Bound_ModelScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Keyframe_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_Keyframe_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::Keyframe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::Keyframe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Keyframe_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Keyframe_ModelScriptObject_2eproto}, {
      &scc_info_KeyframeData_ModelScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_KeyframeData_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_KeyframeData_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::KeyframeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::KeyframeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KeyframeData_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_KeyframeData_ModelScriptObject_2eproto}, {
      &scc_info_Vector3_CommonScriptObject_2eproto.base,
      &scc_info_Quaternion_CommonScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_MeshData_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_MeshData_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::MeshData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::MeshData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MeshData_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MeshData_ModelScriptObject_2eproto}, {
      &scc_info_VertexBuffer_ModelScriptObject_2eproto.base,
      &scc_info_IndexBuffer_ModelScriptObject_2eproto.base,
      &scc_info_MeshData_OffsetEntry_DoNotUse_ModelScriptObject_2eproto.base,
      &scc_info_AnimationClip_ModelScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_MeshData_OffsetEntry_DoNotUse_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_MeshData_OffsetEntry_DoNotUse_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse();
  }
  ::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshData_OffsetEntry_DoNotUse_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MeshData_OffsetEntry_DoNotUse_ModelScriptObject_2eproto}, {
      &scc_info_Matrix4_CommonScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Obb_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_Obb_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::Obb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::Obb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obb_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Obb_ModelScriptObject_2eproto}, {
      &scc_info_Vector3_CommonScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Sphere_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_Sphere_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::Sphere();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::Sphere::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Sphere_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Sphere_ModelScriptObject_2eproto}, {
      &scc_info_Vector3_CommonScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Vertex_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_Vertex_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::Vertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::Vertex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Vertex_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Vertex_ModelScriptObject_2eproto}, {
      &scc_info_Vector3_CommonScriptObject_2eproto.base,
      &scc_info_Vector2List_CommonScriptObject_2eproto.base,
      &scc_info_Vector3List_CommonScriptObject_2eproto.base,
      &scc_info_ColorList_CommonScriptObject_2eproto.base,
      &scc_info_UintList_CommonScriptObject_2eproto.base,
      &scc_info_FloatList_CommonScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_VertexAttribute_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_VertexAttribute_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::VertexAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::VertexAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexAttribute_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VertexAttribute_ModelScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_VertexBuffer_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_VertexBuffer_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::VertexBuffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::VertexBuffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VertexBuffer_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VertexBuffer_ModelScriptObject_2eproto}, {
      &scc_info_VertexAttribute_ModelScriptObject_2eproto.base,
      &scc_info_Vertex_ModelScriptObject_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ModelScriptObject_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ModelScriptObject_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ModelScriptObject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ModelScriptObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::VertexAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::VertexAttribute, semantic_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::VertexAttribute, type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::VertexAttribute, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Vertex, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Vertex, pos_),
  offsetof(::Tiny3D::Script::ModelSystem::VertexDefaultTypeInternal, texcoord_),
  offsetof(::Tiny3D::Script::ModelSystem::VertexDefaultTypeInternal, normal_),
  offsetof(::Tiny3D::Script::ModelSystem::VertexDefaultTypeInternal, tangent_),
  offsetof(::Tiny3D::Script::ModelSystem::VertexDefaultTypeInternal, binormal_),
  offsetof(::Tiny3D::Script::ModelSystem::VertexDefaultTypeInternal, diffuse_),
  offsetof(::Tiny3D::Script::ModelSystem::VertexDefaultTypeInternal, specular_),
  offsetof(::Tiny3D::Script::ModelSystem::VertexDefaultTypeInternal, blend_indices_),
  offsetof(::Tiny3D::Script::ModelSystem::VertexDefaultTypeInternal, blend_weights_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Vertex, Extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::VertexBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::VertexBuffer, attributes_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::VertexBuffer, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Sphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Sphere, center_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Sphere, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Aabb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Aabb, min_x_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Aabb, max_x_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Aabb, min_y_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Aabb, max_y_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Aabb, min_z_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Aabb, max_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Obb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Obb, center_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Obb, axis_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Obb, extent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Bound, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Bound, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Bound, type_),
  offsetof(::Tiny3D::Script::ModelSystem::BoundDefaultTypeInternal, sphere_),
  offsetof(::Tiny3D::Script::ModelSystem::BoundDefaultTypeInternal, aabb_),
  offsetof(::Tiny3D::Script::ModelSystem::BoundDefaultTypeInternal, obb_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Bound, ValueOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::IndexBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::IndexBuffer, is_16bit_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::IndexBuffer, primitive_type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::IndexBuffer, primitive_count_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::IndexBuffer, material_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::IndexBuffer, bound_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::IndexBuffer, indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::KeyframeData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::KeyframeData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::KeyframeData, time_),
  offsetof(::Tiny3D::Script::ModelSystem::KeyframeDataDefaultTypeInternal, translation_),
  offsetof(::Tiny3D::Script::ModelSystem::KeyframeDataDefaultTypeInternal, rotation_),
  offsetof(::Tiny3D::Script::ModelSystem::KeyframeDataDefaultTypeInternal, scaling_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::KeyframeData, KeyframeOneOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Keyframe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Keyframe, type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Keyframe, bone_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::Keyframe, frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::AnimationClip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::AnimationClip, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::AnimationClip, duration_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::AnimationClip, keyframes_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData, vertex_buffers_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData, index_buffers_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData, offset_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ModelSystem::MeshData, clips_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Tiny3D::Script::ModelSystem::VertexAttribute)},
  { 8, -1, sizeof(::Tiny3D::Script::ModelSystem::Vertex)},
  { 23, -1, sizeof(::Tiny3D::Script::ModelSystem::VertexBuffer)},
  { 30, -1, sizeof(::Tiny3D::Script::ModelSystem::Sphere)},
  { 37, -1, sizeof(::Tiny3D::Script::ModelSystem::Aabb)},
  { 48, -1, sizeof(::Tiny3D::Script::ModelSystem::Obb)},
  { 56, -1, sizeof(::Tiny3D::Script::ModelSystem::Bound)},
  { 66, -1, sizeof(::Tiny3D::Script::ModelSystem::IndexBuffer)},
  { 77, -1, sizeof(::Tiny3D::Script::ModelSystem::KeyframeData)},
  { 87, -1, sizeof(::Tiny3D::Script::ModelSystem::Keyframe)},
  { 95, -1, sizeof(::Tiny3D::Script::ModelSystem::AnimationClip)},
  { 103, 110, sizeof(::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse)},
  { 112, -1, sizeof(::Tiny3D::Script::ModelSystem::MeshData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_VertexAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_Vertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_VertexBuffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_Sphere_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_Aabb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_Obb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_Bound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_IndexBuffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_KeyframeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_Keyframe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_AnimationClip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_MeshData_OffsetEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ModelSystem::_MeshData_default_instance_),
};

const char descriptor_table_protodef_ModelScriptObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ModelScriptObject.proto\022\031Tiny3D.Script"
  ".ModelSystem\032\030CommonScriptObject.proto\"\353"
  "\006\n\017VertexAttribute\022E\n\010semantic\030\001 \001(\01623.T"
  "iny3D.Script.ModelSystem.VertexAttribute"
  ".Semantic\022=\n\004type\030\002 \001(\0162/.Tiny3D.Script."
  "ModelSystem.VertexAttribute.Type\022\014\n\004size"
  "\030\003 \001(\r\"\255\001\n\010Semantic\022\020\n\014VAS_POSITION\020\000\022\020\n"
  "\014VAS_TEXCOORD\020\001\022\016\n\nVAS_NORMAL\020\002\022\017\n\013VAS_T"
  "ANGENT\020\003\022\020\n\014VAS_BINORMAL\020\004\022\017\n\013VAS_DIFFUS"
  "E\020\005\022\020\n\014VAS_SPECULAR\020\006\022\022\n\016VAS_BLENDINDEX\020"
  "\007\022\023\n\017VAS_BLENDWEIGHT\020\010\"\223\004\n\004Type\022\016\n\nVAT_F"
  "LOAT1\020\000\022\016\n\nVAT_FLOAT2\020\001\022\016\n\nVAT_FLOAT3\020\002\022"
  "\016\n\nVAT_FLOAT4\020\003\022\r\n\tVAT_COLOR\020\004\022\r\n\tVAT_BY"
  "TE4\020\005\022\022\n\016VAT_BYTE4_NORM\020\006\022\016\n\nVAT_UBYTE4\020"
  "\007\022\023\n\017VAT_UBYTE4_NORM\020\010\022\016\n\nVAT_SHORT2\020\t\022\016"
  "\n\nVAT_SHORT4\020\n\022\023\n\017VAT_SHORT2_NORM\020\013\022\023\n\017V"
  "AT_SHORT4_NORM\020\014\022\017\n\013VAT_USHORT2\020\r\022\017\n\013VAT"
  "_USHORT4\020\016\022\024\n\020VAT_USHORT2_NORM\020\017\022\024\n\020VAT_"
  "USHORT4_NORM\020\020\022\017\n\013VAT_DOUBLE1\020\021\022\017\n\013VAT_D"
  "OUBLE2\020\022\022\017\n\013VAT_DOUBLE3\020\023\022\017\n\013VAT_DOUBLE4"
  "\020\024\022\014\n\010VAT_INT1\020\025\022\014\n\010VAT_INT2\020\026\022\014\n\010VAT_IN"
  "T3\020\027\022\014\n\010VAT_INT4\020\030\022\r\n\tVAT_UINT1\020\031\022\r\n\tVAT"
  "_UINT2\020\032\022\r\n\tVAT_UINT3\020\033\022\r\n\tVAT_UINT4\020\034\022\021"
  "\n\rVAT_FLOAT16_2\020\035\022\021\n\rVAT_FLOAT16_4\020\036\"\267\003\n"
  "\006Vertex\022#\n\003pos\030\001 \001(\0132\026.Tiny3D.Script.Vec"
  "tor3\022.\n\010texcoord\030\002 \001(\0132\032.Tiny3D.Script.V"
  "ector2ListH\000\022,\n\006normal\030\003 \001(\0132\032.Tiny3D.Sc"
  "ript.Vector3ListH\000\022-\n\007tangent\030\004 \001(\0132\032.Ti"
  "ny3D.Script.Vector3ListH\000\022.\n\010binormal\030\005 "
  "\001(\0132\032.Tiny3D.Script.Vector3ListH\000\022+\n\007dif"
  "fuse\030\006 \001(\0132\030.Tiny3D.Script.ColorListH\000\022,"
  "\n\010specular\030\007 \001(\0132\030.Tiny3D.Script.ColorLi"
  "stH\000\0220\n\rblend_indices\030\010 \001(\0132\027.Tiny3D.Scr"
  "ipt.UintListH\000\0221\n\rblend_weights\030\t \001(\0132\030."
  "Tiny3D.Script.FloatListH\000B\013\n\tExtension\"\203"
  "\001\n\014VertexBuffer\022>\n\nattributes\030\001 \003(\0132*.Ti"
  "ny3D.Script.ModelSystem.VertexAttribute\022"
  "3\n\010vertices\030\002 \003(\0132!.Tiny3D.Script.ModelS"
  "ystem.Vertex\"@\n\006Sphere\022&\n\006center\030\001 \001(\0132\026"
  ".Tiny3D.Script.Vector3\022\016\n\006radius\030\002 \001(\002\"`"
  "\n\004Aabb\022\r\n\005min_x\030\001 \001(\002\022\r\n\005max_x\030\002 \001(\002\022\r\n\005"
  "min_y\030\003 \001(\002\022\r\n\005max_y\030\004 \001(\002\022\r\n\005min_z\030\005 \001("
  "\002\022\r\n\005max_z\030\006 \001(\002\"c\n\003Obb\022&\n\006center\030\001 \001(\0132"
  "\026.Tiny3D.Script.Vector3\022$\n\004axis\030\002 \003(\0132\026."
  "Tiny3D.Script.Vector3\022\016\n\006extent\030\003 \003(\002\"\214\002"
  "\n\005Bound\0223\n\004type\030\001 \001(\0162%.Tiny3D.Script.Mo"
  "delSystem.Bound.Type\0223\n\006sphere\030\002 \001(\0132!.T"
  "iny3D.Script.ModelSystem.SphereH\000\022/\n\004aab"
  "b\030\003 \001(\0132\037.Tiny3D.Script.ModelSystem.Aabb"
  "H\000\022-\n\003obb\030\004 \001(\0132\036.Tiny3D.Script.ModelSys"
  "tem.ObbH\000\".\n\004Type\022\r\n\tBT_SPHERE\020\000\022\013\n\007BT_A"
  "ABB\020\001\022\n\n\006BT_OBB\020\002B\t\n\007ValueOf\"\316\001\n\013IndexBu"
  "ffer\022\020\n\010is_16bit\030\001 \001(\010\022@\n\016primitive_type"
  "\030\002 \001(\0162(.Tiny3D.Script.ModelSystem.Primi"
  "tiveType\022\027\n\017primitive_count\030\003 \001(\r\022\020\n\010mat"
  "erial\030\004 \001(\t\022/\n\005bound\030\005 \001(\0132 .Tiny3D.Scri"
  "pt.ModelSystem.Bound\022\017\n\007indices\030\006 \003(\005\"\266\001"
  "\n\014KeyframeData\022\014\n\004time\030\001 \001(\002\022-\n\013translat"
  "ion\030\002 \001(\0132\026.Tiny3D.Script.Vector3H\000\022-\n\010r"
  "otation\030\003 \001(\0132\031.Tiny3D.Script.Quaternion"
  "H\000\022)\n\007scaling\030\004 \001(\0132\026.Tiny3D.Script.Vect"
  "or3H\000B\017\n\rKeyframeOneOf\"\306\001\n\010Keyframe\0226\n\004t"
  "ype\030\001 \001(\0162(.Tiny3D.Script.ModelSystem.Ke"
  "yframe.Type\022\014\n\004bone\030\002 \001(\t\0227\n\006frames\030\003 \003("
  "\0132\'.Tiny3D.Script.ModelSystem.KeyframeDa"
  "ta\";\n\004Type\022\022\n\016KT_TRANSLATION\020\000\022\017\n\013KT_ROT"
  "ATION\020\001\022\016\n\nKT_SCALING\020\002\"g\n\rAnimationClip"
  "\022\014\n\004name\030\001 \001(\t\022\020\n\010duration\030\002 \001(\002\0226\n\tkeyf"
  "rames\030\003 \003(\0132#.Tiny3D.Script.ModelSystem."
  "Keyframe\"\331\002\n\010MeshData\022\014\n\004name\030\001 \001(\t\022\?\n\016v"
  "ertex_buffers\030\002 \003(\0132\'.Tiny3D.Script.Mode"
  "lSystem.VertexBuffer\022=\n\rindex_buffers\030\003 "
  "\003(\0132&.Tiny3D.Script.ModelSystem.IndexBuf"
  "fer\022\?\n\006offset\030\004 \003(\0132/.Tiny3D.Script.Mode"
  "lSystem.MeshData.OffsetEntry\0227\n\005clips\030\005 "
  "\003(\0132(.Tiny3D.Script.ModelSystem.Animatio"
  "nClip\032E\n\013OffsetEntry\022\013\n\003key\030\001 \001(\t\022%\n\005val"
  "ue\030\002 \001(\0132\026.Tiny3D.Script.Matrix4:\0028\001*\211\001\n"
  "\rPrimitiveType\022\021\n\rPT_POINT_LIST\020\000\022\020\n\014PT_"
  "LINE_LIST\020\001\022\021\n\rPT_LINE_STRIP\020\002\022\024\n\020PT_TRI"
  "ANGLE_LIST\020\003\022\025\n\021PT_TRIANGLE_STRIP\020\004\022\023\n\017P"
  "T_TRIANGLE_FAN\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ModelScriptObject_2eproto_deps[1] = {
  &::descriptor_table_CommonScriptObject_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ModelScriptObject_2eproto_sccs[13] = {
  &scc_info_Aabb_ModelScriptObject_2eproto.base,
  &scc_info_AnimationClip_ModelScriptObject_2eproto.base,
  &scc_info_Bound_ModelScriptObject_2eproto.base,
  &scc_info_IndexBuffer_ModelScriptObject_2eproto.base,
  &scc_info_Keyframe_ModelScriptObject_2eproto.base,
  &scc_info_KeyframeData_ModelScriptObject_2eproto.base,
  &scc_info_MeshData_ModelScriptObject_2eproto.base,
  &scc_info_MeshData_OffsetEntry_DoNotUse_ModelScriptObject_2eproto.base,
  &scc_info_Obb_ModelScriptObject_2eproto.base,
  &scc_info_Sphere_ModelScriptObject_2eproto.base,
  &scc_info_Vertex_ModelScriptObject_2eproto.base,
  &scc_info_VertexAttribute_ModelScriptObject_2eproto.base,
  &scc_info_VertexBuffer_ModelScriptObject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ModelScriptObject_2eproto_once;
static bool descriptor_table_ModelScriptObject_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ModelScriptObject_2eproto = {
  &descriptor_table_ModelScriptObject_2eproto_initialized, descriptor_table_protodef_ModelScriptObject_2eproto, "ModelScriptObject.proto", 3264,
  &descriptor_table_ModelScriptObject_2eproto_once, descriptor_table_ModelScriptObject_2eproto_sccs, descriptor_table_ModelScriptObject_2eproto_deps, 13, 1,
  schemas, file_default_instances, TableStruct_ModelScriptObject_2eproto::offsets,
  file_level_metadata_ModelScriptObject_2eproto, 13, file_level_enum_descriptors_ModelScriptObject_2eproto, file_level_service_descriptors_ModelScriptObject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ModelScriptObject_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ModelScriptObject_2eproto), true);
namespace Tiny3D {
namespace Script {
namespace ModelSystem {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VertexAttribute_Semantic_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ModelScriptObject_2eproto);
  return file_level_enum_descriptors_ModelScriptObject_2eproto[0];
}
bool VertexAttribute_Semantic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VertexAttribute_Semantic VertexAttribute::VAS_POSITION;
constexpr VertexAttribute_Semantic VertexAttribute::VAS_TEXCOORD;
constexpr VertexAttribute_Semantic VertexAttribute::VAS_NORMAL;
constexpr VertexAttribute_Semantic VertexAttribute::VAS_TANGENT;
constexpr VertexAttribute_Semantic VertexAttribute::VAS_BINORMAL;
constexpr VertexAttribute_Semantic VertexAttribute::VAS_DIFFUSE;
constexpr VertexAttribute_Semantic VertexAttribute::VAS_SPECULAR;
constexpr VertexAttribute_Semantic VertexAttribute::VAS_BLENDINDEX;
constexpr VertexAttribute_Semantic VertexAttribute::VAS_BLENDWEIGHT;
constexpr VertexAttribute_Semantic VertexAttribute::Semantic_MIN;
constexpr VertexAttribute_Semantic VertexAttribute::Semantic_MAX;
constexpr int VertexAttribute::Semantic_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VertexAttribute_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ModelScriptObject_2eproto);
  return file_level_enum_descriptors_ModelScriptObject_2eproto[1];
}
bool VertexAttribute_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VertexAttribute_Type VertexAttribute::VAT_FLOAT1;
constexpr VertexAttribute_Type VertexAttribute::VAT_FLOAT2;
constexpr VertexAttribute_Type VertexAttribute::VAT_FLOAT3;
constexpr VertexAttribute_Type VertexAttribute::VAT_FLOAT4;
constexpr VertexAttribute_Type VertexAttribute::VAT_COLOR;
constexpr VertexAttribute_Type VertexAttribute::VAT_BYTE4;
constexpr VertexAttribute_Type VertexAttribute::VAT_BYTE4_NORM;
constexpr VertexAttribute_Type VertexAttribute::VAT_UBYTE4;
constexpr VertexAttribute_Type VertexAttribute::VAT_UBYTE4_NORM;
constexpr VertexAttribute_Type VertexAttribute::VAT_SHORT2;
constexpr VertexAttribute_Type VertexAttribute::VAT_SHORT4;
constexpr VertexAttribute_Type VertexAttribute::VAT_SHORT2_NORM;
constexpr VertexAttribute_Type VertexAttribute::VAT_SHORT4_NORM;
constexpr VertexAttribute_Type VertexAttribute::VAT_USHORT2;
constexpr VertexAttribute_Type VertexAttribute::VAT_USHORT4;
constexpr VertexAttribute_Type VertexAttribute::VAT_USHORT2_NORM;
constexpr VertexAttribute_Type VertexAttribute::VAT_USHORT4_NORM;
constexpr VertexAttribute_Type VertexAttribute::VAT_DOUBLE1;
constexpr VertexAttribute_Type VertexAttribute::VAT_DOUBLE2;
constexpr VertexAttribute_Type VertexAttribute::VAT_DOUBLE3;
constexpr VertexAttribute_Type VertexAttribute::VAT_DOUBLE4;
constexpr VertexAttribute_Type VertexAttribute::VAT_INT1;
constexpr VertexAttribute_Type VertexAttribute::VAT_INT2;
constexpr VertexAttribute_Type VertexAttribute::VAT_INT3;
constexpr VertexAttribute_Type VertexAttribute::VAT_INT4;
constexpr VertexAttribute_Type VertexAttribute::VAT_UINT1;
constexpr VertexAttribute_Type VertexAttribute::VAT_UINT2;
constexpr VertexAttribute_Type VertexAttribute::VAT_UINT3;
constexpr VertexAttribute_Type VertexAttribute::VAT_UINT4;
constexpr VertexAttribute_Type VertexAttribute::VAT_FLOAT16_2;
constexpr VertexAttribute_Type VertexAttribute::VAT_FLOAT16_4;
constexpr VertexAttribute_Type VertexAttribute::Type_MIN;
constexpr VertexAttribute_Type VertexAttribute::Type_MAX;
constexpr int VertexAttribute::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bound_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ModelScriptObject_2eproto);
  return file_level_enum_descriptors_ModelScriptObject_2eproto[2];
}
bool Bound_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Bound_Type Bound::BT_SPHERE;
constexpr Bound_Type Bound::BT_AABB;
constexpr Bound_Type Bound::BT_OBB;
constexpr Bound_Type Bound::Type_MIN;
constexpr Bound_Type Bound::Type_MAX;
constexpr int Bound::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Keyframe_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ModelScriptObject_2eproto);
  return file_level_enum_descriptors_ModelScriptObject_2eproto[3];
}
bool Keyframe_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Keyframe_Type Keyframe::KT_TRANSLATION;
constexpr Keyframe_Type Keyframe::KT_ROTATION;
constexpr Keyframe_Type Keyframe::KT_SCALING;
constexpr Keyframe_Type Keyframe::Type_MIN;
constexpr Keyframe_Type Keyframe::Type_MAX;
constexpr int Keyframe::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ModelScriptObject_2eproto);
  return file_level_enum_descriptors_ModelScriptObject_2eproto[4];
}
bool PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VertexAttribute::InitAsDefaultInstance() {
}
class VertexAttribute::_Internal {
 public:
};

VertexAttribute::VertexAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.VertexAttribute)
}
VertexAttribute::VertexAttribute(const VertexAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&semantic_, &from.semantic_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&semantic_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.VertexAttribute)
}

void VertexAttribute::SharedCtor() {
  ::memset(&semantic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&semantic_)) + sizeof(size_));
}

VertexAttribute::~VertexAttribute() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.VertexAttribute)
  SharedDtor();
}

void VertexAttribute::SharedDtor() {
}

void VertexAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexAttribute& VertexAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexAttribute_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void VertexAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.VertexAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&semantic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&semantic_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

const char* VertexAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ModelSystem.VertexAttribute.Semantic semantic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_semantic(static_cast<::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ModelSystem.VertexAttribute.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::ModelSystem::VertexAttribute_Type>(val));
        } else goto handle_unusual;
        continue;
      // uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.VertexAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ModelSystem.VertexAttribute.Semantic semantic = 1;
  if (this->semantic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_semantic(), target);
  }

  // .Tiny3D.Script.ModelSystem.VertexAttribute.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.VertexAttribute)
  return target;
}

size_t VertexAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.VertexAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.ModelSystem.VertexAttribute.Semantic semantic = 1;
  if (this->semantic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_semantic());
  }

  // .Tiny3D.Script.ModelSystem.VertexAttribute.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.VertexAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.VertexAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.VertexAttribute)
    MergeFrom(*source);
  }
}

void VertexAttribute::MergeFrom(const VertexAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.VertexAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.semantic() != 0) {
    _internal_set_semantic(from._internal_semantic());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void VertexAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.VertexAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexAttribute::CopyFrom(const VertexAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.VertexAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexAttribute::IsInitialized() const {
  return true;
}

void VertexAttribute::InternalSwap(VertexAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(semantic_, other->semantic_);
  swap(type_, other->type_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vertex::InitAsDefaultInstance() {
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Tiny3D::Script::Vector3*>(
      ::Tiny3D::Script::Vector3::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_.texcoord_ = const_cast< ::Tiny3D::Script::Vector2List*>(
      ::Tiny3D::Script::Vector2List::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_.normal_ = const_cast< ::Tiny3D::Script::Vector3List*>(
      ::Tiny3D::Script::Vector3List::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_.tangent_ = const_cast< ::Tiny3D::Script::Vector3List*>(
      ::Tiny3D::Script::Vector3List::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_.binormal_ = const_cast< ::Tiny3D::Script::Vector3List*>(
      ::Tiny3D::Script::Vector3List::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_.diffuse_ = const_cast< ::Tiny3D::Script::ColorList*>(
      ::Tiny3D::Script::ColorList::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_.specular_ = const_cast< ::Tiny3D::Script::ColorList*>(
      ::Tiny3D::Script::ColorList::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_.blend_indices_ = const_cast< ::Tiny3D::Script::UintList*>(
      ::Tiny3D::Script::UintList::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Vertex_default_instance_.blend_weights_ = const_cast< ::Tiny3D::Script::FloatList*>(
      ::Tiny3D::Script::FloatList::internal_default_instance());
}
class Vertex::_Internal {
 public:
  static const ::Tiny3D::Script::Vector3& pos(const Vertex* msg);
  static const ::Tiny3D::Script::Vector2List& texcoord(const Vertex* msg);
  static const ::Tiny3D::Script::Vector3List& normal(const Vertex* msg);
  static const ::Tiny3D::Script::Vector3List& tangent(const Vertex* msg);
  static const ::Tiny3D::Script::Vector3List& binormal(const Vertex* msg);
  static const ::Tiny3D::Script::ColorList& diffuse(const Vertex* msg);
  static const ::Tiny3D::Script::ColorList& specular(const Vertex* msg);
  static const ::Tiny3D::Script::UintList& blend_indices(const Vertex* msg);
  static const ::Tiny3D::Script::FloatList& blend_weights(const Vertex* msg);
};

const ::Tiny3D::Script::Vector3&
Vertex::_Internal::pos(const Vertex* msg) {
  return *msg->pos_;
}
const ::Tiny3D::Script::Vector2List&
Vertex::_Internal::texcoord(const Vertex* msg) {
  return *msg->Extension_.texcoord_;
}
const ::Tiny3D::Script::Vector3List&
Vertex::_Internal::normal(const Vertex* msg) {
  return *msg->Extension_.normal_;
}
const ::Tiny3D::Script::Vector3List&
Vertex::_Internal::tangent(const Vertex* msg) {
  return *msg->Extension_.tangent_;
}
const ::Tiny3D::Script::Vector3List&
Vertex::_Internal::binormal(const Vertex* msg) {
  return *msg->Extension_.binormal_;
}
const ::Tiny3D::Script::ColorList&
Vertex::_Internal::diffuse(const Vertex* msg) {
  return *msg->Extension_.diffuse_;
}
const ::Tiny3D::Script::ColorList&
Vertex::_Internal::specular(const Vertex* msg) {
  return *msg->Extension_.specular_;
}
const ::Tiny3D::Script::UintList&
Vertex::_Internal::blend_indices(const Vertex* msg) {
  return *msg->Extension_.blend_indices_;
}
const ::Tiny3D::Script::FloatList&
Vertex::_Internal::blend_weights(const Vertex* msg) {
  return *msg->Extension_.blend_weights_;
}
void Vertex::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void Vertex::set_allocated_texcoord(::Tiny3D::Script::Vector2List* texcoord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Extension();
  if (texcoord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texcoord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texcoord, submessage_arena);
    }
    set_has_texcoord();
    Extension_.texcoord_ = texcoord;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.texcoord)
}
void Vertex::clear_texcoord() {
  if (_internal_has_texcoord()) {
    delete Extension_.texcoord_;
    clear_has_Extension();
  }
}
void Vertex::set_allocated_normal(::Tiny3D::Script::Vector3List* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Extension();
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    set_has_normal();
    Extension_.normal_ = normal;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.normal)
}
void Vertex::clear_normal() {
  if (_internal_has_normal()) {
    delete Extension_.normal_;
    clear_has_Extension();
  }
}
void Vertex::set_allocated_tangent(::Tiny3D::Script::Vector3List* tangent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Extension();
  if (tangent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tangent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tangent, submessage_arena);
    }
    set_has_tangent();
    Extension_.tangent_ = tangent;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.tangent)
}
void Vertex::clear_tangent() {
  if (_internal_has_tangent()) {
    delete Extension_.tangent_;
    clear_has_Extension();
  }
}
void Vertex::set_allocated_binormal(::Tiny3D::Script::Vector3List* binormal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Extension();
  if (binormal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binormal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binormal, submessage_arena);
    }
    set_has_binormal();
    Extension_.binormal_ = binormal;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.binormal)
}
void Vertex::clear_binormal() {
  if (_internal_has_binormal()) {
    delete Extension_.binormal_;
    clear_has_Extension();
  }
}
void Vertex::set_allocated_diffuse(::Tiny3D::Script::ColorList* diffuse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Extension();
  if (diffuse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diffuse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffuse, submessage_arena);
    }
    set_has_diffuse();
    Extension_.diffuse_ = diffuse;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.diffuse)
}
void Vertex::clear_diffuse() {
  if (_internal_has_diffuse()) {
    delete Extension_.diffuse_;
    clear_has_Extension();
  }
}
void Vertex::set_allocated_specular(::Tiny3D::Script::ColorList* specular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Extension();
  if (specular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      specular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specular, submessage_arena);
    }
    set_has_specular();
    Extension_.specular_ = specular;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.specular)
}
void Vertex::clear_specular() {
  if (_internal_has_specular()) {
    delete Extension_.specular_;
    clear_has_Extension();
  }
}
void Vertex::set_allocated_blend_indices(::Tiny3D::Script::UintList* blend_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Extension();
  if (blend_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_indices, submessage_arena);
    }
    set_has_blend_indices();
    Extension_.blend_indices_ = blend_indices;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.blend_indices)
}
void Vertex::clear_blend_indices() {
  if (_internal_has_blend_indices()) {
    delete Extension_.blend_indices_;
    clear_has_Extension();
  }
}
void Vertex::set_allocated_blend_weights(::Tiny3D::Script::FloatList* blend_weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Extension();
  if (blend_weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend_weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_weights, submessage_arena);
    }
    set_has_blend_weights();
    Extension_.blend_weights_ = blend_weights;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Vertex.blend_weights)
}
void Vertex::clear_blend_weights() {
  if (_internal_has_blend_weights()) {
    delete Extension_.blend_weights_;
    clear_has_Extension();
  }
}
Vertex::Vertex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.Vertex)
}
Vertex::Vertex(const Vertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Tiny3D::Script::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  clear_has_Extension();
  switch (from.Extension_case()) {
    case kTexcoord: {
      _internal_mutable_texcoord()->::Tiny3D::Script::Vector2List::MergeFrom(from._internal_texcoord());
      break;
    }
    case kNormal: {
      _internal_mutable_normal()->::Tiny3D::Script::Vector3List::MergeFrom(from._internal_normal());
      break;
    }
    case kTangent: {
      _internal_mutable_tangent()->::Tiny3D::Script::Vector3List::MergeFrom(from._internal_tangent());
      break;
    }
    case kBinormal: {
      _internal_mutable_binormal()->::Tiny3D::Script::Vector3List::MergeFrom(from._internal_binormal());
      break;
    }
    case kDiffuse: {
      _internal_mutable_diffuse()->::Tiny3D::Script::ColorList::MergeFrom(from._internal_diffuse());
      break;
    }
    case kSpecular: {
      _internal_mutable_specular()->::Tiny3D::Script::ColorList::MergeFrom(from._internal_specular());
      break;
    }
    case kBlendIndices: {
      _internal_mutable_blend_indices()->::Tiny3D::Script::UintList::MergeFrom(from._internal_blend_indices());
      break;
    }
    case kBlendWeights: {
      _internal_mutable_blend_weights()->::Tiny3D::Script::FloatList::MergeFrom(from._internal_blend_weights());
      break;
    }
    case EXTENSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.Vertex)
}

void Vertex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vertex_ModelScriptObject_2eproto.base);
  pos_ = nullptr;
  clear_has_Extension();
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.Vertex)
  SharedDtor();
}

void Vertex::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (has_Extension()) {
    clear_Extension();
  }
}

void Vertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vertex& Vertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vertex_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Vertex::clear_Extension() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ModelSystem.Vertex)
  switch (Extension_case()) {
    case kTexcoord: {
      delete Extension_.texcoord_;
      break;
    }
    case kNormal: {
      delete Extension_.normal_;
      break;
    }
    case kTangent: {
      delete Extension_.tangent_;
      break;
    }
    case kBinormal: {
      delete Extension_.binormal_;
      break;
    }
    case kDiffuse: {
      delete Extension_.diffuse_;
      break;
    }
    case kSpecular: {
      delete Extension_.specular_;
      break;
    }
    case kBlendIndices: {
      delete Extension_.blend_indices_;
      break;
    }
    case kBlendWeights: {
      delete Extension_.blend_weights_;
      break;
    }
    case EXTENSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXTENSION_NOT_SET;
}


void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  clear_Extension();
  _internal_metadata_.Clear();
}

const char* Vertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.Vector3 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector2List texcoord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_texcoord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector3List normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector3List tangent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tangent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector3List binormal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_binormal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ColorList diffuse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ColorList specular = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_specular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.UintList blend_indices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_indices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.FloatList blend_weights = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_weights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.Vector3 pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // .Tiny3D.Script.Vector2List texcoord = 2;
  if (_internal_has_texcoord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::texcoord(this), target, stream);
  }

  // .Tiny3D.Script.Vector3List normal = 3;
  if (_internal_has_normal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::normal(this), target, stream);
  }

  // .Tiny3D.Script.Vector3List tangent = 4;
  if (_internal_has_tangent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tangent(this), target, stream);
  }

  // .Tiny3D.Script.Vector3List binormal = 5;
  if (_internal_has_binormal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::binormal(this), target, stream);
  }

  // .Tiny3D.Script.ColorList diffuse = 6;
  if (_internal_has_diffuse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::diffuse(this), target, stream);
  }

  // .Tiny3D.Script.ColorList specular = 7;
  if (_internal_has_specular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::specular(this), target, stream);
  }

  // .Tiny3D.Script.UintList blend_indices = 8;
  if (_internal_has_blend_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::blend_indices(this), target, stream);
  }

  // .Tiny3D.Script.FloatList blend_weights = 9;
  if (_internal_has_blend_weights()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::blend_weights(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.Vertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.Vector3 pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  switch (Extension_case()) {
    // .Tiny3D.Script.Vector2List texcoord = 2;
    case kTexcoord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Extension_.texcoord_);
      break;
    }
    // .Tiny3D.Script.Vector3List normal = 3;
    case kNormal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Extension_.normal_);
      break;
    }
    // .Tiny3D.Script.Vector3List tangent = 4;
    case kTangent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Extension_.tangent_);
      break;
    }
    // .Tiny3D.Script.Vector3List binormal = 5;
    case kBinormal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Extension_.binormal_);
      break;
    }
    // .Tiny3D.Script.ColorList diffuse = 6;
    case kDiffuse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Extension_.diffuse_);
      break;
    }
    // .Tiny3D.Script.ColorList specular = 7;
    case kSpecular: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Extension_.specular_);
      break;
    }
    // .Tiny3D.Script.UintList blend_indices = 8;
    case kBlendIndices: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Extension_.blend_indices_);
      break;
    }
    // .Tiny3D.Script.FloatList blend_weights = 9;
    case kBlendWeights: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Extension_.blend_weights_);
      break;
    }
    case EXTENSION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  const Vertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.Vertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.Vertex)
    MergeFrom(*source);
  }
}

void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_pos());
  }
  switch (from.Extension_case()) {
    case kTexcoord: {
      _internal_mutable_texcoord()->::Tiny3D::Script::Vector2List::MergeFrom(from._internal_texcoord());
      break;
    }
    case kNormal: {
      _internal_mutable_normal()->::Tiny3D::Script::Vector3List::MergeFrom(from._internal_normal());
      break;
    }
    case kTangent: {
      _internal_mutable_tangent()->::Tiny3D::Script::Vector3List::MergeFrom(from._internal_tangent());
      break;
    }
    case kBinormal: {
      _internal_mutable_binormal()->::Tiny3D::Script::Vector3List::MergeFrom(from._internal_binormal());
      break;
    }
    case kDiffuse: {
      _internal_mutable_diffuse()->::Tiny3D::Script::ColorList::MergeFrom(from._internal_diffuse());
      break;
    }
    case kSpecular: {
      _internal_mutable_specular()->::Tiny3D::Script::ColorList::MergeFrom(from._internal_specular());
      break;
    }
    case kBlendIndices: {
      _internal_mutable_blend_indices()->::Tiny3D::Script::UintList::MergeFrom(from._internal_blend_indices());
      break;
    }
    case kBlendWeights: {
      _internal_mutable_blend_weights()->::Tiny3D::Script::FloatList::MergeFrom(from._internal_blend_weights());
      break;
    }
    case EXTENSION_NOT_SET: {
      break;
    }
  }
}

void Vertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  return true;
}

void Vertex::InternalSwap(Vertex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(Extension_, other->Extension_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VertexBuffer::InitAsDefaultInstance() {
}
class VertexBuffer::_Internal {
 public:
};

VertexBuffer::VertexBuffer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.VertexBuffer)
}
VertexBuffer::VertexBuffer(const VertexBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.VertexBuffer)
}

void VertexBuffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VertexBuffer_ModelScriptObject_2eproto.base);
}

VertexBuffer::~VertexBuffer() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.VertexBuffer)
  SharedDtor();
}

void VertexBuffer::SharedDtor() {
}

void VertexBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexBuffer& VertexBuffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexBuffer_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void VertexBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.VertexBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  vertices_.Clear();
  _internal_metadata_.Clear();
}

const char* VertexBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Tiny3D.Script.ModelSystem.VertexAttribute attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ModelSystem.Vertex vertices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.VertexBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.ModelSystem.VertexAttribute attributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attributes(i), target, stream);
  }

  // repeated .Tiny3D.Script.ModelSystem.Vertex vertices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.VertexBuffer)
  return target;
}

size_t VertexBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.VertexBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.ModelSystem.VertexAttribute attributes = 1;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.ModelSystem.Vertex vertices = 2;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexBuffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.VertexBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexBuffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexBuffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.VertexBuffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.VertexBuffer)
    MergeFrom(*source);
  }
}

void VertexBuffer::MergeFrom(const VertexBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.VertexBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  vertices_.MergeFrom(from.vertices_);
}

void VertexBuffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.VertexBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexBuffer::CopyFrom(const VertexBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.VertexBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexBuffer::IsInitialized() const {
  return true;
}

void VertexBuffer::InternalSwap(VertexBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexBuffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sphere::InitAsDefaultInstance() {
  ::Tiny3D::Script::ModelSystem::_Sphere_default_instance_._instance.get_mutable()->center_ = const_cast< ::Tiny3D::Script::Vector3*>(
      ::Tiny3D::Script::Vector3::internal_default_instance());
}
class Sphere::_Internal {
 public:
  static const ::Tiny3D::Script::Vector3& center(const Sphere* msg);
};

const ::Tiny3D::Script::Vector3&
Sphere::_Internal::center(const Sphere* msg) {
  return *msg->center_;
}
void Sphere::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
Sphere::Sphere()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.Sphere)
}
Sphere::Sphere(const Sphere& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::Tiny3D::Script::Vector3(*from.center_);
  } else {
    center_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.Sphere)
}

void Sphere::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sphere_ModelScriptObject_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
}

Sphere::~Sphere() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.Sphere)
  SharedDtor();
}

void Sphere::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void Sphere::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sphere& Sphere::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sphere_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Sphere::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.Sphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear();
}

const char* Sphere::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.Vector3 center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sphere::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.Sphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.Vector3 center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // float radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.Sphere)
  return target;
}

size_t Sphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.Sphere)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.Vector3 center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // float radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sphere::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  const Sphere* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sphere>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.Sphere)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.Sphere)
    MergeFrom(*source);
  }
}

void Sphere::MergeFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_center());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void Sphere::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sphere::CopyFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sphere::IsInitialized() const {
  return true;
}

void Sphere::InternalSwap(Sphere* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(center_, other->center_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sphere::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Aabb::InitAsDefaultInstance() {
}
class Aabb::_Internal {
 public:
};

Aabb::Aabb()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.Aabb)
}
Aabb::Aabb(const Aabb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_x_, &from.min_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_z_) -
    reinterpret_cast<char*>(&min_x_)) + sizeof(max_z_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.Aabb)
}

void Aabb::SharedCtor() {
  ::memset(&min_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_z_) -
      reinterpret_cast<char*>(&min_x_)) + sizeof(max_z_));
}

Aabb::~Aabb() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.Aabb)
  SharedDtor();
}

void Aabb::SharedDtor() {
}

void Aabb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Aabb& Aabb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Aabb_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Aabb::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.Aabb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_z_) -
      reinterpret_cast<char*>(&min_x_)) + sizeof(max_z_));
  _internal_metadata_.Clear();
}

const char* Aabb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          min_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          max_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          min_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          max_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aabb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.Aabb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_x = 1;
  if (!(this->min_x() <= 0 && this->min_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_x(), target);
  }

  // float max_x = 2;
  if (!(this->max_x() <= 0 && this->max_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_x(), target);
  }

  // float min_y = 3;
  if (!(this->min_y() <= 0 && this->min_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_y(), target);
  }

  // float max_y = 4;
  if (!(this->max_y() <= 0 && this->max_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_y(), target);
  }

  // float min_z = 5;
  if (!(this->min_z() <= 0 && this->min_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min_z(), target);
  }

  // float max_z = 6;
  if (!(this->max_z() <= 0 && this->max_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_max_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.Aabb)
  return target;
}

size_t Aabb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.Aabb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min_x = 1;
  if (!(this->min_x() <= 0 && this->min_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_x = 2;
  if (!(this->max_x() <= 0 && this->max_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_y = 3;
  if (!(this->min_y() <= 0 && this->min_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_y = 4;
  if (!(this->max_y() <= 0 && this->max_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_z = 5;
  if (!(this->min_z() <= 0 && this->min_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_z = 6;
  if (!(this->max_z() <= 0 && this->max_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Aabb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.Aabb)
  GOOGLE_DCHECK_NE(&from, this);
  const Aabb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Aabb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.Aabb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.Aabb)
    MergeFrom(*source);
  }
}

void Aabb::MergeFrom(const Aabb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.Aabb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min_x() <= 0 && from.min_x() >= 0)) {
    _internal_set_min_x(from._internal_min_x());
  }
  if (!(from.max_x() <= 0 && from.max_x() >= 0)) {
    _internal_set_max_x(from._internal_max_x());
  }
  if (!(from.min_y() <= 0 && from.min_y() >= 0)) {
    _internal_set_min_y(from._internal_min_y());
  }
  if (!(from.max_y() <= 0 && from.max_y() >= 0)) {
    _internal_set_max_y(from._internal_max_y());
  }
  if (!(from.min_z() <= 0 && from.min_z() >= 0)) {
    _internal_set_min_z(from._internal_min_z());
  }
  if (!(from.max_z() <= 0 && from.max_z() >= 0)) {
    _internal_set_max_z(from._internal_max_z());
  }
}

void Aabb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.Aabb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aabb::CopyFrom(const Aabb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.Aabb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aabb::IsInitialized() const {
  return true;
}

void Aabb::InternalSwap(Aabb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_x_, other->min_x_);
  swap(max_x_, other->max_x_);
  swap(min_y_, other->min_y_);
  swap(max_y_, other->max_y_);
  swap(min_z_, other->min_z_);
  swap(max_z_, other->max_z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Aabb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Obb::InitAsDefaultInstance() {
  ::Tiny3D::Script::ModelSystem::_Obb_default_instance_._instance.get_mutable()->center_ = const_cast< ::Tiny3D::Script::Vector3*>(
      ::Tiny3D::Script::Vector3::internal_default_instance());
}
class Obb::_Internal {
 public:
  static const ::Tiny3D::Script::Vector3& center(const Obb* msg);
};

const ::Tiny3D::Script::Vector3&
Obb::_Internal::center(const Obb* msg) {
  return *msg->center_;
}
void Obb::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
void Obb::clear_axis() {
  axis_.Clear();
}
Obb::Obb()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.Obb)
}
Obb::Obb(const Obb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      axis_(from.axis_),
      extent_(from.extent_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::Tiny3D::Script::Vector3(*from.center_);
  } else {
    center_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.Obb)
}

void Obb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obb_ModelScriptObject_2eproto.base);
  center_ = nullptr;
}

Obb::~Obb() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.Obb)
  SharedDtor();
}

void Obb::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void Obb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obb& Obb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obb_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Obb::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.Obb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axis_.Clear();
  extent_.Clear();
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Obb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.Vector3 center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.Vector3 axis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_axis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float extent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_extent(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_extent(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.Obb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.Vector3 center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // repeated .Tiny3D.Script.Vector3 axis = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_axis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_axis(i), target, stream);
  }

  // repeated float extent = 3;
  if (this->_internal_extent_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_extent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.Obb)
  return target;
}

size_t Obb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.Obb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.Vector3 axis = 2;
  total_size += 1UL * this->_internal_axis_size();
  for (const auto& msg : this->axis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float extent = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_extent_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _extent_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Tiny3D.Script.Vector3 center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.Obb)
  GOOGLE_DCHECK_NE(&from, this);
  const Obb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.Obb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.Obb)
    MergeFrom(*source);
  }
}

void Obb::MergeFrom(const Obb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.Obb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axis_.MergeFrom(from.axis_);
  extent_.MergeFrom(from.extent_);
  if (from.has_center()) {
    _internal_mutable_center()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_center());
  }
}

void Obb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.Obb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obb::CopyFrom(const Obb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.Obb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obb::IsInitialized() const {
  return true;
}

void Obb::InternalSwap(Obb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  axis_.InternalSwap(&other->axis_);
  extent_.InternalSwap(&other->extent_);
  swap(center_, other->center_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bound::InitAsDefaultInstance() {
  ::Tiny3D::Script::ModelSystem::_Bound_default_instance_.sphere_ = const_cast< ::Tiny3D::Script::ModelSystem::Sphere*>(
      ::Tiny3D::Script::ModelSystem::Sphere::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Bound_default_instance_.aabb_ = const_cast< ::Tiny3D::Script::ModelSystem::Aabb*>(
      ::Tiny3D::Script::ModelSystem::Aabb::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_Bound_default_instance_.obb_ = const_cast< ::Tiny3D::Script::ModelSystem::Obb*>(
      ::Tiny3D::Script::ModelSystem::Obb::internal_default_instance());
}
class Bound::_Internal {
 public:
  static const ::Tiny3D::Script::ModelSystem::Sphere& sphere(const Bound* msg);
  static const ::Tiny3D::Script::ModelSystem::Aabb& aabb(const Bound* msg);
  static const ::Tiny3D::Script::ModelSystem::Obb& obb(const Bound* msg);
};

const ::Tiny3D::Script::ModelSystem::Sphere&
Bound::_Internal::sphere(const Bound* msg) {
  return *msg->ValueOf_.sphere_;
}
const ::Tiny3D::Script::ModelSystem::Aabb&
Bound::_Internal::aabb(const Bound* msg) {
  return *msg->ValueOf_.aabb_;
}
const ::Tiny3D::Script::ModelSystem::Obb&
Bound::_Internal::obb(const Bound* msg) {
  return *msg->ValueOf_.obb_;
}
void Bound::set_allocated_sphere(::Tiny3D::Script::ModelSystem::Sphere* sphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ValueOf();
  if (sphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphere, submessage_arena);
    }
    set_has_sphere();
    ValueOf_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Bound.sphere)
}
void Bound::set_allocated_aabb(::Tiny3D::Script::ModelSystem::Aabb* aabb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ValueOf();
  if (aabb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aabb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aabb, submessage_arena);
    }
    set_has_aabb();
    ValueOf_.aabb_ = aabb;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Bound.aabb)
}
void Bound::set_allocated_obb(::Tiny3D::Script::ModelSystem::Obb* obb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ValueOf();
  if (obb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obb, submessage_arena);
    }
    set_has_obb();
    ValueOf_.obb_ = obb;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Bound.obb)
}
Bound::Bound()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.Bound)
}
Bound::Bound(const Bound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_ValueOf();
  switch (from.ValueOf_case()) {
    case kSphere: {
      _internal_mutable_sphere()->::Tiny3D::Script::ModelSystem::Sphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kAabb: {
      _internal_mutable_aabb()->::Tiny3D::Script::ModelSystem::Aabb::MergeFrom(from._internal_aabb());
      break;
    }
    case kObb: {
      _internal_mutable_obb()->::Tiny3D::Script::ModelSystem::Obb::MergeFrom(from._internal_obb());
      break;
    }
    case VALUEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.Bound)
}

void Bound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bound_ModelScriptObject_2eproto.base);
  type_ = 0;
  clear_has_ValueOf();
}

Bound::~Bound() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.Bound)
  SharedDtor();
}

void Bound::SharedDtor() {
  if (has_ValueOf()) {
    clear_ValueOf();
  }
}

void Bound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bound& Bound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bound_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Bound::clear_ValueOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ModelSystem.Bound)
  switch (ValueOf_case()) {
    case kSphere: {
      delete ValueOf_.sphere_;
      break;
    }
    case kAabb: {
      delete ValueOf_.aabb_;
      break;
    }
    case kObb: {
      delete ValueOf_.obb_;
      break;
    }
    case VALUEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUEOF_NOT_SET;
}


void Bound::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.Bound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_ValueOf();
  _internal_metadata_.Clear();
}

const char* Bound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ModelSystem.Bound.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::ModelSystem::Bound_Type>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ModelSystem.Sphere sphere = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sphere(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ModelSystem.Aabb aabb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_aabb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ModelSystem.Obb obb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_obb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.Bound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ModelSystem.Bound.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .Tiny3D.Script.ModelSystem.Sphere sphere = 2;
  if (_internal_has_sphere()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sphere(this), target, stream);
  }

  // .Tiny3D.Script.ModelSystem.Aabb aabb = 3;
  if (_internal_has_aabb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::aabb(this), target, stream);
  }

  // .Tiny3D.Script.ModelSystem.Obb obb = 4;
  if (_internal_has_obb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::obb(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.Bound)
  return target;
}

size_t Bound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.Bound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.ModelSystem.Bound.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (ValueOf_case()) {
    // .Tiny3D.Script.ModelSystem.Sphere sphere = 2;
    case kSphere: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ValueOf_.sphere_);
      break;
    }
    // .Tiny3D.Script.ModelSystem.Aabb aabb = 3;
    case kAabb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ValueOf_.aabb_);
      break;
    }
    // .Tiny3D.Script.ModelSystem.Obb obb = 4;
    case kObb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ValueOf_.obb_);
      break;
    }
    case VALUEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.Bound)
  GOOGLE_DCHECK_NE(&from, this);
  const Bound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.Bound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.Bound)
    MergeFrom(*source);
  }
}

void Bound::MergeFrom(const Bound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.Bound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.ValueOf_case()) {
    case kSphere: {
      _internal_mutable_sphere()->::Tiny3D::Script::ModelSystem::Sphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kAabb: {
      _internal_mutable_aabb()->::Tiny3D::Script::ModelSystem::Aabb::MergeFrom(from._internal_aabb());
      break;
    }
    case kObb: {
      _internal_mutable_obb()->::Tiny3D::Script::ModelSystem::Obb::MergeFrom(from._internal_obb());
      break;
    }
    case VALUEOF_NOT_SET: {
      break;
    }
  }
}

void Bound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bound::CopyFrom(const Bound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bound::IsInitialized() const {
  return true;
}

void Bound::InternalSwap(Bound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(ValueOf_, other->ValueOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexBuffer::InitAsDefaultInstance() {
  ::Tiny3D::Script::ModelSystem::_IndexBuffer_default_instance_._instance.get_mutable()->bound_ = const_cast< ::Tiny3D::Script::ModelSystem::Bound*>(
      ::Tiny3D::Script::ModelSystem::Bound::internal_default_instance());
}
class IndexBuffer::_Internal {
 public:
  static const ::Tiny3D::Script::ModelSystem::Bound& bound(const IndexBuffer* msg);
};

const ::Tiny3D::Script::ModelSystem::Bound&
IndexBuffer::_Internal::bound(const IndexBuffer* msg) {
  return *msg->bound_;
}
IndexBuffer::IndexBuffer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.IndexBuffer)
}
IndexBuffer::IndexBuffer(const IndexBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_material().empty()) {
    material_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.material_);
  }
  if (from._internal_has_bound()) {
    bound_ = new ::Tiny3D::Script::ModelSystem::Bound(*from.bound_);
  } else {
    bound_ = nullptr;
  }
  ::memcpy(&is_16bit_, &from.is_16bit_,
    static_cast<size_t>(reinterpret_cast<char*>(&primitive_count_) -
    reinterpret_cast<char*>(&is_16bit_)) + sizeof(primitive_count_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.IndexBuffer)
}

void IndexBuffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexBuffer_ModelScriptObject_2eproto.base);
  material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primitive_count_) -
      reinterpret_cast<char*>(&bound_)) + sizeof(primitive_count_));
}

IndexBuffer::~IndexBuffer() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.IndexBuffer)
  SharedDtor();
}

void IndexBuffer::SharedDtor() {
  material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bound_;
}

void IndexBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexBuffer& IndexBuffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexBuffer_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void IndexBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.IndexBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bound_ != nullptr) {
    delete bound_;
  }
  bound_ = nullptr;
  ::memset(&is_16bit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primitive_count_) -
      reinterpret_cast<char*>(&is_16bit_)) + sizeof(primitive_count_));
  _internal_metadata_.Clear();
}

const char* IndexBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_16bit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_16bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ModelSystem.PrimitiveType primitive_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_primitive_type(static_cast<::Tiny3D::Script::ModelSystem::PrimitiveType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 primitive_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          primitive_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string material = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_material();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ModelSystem.IndexBuffer.material"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ModelSystem.Bound bound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 indices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.IndexBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_16bit = 1;
  if (this->is_16bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_16bit(), target);
  }

  // .Tiny3D.Script.ModelSystem.PrimitiveType primitive_type = 2;
  if (this->primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_primitive_type(), target);
  }

  // uint32 primitive_count = 3;
  if (this->primitive_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_primitive_count(), target);
  }

  // string material = 4;
  if (this->material().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material().data(), static_cast<int>(this->_internal_material().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ModelSystem.IndexBuffer.material");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_material(), target);
  }

  // .Tiny3D.Script.ModelSystem.Bound bound = 5;
  if (this->has_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bound(this), target, stream);
  }

  // repeated int32 indices = 6;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.IndexBuffer)
  return target;
}

size_t IndexBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.IndexBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string material = 4;
  if (this->material().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_material());
  }

  // .Tiny3D.Script.ModelSystem.Bound bound = 5;
  if (this->has_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bound_);
  }

  // bool is_16bit = 1;
  if (this->is_16bit() != 0) {
    total_size += 1 + 1;
  }

  // .Tiny3D.Script.ModelSystem.PrimitiveType primitive_type = 2;
  if (this->primitive_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_primitive_type());
  }

  // uint32 primitive_count = 3;
  if (this->primitive_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_primitive_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexBuffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.IndexBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexBuffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexBuffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.IndexBuffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.IndexBuffer)
    MergeFrom(*source);
  }
}

void IndexBuffer::MergeFrom(const IndexBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.IndexBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from.material().size() > 0) {

    material_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.material_);
  }
  if (from.has_bound()) {
    _internal_mutable_bound()->::Tiny3D::Script::ModelSystem::Bound::MergeFrom(from._internal_bound());
  }
  if (from.is_16bit() != 0) {
    _internal_set_is_16bit(from._internal_is_16bit());
  }
  if (from.primitive_type() != 0) {
    _internal_set_primitive_type(from._internal_primitive_type());
  }
  if (from.primitive_count() != 0) {
    _internal_set_primitive_count(from._internal_primitive_count());
  }
}

void IndexBuffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.IndexBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexBuffer::CopyFrom(const IndexBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.IndexBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexBuffer::IsInitialized() const {
  return true;
}

void IndexBuffer::InternalSwap(IndexBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  material_.Swap(&other->material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bound_, other->bound_);
  swap(is_16bit_, other->is_16bit_);
  swap(primitive_type_, other->primitive_type_);
  swap(primitive_count_, other->primitive_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexBuffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyframeData::InitAsDefaultInstance() {
  ::Tiny3D::Script::ModelSystem::_KeyframeData_default_instance_.translation_ = const_cast< ::Tiny3D::Script::Vector3*>(
      ::Tiny3D::Script::Vector3::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_KeyframeData_default_instance_.rotation_ = const_cast< ::Tiny3D::Script::Quaternion*>(
      ::Tiny3D::Script::Quaternion::internal_default_instance());
  ::Tiny3D::Script::ModelSystem::_KeyframeData_default_instance_.scaling_ = const_cast< ::Tiny3D::Script::Vector3*>(
      ::Tiny3D::Script::Vector3::internal_default_instance());
}
class KeyframeData::_Internal {
 public:
  static const ::Tiny3D::Script::Vector3& translation(const KeyframeData* msg);
  static const ::Tiny3D::Script::Quaternion& rotation(const KeyframeData* msg);
  static const ::Tiny3D::Script::Vector3& scaling(const KeyframeData* msg);
};

const ::Tiny3D::Script::Vector3&
KeyframeData::_Internal::translation(const KeyframeData* msg) {
  return *msg->KeyframeOneOf_.translation_;
}
const ::Tiny3D::Script::Quaternion&
KeyframeData::_Internal::rotation(const KeyframeData* msg) {
  return *msg->KeyframeOneOf_.rotation_;
}
const ::Tiny3D::Script::Vector3&
KeyframeData::_Internal::scaling(const KeyframeData* msg) {
  return *msg->KeyframeOneOf_.scaling_;
}
void KeyframeData::set_allocated_translation(::Tiny3D::Script::Vector3* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_KeyframeOneOf();
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    set_has_translation();
    KeyframeOneOf_.translation_ = translation;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.KeyframeData.translation)
}
void KeyframeData::clear_translation() {
  if (_internal_has_translation()) {
    delete KeyframeOneOf_.translation_;
    clear_has_KeyframeOneOf();
  }
}
void KeyframeData::set_allocated_rotation(::Tiny3D::Script::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_KeyframeOneOf();
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    set_has_rotation();
    KeyframeOneOf_.rotation_ = rotation;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.KeyframeData.rotation)
}
void KeyframeData::clear_rotation() {
  if (_internal_has_rotation()) {
    delete KeyframeOneOf_.rotation_;
    clear_has_KeyframeOneOf();
  }
}
void KeyframeData::set_allocated_scaling(::Tiny3D::Script::Vector3* scaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_KeyframeOneOf();
  if (scaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scaling, submessage_arena);
    }
    set_has_scaling();
    KeyframeOneOf_.scaling_ = scaling;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.KeyframeData.scaling)
}
void KeyframeData::clear_scaling() {
  if (_internal_has_scaling()) {
    delete KeyframeOneOf_.scaling_;
    clear_has_KeyframeOneOf();
  }
}
KeyframeData::KeyframeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.KeyframeData)
}
KeyframeData::KeyframeData(const KeyframeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  clear_has_KeyframeOneOf();
  switch (from.KeyframeOneOf_case()) {
    case kTranslation: {
      _internal_mutable_translation()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_translation());
      break;
    }
    case kRotation: {
      _internal_mutable_rotation()->::Tiny3D::Script::Quaternion::MergeFrom(from._internal_rotation());
      break;
    }
    case kScaling: {
      _internal_mutable_scaling()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_scaling());
      break;
    }
    case KEYFRAMEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.KeyframeData)
}

void KeyframeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyframeData_ModelScriptObject_2eproto.base);
  time_ = 0;
  clear_has_KeyframeOneOf();
}

KeyframeData::~KeyframeData() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.KeyframeData)
  SharedDtor();
}

void KeyframeData::SharedDtor() {
  if (has_KeyframeOneOf()) {
    clear_KeyframeOneOf();
  }
}

void KeyframeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyframeData& KeyframeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyframeData_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void KeyframeData::clear_KeyframeOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ModelSystem.KeyframeData)
  switch (KeyframeOneOf_case()) {
    case kTranslation: {
      delete KeyframeOneOf_.translation_;
      break;
    }
    case kRotation: {
      delete KeyframeOneOf_.rotation_;
      break;
    }
    case kScaling: {
      delete KeyframeOneOf_.scaling_;
      break;
    }
    case KEYFRAMEONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEYFRAMEONEOF_NOT_SET;
}


void KeyframeData::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.KeyframeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = 0;
  clear_KeyframeOneOf();
  _internal_metadata_.Clear();
}

const char* KeyframeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector3 translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Quaternion rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector3 scaling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyframeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.KeyframeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_time(), target);
  }

  // .Tiny3D.Script.Vector3 translation = 2;
  if (_internal_has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translation(this), target, stream);
  }

  // .Tiny3D.Script.Quaternion rotation = 3;
  if (_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  // .Tiny3D.Script.Vector3 scaling = 4;
  if (_internal_has_scaling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::scaling(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.KeyframeData)
  return target;
}

size_t KeyframeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.KeyframeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  switch (KeyframeOneOf_case()) {
    // .Tiny3D.Script.Vector3 translation = 2;
    case kTranslation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *KeyframeOneOf_.translation_);
      break;
    }
    // .Tiny3D.Script.Quaternion rotation = 3;
    case kRotation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *KeyframeOneOf_.rotation_);
      break;
    }
    // .Tiny3D.Script.Vector3 scaling = 4;
    case kScaling: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *KeyframeOneOf_.scaling_);
      break;
    }
    case KEYFRAMEONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyframeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.KeyframeData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyframeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyframeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.KeyframeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.KeyframeData)
    MergeFrom(*source);
  }
}

void KeyframeData::MergeFrom(const KeyframeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.KeyframeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  switch (from.KeyframeOneOf_case()) {
    case kTranslation: {
      _internal_mutable_translation()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_translation());
      break;
    }
    case kRotation: {
      _internal_mutable_rotation()->::Tiny3D::Script::Quaternion::MergeFrom(from._internal_rotation());
      break;
    }
    case kScaling: {
      _internal_mutable_scaling()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_scaling());
      break;
    }
    case KEYFRAMEONEOF_NOT_SET: {
      break;
    }
  }
}

void KeyframeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.KeyframeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyframeData::CopyFrom(const KeyframeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.KeyframeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyframeData::IsInitialized() const {
  return true;
}

void KeyframeData::InternalSwap(KeyframeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(KeyframeOneOf_, other->KeyframeOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyframeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Keyframe::InitAsDefaultInstance() {
}
class Keyframe::_Internal {
 public:
};

Keyframe::Keyframe()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.Keyframe)
}
Keyframe::Keyframe(const Keyframe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bone().empty()) {
    bone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bone_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.Keyframe)
}

void Keyframe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Keyframe_ModelScriptObject_2eproto.base);
  bone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Keyframe::~Keyframe() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.Keyframe)
  SharedDtor();
}

void Keyframe::SharedDtor() {
  bone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Keyframe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Keyframe& Keyframe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Keyframe_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Keyframe::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.Keyframe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  bone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* Keyframe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ModelSystem.Keyframe.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::ModelSystem::Keyframe_Type>(val));
        } else goto handle_unusual;
        continue;
      // string bone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ModelSystem.Keyframe.bone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ModelSystem.KeyframeData frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Keyframe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.Keyframe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ModelSystem.Keyframe.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string bone = 2;
  if (this->bone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bone().data(), static_cast<int>(this->_internal_bone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ModelSystem.Keyframe.bone");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bone(), target);
  }

  // repeated .Tiny3D.Script.ModelSystem.KeyframeData frames = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.Keyframe)
  return target;
}

size_t Keyframe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.Keyframe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.ModelSystem.KeyframeData frames = 3;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string bone = 2;
  if (this->bone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bone());
  }

  // .Tiny3D.Script.ModelSystem.Keyframe.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Keyframe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.Keyframe)
  GOOGLE_DCHECK_NE(&from, this);
  const Keyframe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Keyframe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.Keyframe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.Keyframe)
    MergeFrom(*source);
  }
}

void Keyframe::MergeFrom(const Keyframe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.Keyframe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (from.bone().size() > 0) {

    bone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bone_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Keyframe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.Keyframe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keyframe::CopyFrom(const Keyframe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.Keyframe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keyframe::IsInitialized() const {
  return true;
}

void Keyframe::InternalSwap(Keyframe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  bone_.Swap(&other->bone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Keyframe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnimationClip::InitAsDefaultInstance() {
}
class AnimationClip::_Internal {
 public:
};

AnimationClip::AnimationClip()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.AnimationClip)
}
AnimationClip::AnimationClip(const AnimationClip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keyframes_(from.keyframes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.AnimationClip)
}

void AnimationClip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimationClip_ModelScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
}

AnimationClip::~AnimationClip() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.AnimationClip)
  SharedDtor();
}

void AnimationClip::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnimationClip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimationClip& AnimationClip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimationClip_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void AnimationClip::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.AnimationClip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyframes_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  _internal_metadata_.Clear();
}

const char* AnimationClip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ModelSystem.AnimationClip.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ModelSystem.Keyframe keyframes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keyframes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationClip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.AnimationClip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ModelSystem.AnimationClip.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float duration = 2;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // repeated .Tiny3D.Script.ModelSystem.Keyframe keyframes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keyframes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_keyframes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.AnimationClip)
  return target;
}

size_t AnimationClip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.AnimationClip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.ModelSystem.Keyframe keyframes = 3;
  total_size += 1UL * this->_internal_keyframes_size();
  for (const auto& msg : this->keyframes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float duration = 2;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationClip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.AnimationClip)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationClip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimationClip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.AnimationClip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.AnimationClip)
    MergeFrom(*source);
  }
}

void AnimationClip::MergeFrom(const AnimationClip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.AnimationClip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyframes_.MergeFrom(from.keyframes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.duration() <= 0 && from.duration() >= 0)) {
    _internal_set_duration(from._internal_duration());
  }
}

void AnimationClip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.AnimationClip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationClip::CopyFrom(const AnimationClip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.AnimationClip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationClip::IsInitialized() const {
  return true;
}

void AnimationClip::InternalSwap(AnimationClip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keyframes_.InternalSwap(&other->keyframes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationClip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MeshData_OffsetEntry_DoNotUse::MeshData_OffsetEntry_DoNotUse() {}
MeshData_OffsetEntry_DoNotUse::MeshData_OffsetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MeshData_OffsetEntry_DoNotUse::MergeFrom(const MeshData_OffsetEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MeshData_OffsetEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MeshData_OffsetEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MeshData::InitAsDefaultInstance() {
}
class MeshData::_Internal {
 public:
};

void MeshData::clear_offset() {
  offset_.Clear();
}
MeshData::MeshData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.MeshData)
}
MeshData::MeshData(const MeshData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vertex_buffers_(from.vertex_buffers_),
      index_buffers_(from.index_buffers_),
      clips_(from.clips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_.MergeFrom(from.offset_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.MeshData)
}

void MeshData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshData_ModelScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MeshData::~MeshData() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.MeshData)
  SharedDtor();
}

void MeshData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeshData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshData& MeshData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshData_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void MeshData::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.MeshData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_buffers_.Clear();
  index_buffers_.Clear();
  offset_.Clear();
  clips_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MeshData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ModelSystem.MeshData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ModelSystem.VertexBuffer vertex_buffers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ModelSystem.IndexBuffer index_buffers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .Tiny3D.Script.Matrix4> offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&offset_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ModelSystem.AnimationClip clips = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.MeshData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ModelSystem.MeshData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .Tiny3D.Script.ModelSystem.VertexBuffer vertex_buffers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertex_buffers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vertex_buffers(i), target, stream);
  }

  // repeated .Tiny3D.Script.ModelSystem.IndexBuffer index_buffers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_index_buffers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_index_buffers(i), target, stream);
  }

  // map<string, .Tiny3D.Script.Matrix4> offset = 4;
  if (!this->_internal_offset().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Tiny3D.Script.ModelSystem.MeshData.OffsetEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_offset().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_offset().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >::const_iterator
          it = this->_internal_offset().begin();
          it != this->_internal_offset().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MeshData_OffsetEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >::const_iterator
          it = this->_internal_offset().begin();
          it != this->_internal_offset().end(); ++it) {
        target = MeshData_OffsetEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .Tiny3D.Script.ModelSystem.AnimationClip clips = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_clips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.MeshData)
  return target;
}

size_t MeshData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.MeshData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.ModelSystem.VertexBuffer vertex_buffers = 2;
  total_size += 1UL * this->_internal_vertex_buffers_size();
  for (const auto& msg : this->vertex_buffers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.ModelSystem.IndexBuffer index_buffers = 3;
  total_size += 1UL * this->_internal_index_buffers_size();
  for (const auto& msg : this->index_buffers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .Tiny3D.Script.Matrix4> offset = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_offset_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::Matrix4 >::const_iterator
      it = this->_internal_offset().begin();
      it != this->_internal_offset().end(); ++it) {
    total_size += MeshData_OffsetEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .Tiny3D.Script.ModelSystem.AnimationClip clips = 5;
  total_size += 1UL * this->_internal_clips_size();
  for (const auto& msg : this->clips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ModelSystem.MeshData)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ModelSystem.MeshData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ModelSystem.MeshData)
    MergeFrom(*source);
  }
}

void MeshData::MergeFrom(const MeshData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.MeshData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_buffers_.MergeFrom(from.vertex_buffers_);
  index_buffers_.MergeFrom(from.index_buffers_);
  offset_.MergeFrom(from.offset_);
  clips_.MergeFrom(from.clips_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MeshData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ModelSystem.MeshData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshData::CopyFrom(const MeshData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.MeshData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshData::IsInitialized() const {
  return true;
}

void MeshData::InternalSwap(MeshData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vertex_buffers_.InternalSwap(&other->vertex_buffers_);
  index_buffers_.InternalSwap(&other->index_buffers_);
  offset_.Swap(&other->offset_);
  clips_.InternalSwap(&other->clips_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::VertexAttribute* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::VertexAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::VertexAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::Vertex* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Vertex >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::Vertex >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::VertexBuffer* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::VertexBuffer >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::VertexBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::Sphere* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Sphere >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::Sphere >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::Aabb* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Aabb >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::Aabb >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::Obb* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Obb >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::Obb >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::Bound* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Bound >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::Bound >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::IndexBuffer* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::IndexBuffer >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::IndexBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::KeyframeData* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::KeyframeData >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::KeyframeData >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::Keyframe* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Keyframe >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::Keyframe >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::AnimationClip* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::AnimationClip >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::AnimationClip >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::MeshData_OffsetEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::MeshData* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::MeshData >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::MeshData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
