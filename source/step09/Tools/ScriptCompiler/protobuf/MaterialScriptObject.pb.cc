// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MaterialScriptObject.proto

#include "MaterialScriptObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlphaRejection_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnimTexture_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimTextureComplex_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimTextureSimple_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Binding_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlendScene_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendSceneFactor_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bool_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorOp_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompareFunc_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CubicTexture_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CubicTextureComplex_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CubicTextureSimple_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CullingHardware_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CullingSoftware_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthBias_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Float_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fog_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUDeviceRule_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GPUProgram_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GPUProgramRef_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUVendorRule_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Illumination_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Iteration_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationNumber_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationOnce_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationOncePerLight_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationPerLight_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationPerNLight_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LODValues_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightColor_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Param_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamAuto_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<23> scc_info_Pass_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Polygon_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Sampler_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneBlendOperation_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SeparateBlendScene_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Shader_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shading_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleBlendType_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SortingTransparent_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_String_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Technique_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TexAddressMode_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexAddressModeComplex_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexAddressModeSimple_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TexFilter_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexFilterComplex_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexFilterSimple_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Texture_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextureAlias_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_TextureUnit_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32_MaterialScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace MaterialSystem {
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class Matrix4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Matrix4> _instance;
} _Matrix4_default_instance_;
class BoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bool> _instance;
} _Bool_default_instance_;
class FloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Float> _instance;
} _Float_default_instance_;
class UInt32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UInt32> _instance;
} _UInt32_default_instance_;
class Int32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int32> _instance;
} _Int32_default_instance_;
class StringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<String> _instance;
} _String_default_instance_;
class CompareFuncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompareFunc> _instance;
} _CompareFunc_default_instance_;
class ShaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shader> _instance;
} _Shader_default_instance_;
class GPUProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUProgram> _instance;
} _GPUProgram_default_instance_;
class GPUConstantBufferRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUConstantBufferRef> _instance;
} _GPUConstantBufferRef_default_instance_;
class GPUProgramRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUProgramRef> _instance;
} _GPUProgramRef_default_instance_;
class ParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Param> _instance;
} _Param_default_instance_;
class ParamAutoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParamAuto> _instance;
} _ParamAuto_default_instance_;
class GPUConstantBufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUConstantBuffer> _instance;
} _GPUConstantBuffer_default_instance_;
class TexAddressModeSimpleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexAddressModeSimple> _instance;
} _TexAddressModeSimple_default_instance_;
class TexAddressModeComplexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexAddressModeComplex> _instance;
} _TexAddressModeComplex_default_instance_;
class TexAddressModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexAddressMode> _instance;
  const ::Tiny3D::Script::MaterialSystem::TexAddressModeSimple* simple_;
  const ::Tiny3D::Script::MaterialSystem::TexAddressModeComplex* complex_;
} _TexAddressMode_default_instance_;
class TexFilterSimpleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexFilterSimple> _instance;
} _TexFilterSimple_default_instance_;
class TexFilterComplexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexFilterComplex> _instance;
} _TexFilterComplex_default_instance_;
class TexFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexFilter> _instance;
  const ::Tiny3D::Script::MaterialSystem::TexFilterSimple* simple_;
  const ::Tiny3D::Script::MaterialSystem::TexFilterComplex* complex_;
} _TexFilter_default_instance_;
class SamplerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sampler> _instance;
} _Sampler_default_instance_;
class TextureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Texture> _instance;
} _Texture_default_instance_;
class AnimTextureSimpleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimTextureSimple> _instance;
} _AnimTextureSimple_default_instance_;
class AnimTextureComplexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimTextureComplex> _instance;
} _AnimTextureComplex_default_instance_;
class AnimTextureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimTexture> _instance;
  const ::Tiny3D::Script::MaterialSystem::AnimTextureSimple* simple_;
  const ::Tiny3D::Script::MaterialSystem::AnimTextureComplex* complex_;
} _AnimTexture_default_instance_;
class CubicTextureSimpleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CubicTextureSimple> _instance;
} _CubicTextureSimple_default_instance_;
class CubicTextureComplexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CubicTextureComplex> _instance;
} _CubicTextureComplex_default_instance_;
class CubicTextureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CubicTexture> _instance;
  const ::Tiny3D::Script::MaterialSystem::CubicTextureSimple* simple_;
  const ::Tiny3D::Script::MaterialSystem::CubicTextureComplex* complex_;
} _CubicTexture_default_instance_;
class BindingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Binding> _instance;
} _Binding_default_instance_;
class ColorOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorOp> _instance;
} _ColorOp_default_instance_;
class TextureUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextureUnit> _instance;
} _TextureUnit_default_instance_;
class LightColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightColor> _instance;
} _LightColor_default_instance_;
class BlendSceneFactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendSceneFactor> _instance;
} _BlendSceneFactor_default_instance_;
class BlendSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendScene> _instance;
  int blend_type_;
  const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* blend_factor_;
} _BlendScene_default_instance_;
class SimpleBlendTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleBlendType> _instance;
} _SimpleBlendType_default_instance_;
class SimpleBlendSceneFactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleBlendSceneFactor> _instance;
} _SimpleBlendSceneFactor_default_instance_;
class SeparateBlendSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeparateBlendScene> _instance;
  const ::Tiny3D::Script::MaterialSystem::SimpleBlendType* blend_type_;
  const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* blend_factor_;
} _SeparateBlendScene_default_instance_;
class SceneBlendOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneBlendOperation> _instance;
} _SceneBlendOperation_default_instance_;
class SeparateSceneBlendOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeparateSceneBlendOperation> _instance;
} _SeparateSceneBlendOperation_default_instance_;
class DepthBiasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthBias> _instance;
} _DepthBias_default_instance_;
class AlphaRejectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlphaRejection> _instance;
} _AlphaRejection_default_instance_;
class IlluminationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Illumination> _instance;
} _Illumination_default_instance_;
class SortingTransparentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SortingTransparent> _instance;
} _SortingTransparent_default_instance_;
class CullingHardwareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CullingHardware> _instance;
} _CullingHardware_default_instance_;
class CullingSoftwareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CullingSoftware> _instance;
} _CullingSoftware_default_instance_;
class ShadingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shading> _instance;
} _Shading_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class FogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fog> _instance;
} _Fog_default_instance_;
class IterationOnceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IterationOnce> _instance;
} _IterationOnce_default_instance_;
class IterationOncePerLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IterationOncePerLight> _instance;
} _IterationOncePerLight_default_instance_;
class IterationNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IterationNumber> _instance;
} _IterationNumber_default_instance_;
class IterationPerLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IterationPerLight> _instance;
} _IterationPerLight_default_instance_;
class IterationPerNLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IterationPerNLight> _instance;
} _IterationPerNLight_default_instance_;
class IterationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Iteration> _instance;
  const ::Tiny3D::Script::MaterialSystem::IterationOnce* once_;
  const ::Tiny3D::Script::MaterialSystem::IterationOncePerLight* once_per_light_;
  const ::Tiny3D::Script::MaterialSystem::IterationNumber* number_;
  const ::Tiny3D::Script::MaterialSystem::IterationPerLight* per_light_;
  const ::Tiny3D::Script::MaterialSystem::IterationPerNLight* per_n_light_;
} _Iteration_default_instance_;
class PointSizeAttenuationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointSizeAttenuation> _instance;
} _PointSizeAttenuation_default_instance_;
class PassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pass> _instance;
} _Pass_default_instance_;
class GPUVendorRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUVendorRule> _instance;
} _GPUVendorRule_default_instance_;
class GPUDeviceRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUDeviceRule> _instance;
} _GPUDeviceRule_default_instance_;
class TechniqueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Technique> _instance;
} _Technique_default_instance_;
class LODValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LODValues> _instance;
} _LODValues_default_instance_;
class TextureAliasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextureAlias> _instance;
} _TextureAlias_default_instance_;
class MaterialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Material> _instance;
} _Material_default_instance_;
}  // namespace MaterialSystem
}  // namespace Script
}  // namespace Tiny3D
static void InitDefaultsscc_info_AlphaRejection_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_AlphaRejection_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::AlphaRejection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::AlphaRejection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlphaRejection_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlphaRejection_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_AnimTexture_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_AnimTexture_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::AnimTexture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::AnimTexture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnimTexture_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnimTexture_MaterialScriptObject_2eproto}, {
      &scc_info_AnimTextureSimple_MaterialScriptObject_2eproto.base,
      &scc_info_AnimTextureComplex_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_AnimTextureComplex_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_AnimTextureComplex_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::AnimTextureComplex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::AnimTextureComplex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimTextureComplex_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnimTextureComplex_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_AnimTextureSimple_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_AnimTextureSimple_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::AnimTextureSimple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::AnimTextureSimple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimTextureSimple_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnimTextureSimple_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Binding_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Binding_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Binding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Binding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Binding_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Binding_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_BlendScene_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_BlendScene_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::BlendScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::BlendScene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlendScene_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlendScene_MaterialScriptObject_2eproto}, {
      &scc_info_BlendSceneFactor_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_BlendSceneFactor_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_BlendSceneFactor_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::BlendSceneFactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::BlendSceneFactor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendSceneFactor_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlendSceneFactor_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Bool_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Bool_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Bool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Bool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bool_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bool_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Color_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Color_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Color_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_ColorOp_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_ColorOp_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::ColorOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::ColorOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorOp_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorOp_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_CompareFunc_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_CompareFunc_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::CompareFunc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::CompareFunc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompareFunc_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompareFunc_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_CubicTexture_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_CubicTexture_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::CubicTexture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::CubicTexture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CubicTexture_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CubicTexture_MaterialScriptObject_2eproto}, {
      &scc_info_CubicTextureSimple_MaterialScriptObject_2eproto.base,
      &scc_info_CubicTextureComplex_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_CubicTextureComplex_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_CubicTextureComplex_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::CubicTextureComplex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::CubicTextureComplex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CubicTextureComplex_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CubicTextureComplex_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_CubicTextureSimple_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_CubicTextureSimple_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::CubicTextureSimple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::CubicTextureSimple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CubicTextureSimple_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CubicTextureSimple_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_CullingHardware_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_CullingHardware_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::CullingHardware();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::CullingHardware::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CullingHardware_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CullingHardware_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_CullingSoftware_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_CullingSoftware_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::CullingSoftware();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::CullingSoftware::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CullingSoftware_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CullingSoftware_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_DepthBias_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_DepthBias_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::DepthBias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::DepthBias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthBias_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepthBias_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Float_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Float_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Float();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Float::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Float_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Float_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Fog_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Fog_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Fog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Fog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fog_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Fog_MaterialScriptObject_2eproto}, {
      &scc_info_Color_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUConstantBuffer_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUConstantBuffer_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GPUConstantBuffer_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_Param_MaterialScriptObject_2eproto.base,
      &scc_info_ParamAuto_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUConstantBufferRef_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUDeviceRule_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUDeviceRule_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUDeviceRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUDeviceRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUDeviceRule_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPUDeviceRule_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_GPUProgram_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUProgram_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUProgram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUProgram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GPUProgram_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GPUProgram_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_Shader_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUProgramRef_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUProgramRef_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUProgramRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUProgramRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GPUProgramRef_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GPUProgramRef_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUVendorRule_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUVendorRule_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUVendorRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUVendorRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUVendorRule_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPUVendorRule_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Header_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Header_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Header_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Illumination_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Illumination_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Illumination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Illumination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Illumination_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Illumination_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Int32_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Int32_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Int32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Int32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Int32_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Iteration_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Iteration_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Iteration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Iteration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Iteration_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Iteration_MaterialScriptObject_2eproto}, {
      &scc_info_IterationOnce_MaterialScriptObject_2eproto.base,
      &scc_info_IterationOncePerLight_MaterialScriptObject_2eproto.base,
      &scc_info_IterationNumber_MaterialScriptObject_2eproto.base,
      &scc_info_IterationPerLight_MaterialScriptObject_2eproto.base,
      &scc_info_IterationPerNLight_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_IterationNumber_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_IterationNumber_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::IterationNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::IterationNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationNumber_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IterationNumber_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_IterationOnce_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_IterationOnce_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::IterationOnce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::IterationOnce::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationOnce_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IterationOnce_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_IterationOncePerLight_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_IterationOncePerLight_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::IterationOncePerLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::IterationOncePerLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationOncePerLight_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IterationOncePerLight_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_IterationPerLight_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_IterationPerLight_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::IterationPerLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::IterationPerLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationPerLight_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IterationPerLight_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_IterationPerNLight_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_IterationPerNLight_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::IterationPerNLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::IterationPerNLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IterationPerNLight_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IterationPerNLight_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_LODValues_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_LODValues_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::LODValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::LODValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LODValues_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LODValues_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_LightColor_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::LightColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::LightColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightColor_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LightColor_MaterialScriptObject_2eproto}, {
      &scc_info_Color_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Material_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Material_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Material();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Material::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Material_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Material_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_LODValues_MaterialScriptObject_2eproto.base,
      &scc_info_Bool_MaterialScriptObject_2eproto.base,
      &scc_info_TextureAlias_MaterialScriptObject_2eproto.base,
      &scc_info_Technique_MaterialScriptObject_2eproto.base,
      &scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto.base,
      &scc_info_GPUProgram_MaterialScriptObject_2eproto.base,
      &scc_info_Sampler_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Matrix4_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Matrix4_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Matrix4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Matrix4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix4_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Matrix4_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Param_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Param_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Param_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Param_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_ParamAuto_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_ParamAuto_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::ParamAuto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::ParamAuto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamAuto_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParamAuto_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Pass_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Pass_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Pass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Pass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<23> scc_info_Pass_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 23, 0, InitDefaultsscc_info_Pass_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_LightColor_MaterialScriptObject_2eproto.base,
      &scc_info_Float_MaterialScriptObject_2eproto.base,
      &scc_info_BlendScene_MaterialScriptObject_2eproto.base,
      &scc_info_SeparateBlendScene_MaterialScriptObject_2eproto.base,
      &scc_info_SceneBlendOperation_MaterialScriptObject_2eproto.base,
      &scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto.base,
      &scc_info_Bool_MaterialScriptObject_2eproto.base,
      &scc_info_CompareFunc_MaterialScriptObject_2eproto.base,
      &scc_info_DepthBias_MaterialScriptObject_2eproto.base,
      &scc_info_AlphaRejection_MaterialScriptObject_2eproto.base,
      &scc_info_Illumination_MaterialScriptObject_2eproto.base,
      &scc_info_SortingTransparent_MaterialScriptObject_2eproto.base,
      &scc_info_CullingHardware_MaterialScriptObject_2eproto.base,
      &scc_info_CullingSoftware_MaterialScriptObject_2eproto.base,
      &scc_info_Shading_MaterialScriptObject_2eproto.base,
      &scc_info_Polygon_MaterialScriptObject_2eproto.base,
      &scc_info_Fog_MaterialScriptObject_2eproto.base,
      &scc_info_UInt32_MaterialScriptObject_2eproto.base,
      &scc_info_Iteration_MaterialScriptObject_2eproto.base,
      &scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto.base,
      &scc_info_GPUProgramRef_MaterialScriptObject_2eproto.base,
      &scc_info_TextureUnit_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_PointSizeAttenuation_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_PointSizeAttenuation_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointSizeAttenuation_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Polygon_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Polygon_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Polygon_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Polygon_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Sampler_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Sampler();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Sampler::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Sampler_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Sampler_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_TexAddressMode_MaterialScriptObject_2eproto.base,
      &scc_info_Color_MaterialScriptObject_2eproto.base,
      &scc_info_TexFilter_MaterialScriptObject_2eproto.base,
      &scc_info_Bool_MaterialScriptObject_2eproto.base,
      &scc_info_CompareFunc_MaterialScriptObject_2eproto.base,
      &scc_info_UInt32_MaterialScriptObject_2eproto.base,
      &scc_info_Float_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_SceneBlendOperation_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SceneBlendOperation_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SceneBlendOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SceneBlendOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneBlendOperation_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneBlendOperation_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_SeparateBlendScene_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SeparateBlendScene_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SeparateBlendScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SeparateBlendScene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SeparateBlendScene_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SeparateBlendScene_MaterialScriptObject_2eproto}, {
      &scc_info_SimpleBlendType_MaterialScriptObject_2eproto.base,
      &scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SeparateSceneBlendOperation_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Shader_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Shader_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Shader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Shader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Shader_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Shader_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Shading_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Shading_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Shading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Shading::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shading_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shading_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SimpleBlendSceneFactor_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_SimpleBlendType_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SimpleBlendType_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SimpleBlendType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SimpleBlendType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleBlendType_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleBlendType_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_SortingTransparent_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SortingTransparent_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SortingTransparent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SortingTransparent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SortingTransparent_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SortingTransparent_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_String_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_String_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::String();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::String::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_String_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_String_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Technique_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Technique_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Technique();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Technique::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Technique_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Technique_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_UInt32_MaterialScriptObject_2eproto.base,
      &scc_info_String_MaterialScriptObject_2eproto.base,
      &scc_info_GPUVendorRule_MaterialScriptObject_2eproto.base,
      &scc_info_GPUDeviceRule_MaterialScriptObject_2eproto.base,
      &scc_info_Pass_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_TexAddressMode_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TexAddressMode_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TexAddressMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TexAddressMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TexAddressMode_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TexAddressMode_MaterialScriptObject_2eproto}, {
      &scc_info_TexAddressModeSimple_MaterialScriptObject_2eproto.base,
      &scc_info_TexAddressModeComplex_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_TexAddressModeComplex_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TexAddressModeComplex_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TexAddressModeComplex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TexAddressModeComplex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexAddressModeComplex_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TexAddressModeComplex_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_TexAddressModeSimple_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TexAddressModeSimple_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TexAddressModeSimple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TexAddressModeSimple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexAddressModeSimple_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TexAddressModeSimple_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_TexFilter_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TexFilter_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TexFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TexFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TexFilter_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TexFilter_MaterialScriptObject_2eproto}, {
      &scc_info_TexFilterSimple_MaterialScriptObject_2eproto.base,
      &scc_info_TexFilterComplex_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_TexFilterComplex_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TexFilterComplex_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TexFilterComplex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TexFilterComplex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexFilterComplex_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TexFilterComplex_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_TexFilterSimple_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TexFilterSimple_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TexFilterSimple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TexFilterSimple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexFilterSimple_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TexFilterSimple_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Texture_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Texture_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Texture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Texture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Texture_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Texture_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_TextureAlias_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TextureAlias_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TextureAlias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TextureAlias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextureAlias_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextureAlias_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_TextureUnit_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TextureUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TextureUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_TextureUnit_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_TextureUnit_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_String_MaterialScriptObject_2eproto.base,
      &scc_info_Texture_MaterialScriptObject_2eproto.base,
      &scc_info_AnimTexture_MaterialScriptObject_2eproto.base,
      &scc_info_CubicTexture_MaterialScriptObject_2eproto.base,
      &scc_info_Binding_MaterialScriptObject_2eproto.base,
      &scc_info_UInt32_MaterialScriptObject_2eproto.base,
      &scc_info_ColorOp_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_UInt32_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_UInt32_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::UInt32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::UInt32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UInt32_MaterialScriptObject_2eproto}, {}};

namespace Tiny3D {
namespace Script {
namespace MaterialSystem {
bool BuiltInType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BuiltInType_strings[3] = {};

static const char BuiltInType_names[] =
  "BT_INT"
  "BT_NONE"
  "BT_REAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BuiltInType_entries[] = {
  { {BuiltInType_names + 0, 6}, 2 },
  { {BuiltInType_names + 6, 7}, 0 },
  { {BuiltInType_names + 13, 7}, 1 },
};

static const int BuiltInType_entries_by_number[] = {
  1, // 0 -> BT_NONE
  2, // 1 -> BT_REAL
  0, // 2 -> BT_INT
};

const std::string& BuiltInType_Name(
    BuiltInType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BuiltInType_entries,
          BuiltInType_entries_by_number,
          3, BuiltInType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BuiltInType_entries,
      BuiltInType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BuiltInType_strings[idx].get();
}
bool BuiltInType_Parse(
    const std::string& name, BuiltInType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BuiltInType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BuiltInType>(int_value);
  }
  return success;
}
bool TextureAddressMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TextureAddressMode_strings[5] = {};

static const char TextureAddressMode_names[] =
  "TAM_BORDER"
  "TAM_CLAMP"
  "TAM_MIRROR"
  "TAM_NONE"
  "TAM_WRAP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TextureAddressMode_entries[] = {
  { {TextureAddressMode_names + 0, 10}, 3 },
  { {TextureAddressMode_names + 10, 9}, 4 },
  { {TextureAddressMode_names + 19, 10}, 2 },
  { {TextureAddressMode_names + 29, 8}, 0 },
  { {TextureAddressMode_names + 37, 8}, 1 },
};

static const int TextureAddressMode_entries_by_number[] = {
  3, // 0 -> TAM_NONE
  4, // 1 -> TAM_WRAP
  2, // 2 -> TAM_MIRROR
  0, // 3 -> TAM_BORDER
  1, // 4 -> TAM_CLAMP
};

const std::string& TextureAddressMode_Name(
    TextureAddressMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TextureAddressMode_entries,
          TextureAddressMode_entries_by_number,
          5, TextureAddressMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TextureAddressMode_entries,
      TextureAddressMode_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TextureAddressMode_strings[idx].get();
}
bool TextureAddressMode_Parse(
    const std::string& name, TextureAddressMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TextureAddressMode_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<TextureAddressMode>(int_value);
  }
  return success;
}
bool FilterOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FilterOption_strings[6] = {};

static const char FilterOption_names[] =
  "FO_ANISOTROPIC"
  "FO_BILINEAR"
  "FO_LINEAR"
  "FO_NONE"
  "FO_POINT"
  "FO_TRILINEAR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FilterOption_entries[] = {
  { {FilterOption_names + 0, 14}, 3 },
  { {FilterOption_names + 14, 11}, 4 },
  { {FilterOption_names + 25, 9}, 2 },
  { {FilterOption_names + 34, 7}, 0 },
  { {FilterOption_names + 41, 8}, 1 },
  { {FilterOption_names + 49, 12}, 5 },
};

static const int FilterOption_entries_by_number[] = {
  3, // 0 -> FO_NONE
  4, // 1 -> FO_POINT
  2, // 2 -> FO_LINEAR
  0, // 3 -> FO_ANISOTROPIC
  1, // 4 -> FO_BILINEAR
  5, // 5 -> FO_TRILINEAR
};

const std::string& FilterOption_Name(
    FilterOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FilterOption_entries,
          FilterOption_entries_by_number,
          6, FilterOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FilterOption_entries,
      FilterOption_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FilterOption_strings[idx].get();
}
bool FilterOption_Parse(
    const std::string& name, FilterOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FilterOption_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<FilterOption>(int_value);
  }
  return success;
}
bool TextureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TextureType_strings[7] = {};

static const char TextureType_names[] =
  "TEX_1D"
  "TEX_2D"
  "TEX_2D_ARRAY"
  "TEX_2D_RECT"
  "TEX_3D"
  "TEX_CUBIC"
  "TEX_NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TextureType_entries[] = {
  { {TextureType_names + 0, 6}, 1 },
  { {TextureType_names + 6, 6}, 2 },
  { {TextureType_names + 12, 12}, 5 },
  { {TextureType_names + 24, 11}, 6 },
  { {TextureType_names + 35, 6}, 3 },
  { {TextureType_names + 41, 9}, 4 },
  { {TextureType_names + 50, 8}, 0 },
};

static const int TextureType_entries_by_number[] = {
  6, // 0 -> TEX_NONE
  0, // 1 -> TEX_1D
  1, // 2 -> TEX_2D
  4, // 3 -> TEX_3D
  5, // 4 -> TEX_CUBIC
  2, // 5 -> TEX_2D_ARRAY
  3, // 6 -> TEX_2D_RECT
};

const std::string& TextureType_Name(
    TextureType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TextureType_entries,
          TextureType_entries_by_number,
          7, TextureType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TextureType_entries,
      TextureType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TextureType_strings[idx].get();
}
bool TextureType_Parse(
    const std::string& name, TextureType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TextureType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<TextureType>(int_value);
  }
  return success;
}
bool CubicTextureMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CubicTextureMode_strings[2] = {};

static const char CubicTextureMode_names[] =
  "CTM_COMBINED_UVW"
  "CTM_SEPARATE_UV";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CubicTextureMode_entries[] = {
  { {CubicTextureMode_names + 0, 16}, 0 },
  { {CubicTextureMode_names + 16, 15}, 1 },
};

static const int CubicTextureMode_entries_by_number[] = {
  0, // 0 -> CTM_COMBINED_UVW
  1, // 1 -> CTM_SEPARATE_UV
};

const std::string& CubicTextureMode_Name(
    CubicTextureMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CubicTextureMode_entries,
          CubicTextureMode_entries_by_number,
          2, CubicTextureMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CubicTextureMode_entries,
      CubicTextureMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CubicTextureMode_strings[idx].get();
}
bool CubicTextureMode_Parse(
    const std::string& name, CubicTextureMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CubicTextureMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CubicTextureMode>(int_value);
  }
  return success;
}
bool BindingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BindingType_strings[2] = {};

static const char BindingType_names[] =
  "BT_FRAGMENT"
  "BT_VERTEX";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BindingType_entries[] = {
  { {BindingType_names + 0, 11}, 1 },
  { {BindingType_names + 11, 9}, 0 },
};

static const int BindingType_entries_by_number[] = {
  1, // 0 -> BT_VERTEX
  0, // 1 -> BT_FRAGMENT
};

const std::string& BindingType_Name(
    BindingType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BindingType_entries,
          BindingType_entries_by_number,
          2, BindingType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BindingType_entries,
      BindingType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BindingType_strings[idx].get();
}
bool BindingType_Parse(
    const std::string& name, BindingType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BindingType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<BindingType>(int_value);
  }
  return success;
}
bool EnvMap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EnvMap_strings[5] = {};

static const char EnvMap_names[] =
  "EM_CUBIC_NORMAL"
  "EM_CUBIC_REFLECTION"
  "EM_OFF"
  "EM_PLANAR"
  "EM_SPHERICAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EnvMap_entries[] = {
  { {EnvMap_names + 0, 15}, 4 },
  { {EnvMap_names + 15, 19}, 3 },
  { {EnvMap_names + 34, 6}, 0 },
  { {EnvMap_names + 40, 9}, 2 },
  { {EnvMap_names + 49, 12}, 1 },
};

static const int EnvMap_entries_by_number[] = {
  2, // 0 -> EM_OFF
  4, // 1 -> EM_SPHERICAL
  3, // 2 -> EM_PLANAR
  1, // 3 -> EM_CUBIC_REFLECTION
  0, // 4 -> EM_CUBIC_NORMAL
};

const std::string& EnvMap_Name(
    EnvMap value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EnvMap_entries,
          EnvMap_entries_by_number,
          5, EnvMap_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EnvMap_entries,
      EnvMap_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EnvMap_strings[idx].get();
}
bool EnvMap_Parse(
    const std::string& name, EnvMap* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EnvMap_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<EnvMap>(int_value);
  }
  return success;
}
bool BlendType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BlendType_strings[5] = {};

static const char BlendType_names[] =
  "BT_ADD"
  "BT_ALPHA_BLEND"
  "BT_COLOR_BLEND"
  "BT_MODULATE"
  "BT_REPLACE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BlendType_entries[] = {
  { {BlendType_names + 0, 6}, 2 },
  { {BlendType_names + 6, 14}, 0 },
  { {BlendType_names + 20, 14}, 1 },
  { {BlendType_names + 34, 11}, 3 },
  { {BlendType_names + 45, 10}, 4 },
};

static const int BlendType_entries_by_number[] = {
  1, // 0 -> BT_ALPHA_BLEND
  2, // 1 -> BT_COLOR_BLEND
  0, // 2 -> BT_ADD
  3, // 3 -> BT_MODULATE
  4, // 4 -> BT_REPLACE
};

const std::string& BlendType_Name(
    BlendType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BlendType_entries,
          BlendType_entries_by_number,
          5, BlendType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BlendType_entries,
      BlendType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BlendType_strings[idx].get();
}
bool BlendType_Parse(
    const std::string& name, BlendType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BlendType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<BlendType>(int_value);
  }
  return success;
}
bool BlendFactor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BlendFactor_strings[10] = {};

static const char BlendFactor_names[] =
  "BF_DEST_ALPHA"
  "BF_DEST_COLOR"
  "BF_ONE"
  "BF_ONE_MINUS_DEST_ALPHA"
  "BF_ONE_MINUS_DEST_COLOR"
  "BF_ONE_MINUS_SRC_ALPHA"
  "BF_ONE_MINUS_SRC_COLOR"
  "BF_SRC_ALPHA"
  "BF_SRC_COLOR"
  "BF_ZERO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BlendFactor_entries[] = {
  { {BlendFactor_names + 0, 13}, 6 },
  { {BlendFactor_names + 13, 13}, 2 },
  { {BlendFactor_names + 26, 6}, 0 },
  { {BlendFactor_names + 32, 23}, 8 },
  { {BlendFactor_names + 55, 23}, 4 },
  { {BlendFactor_names + 78, 22}, 9 },
  { {BlendFactor_names + 100, 22}, 5 },
  { {BlendFactor_names + 122, 12}, 7 },
  { {BlendFactor_names + 134, 12}, 3 },
  { {BlendFactor_names + 146, 7}, 1 },
};

static const int BlendFactor_entries_by_number[] = {
  2, // 0 -> BF_ONE
  9, // 1 -> BF_ZERO
  1, // 2 -> BF_DEST_COLOR
  8, // 3 -> BF_SRC_COLOR
  4, // 4 -> BF_ONE_MINUS_DEST_COLOR
  6, // 5 -> BF_ONE_MINUS_SRC_COLOR
  0, // 6 -> BF_DEST_ALPHA
  7, // 7 -> BF_SRC_ALPHA
  3, // 8 -> BF_ONE_MINUS_DEST_ALPHA
  5, // 9 -> BF_ONE_MINUS_SRC_ALPHA
};

const std::string& BlendFactor_Name(
    BlendFactor value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BlendFactor_entries,
          BlendFactor_entries_by_number,
          10, BlendFactor_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BlendFactor_entries,
      BlendFactor_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BlendFactor_strings[idx].get();
}
bool BlendFactor_Parse(
    const std::string& name, BlendFactor* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BlendFactor_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<BlendFactor>(int_value);
  }
  return success;
}
bool BlendOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BlendOperation_strings[5] = {};

static const char BlendOperation_names[] =
  "BO_ADD"
  "BO_MAX"
  "BO_MIN"
  "BO_REVERSE_SUBTRACT"
  "BO_SUBTRACT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BlendOperation_entries[] = {
  { {BlendOperation_names + 0, 6}, 0 },
  { {BlendOperation_names + 6, 6}, 4 },
  { {BlendOperation_names + 12, 6}, 3 },
  { {BlendOperation_names + 18, 19}, 2 },
  { {BlendOperation_names + 37, 11}, 1 },
};

static const int BlendOperation_entries_by_number[] = {
  0, // 0 -> BO_ADD
  4, // 1 -> BO_SUBTRACT
  3, // 2 -> BO_REVERSE_SUBTRACT
  2, // 3 -> BO_MIN
  1, // 4 -> BO_MAX
};

const std::string& BlendOperation_Name(
    BlendOperation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BlendOperation_entries,
          BlendOperation_entries_by_number,
          5, BlendOperation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BlendOperation_entries,
      BlendOperation_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BlendOperation_strings[idx].get();
}
bool BlendOperation_Parse(
    const std::string& name, BlendOperation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BlendOperation_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<BlendOperation>(int_value);
  }
  return success;
}
bool CompareFunction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CompareFunction_strings[8] = {};

static const char CompareFunction_names[] =
  "CF_ALWAYS_FAIL"
  "CF_ALWAYS_PASS"
  "CF_EQUAL"
  "CF_GREATER"
  "CF_GREATER_EQUAL"
  "CF_LESS"
  "CF_LESS_EQUAL"
  "CF_NOT_EQUAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CompareFunction_entries[] = {
  { {CompareFunction_names + 0, 14}, 0 },
  { {CompareFunction_names + 14, 14}, 1 },
  { {CompareFunction_names + 28, 8}, 4 },
  { {CompareFunction_names + 36, 10}, 7 },
  { {CompareFunction_names + 46, 16}, 6 },
  { {CompareFunction_names + 62, 7}, 2 },
  { {CompareFunction_names + 69, 13}, 3 },
  { {CompareFunction_names + 82, 12}, 5 },
};

static const int CompareFunction_entries_by_number[] = {
  0, // 0 -> CF_ALWAYS_FAIL
  1, // 1 -> CF_ALWAYS_PASS
  5, // 2 -> CF_LESS
  6, // 3 -> CF_LESS_EQUAL
  2, // 4 -> CF_EQUAL
  7, // 5 -> CF_NOT_EQUAL
  4, // 6 -> CF_GREATER_EQUAL
  3, // 7 -> CF_GREATER
};

const std::string& CompareFunction_Name(
    CompareFunction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CompareFunction_entries,
          CompareFunction_entries_by_number,
          8, CompareFunction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CompareFunction_entries,
      CompareFunction_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CompareFunction_strings[idx].get();
}
bool CompareFunction_Parse(
    const std::string& name, CompareFunction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CompareFunction_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<CompareFunction>(int_value);
  }
  return success;
}
bool IlluminationStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IlluminationStage_strings[4] = {};

static const char IlluminationStage_names[] =
  "IS_AMBIENT"
  "IS_DECAL"
  "IS_NONE"
  "IS_PER_LIGHT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IlluminationStage_entries[] = {
  { {IlluminationStage_names + 0, 10}, 1 },
  { {IlluminationStage_names + 10, 8}, 3 },
  { {IlluminationStage_names + 18, 7}, 0 },
  { {IlluminationStage_names + 25, 12}, 2 },
};

static const int IlluminationStage_entries_by_number[] = {
  2, // 0 -> IS_NONE
  0, // 1 -> IS_AMBIENT
  3, // 2 -> IS_PER_LIGHT
  1, // 3 -> IS_DECAL
};

const std::string& IlluminationStage_Name(
    IlluminationStage value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IlluminationStage_entries,
          IlluminationStage_entries_by_number,
          4, IlluminationStage_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IlluminationStage_entries,
      IlluminationStage_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IlluminationStage_strings[idx].get();
}
bool IlluminationStage_Parse(
    const std::string& name, IlluminationStage* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IlluminationStage_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<IlluminationStage>(int_value);
  }
  return success;
}
bool TransparentSorting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransparentSorting_strings[3] = {};

static const char TransparentSorting_names[] =
  "TS_FORCE"
  "TS_OFF"
  "TS_ON";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransparentSorting_entries[] = {
  { {TransparentSorting_names + 0, 8}, 2 },
  { {TransparentSorting_names + 8, 6}, 0 },
  { {TransparentSorting_names + 14, 5}, 1 },
};

static const int TransparentSorting_entries_by_number[] = {
  1, // 0 -> TS_OFF
  2, // 1 -> TS_ON
  0, // 2 -> TS_FORCE
};

const std::string& TransparentSorting_Name(
    TransparentSorting value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransparentSorting_entries,
          TransparentSorting_entries_by_number,
          3, TransparentSorting_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransparentSorting_entries,
      TransparentSorting_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransparentSorting_strings[idx].get();
}
bool TransparentSorting_Parse(
    const std::string& name, TransparentSorting* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransparentSorting_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TransparentSorting>(int_value);
  }
  return success;
}
bool CullHardware_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CullHardware_strings[3] = {};

static const char CullHardware_names[] =
  "CH_ANTICLOCKWISE"
  "CH_CLOCKWISE"
  "CH_NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CullHardware_entries[] = {
  { {CullHardware_names + 0, 16}, 2 },
  { {CullHardware_names + 16, 12}, 1 },
  { {CullHardware_names + 28, 7}, 0 },
};

static const int CullHardware_entries_by_number[] = {
  2, // 0 -> CH_NONE
  1, // 1 -> CH_CLOCKWISE
  0, // 2 -> CH_ANTICLOCKWISE
};

const std::string& CullHardware_Name(
    CullHardware value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CullHardware_entries,
          CullHardware_entries_by_number,
          3, CullHardware_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CullHardware_entries,
      CullHardware_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CullHardware_strings[idx].get();
}
bool CullHardware_Parse(
    const std::string& name, CullHardware* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CullHardware_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CullHardware>(int_value);
  }
  return success;
}
bool CullSoftware_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CullSoftware_strings[3] = {};

static const char CullSoftware_names[] =
  "CS_BACK"
  "CS_FRONT"
  "CS_NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CullSoftware_entries[] = {
  { {CullSoftware_names + 0, 7}, 1 },
  { {CullSoftware_names + 7, 8}, 2 },
  { {CullSoftware_names + 15, 7}, 0 },
};

static const int CullSoftware_entries_by_number[] = {
  2, // 0 -> CS_NONE
  0, // 1 -> CS_BACK
  1, // 2 -> CS_FRONT
};

const std::string& CullSoftware_Name(
    CullSoftware value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CullSoftware_entries,
          CullSoftware_entries_by_number,
          3, CullSoftware_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CullSoftware_entries,
      CullSoftware_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CullSoftware_strings[idx].get();
}
bool CullSoftware_Parse(
    const std::string& name, CullSoftware* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CullSoftware_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CullSoftware>(int_value);
  }
  return success;
}
bool ShadingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ShadingMode_strings[3] = {};

static const char ShadingMode_names[] =
  "SM_FLAT"
  "SM_GOURAUD"
  "SM_PHONG";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ShadingMode_entries[] = {
  { {ShadingMode_names + 0, 7}, 0 },
  { {ShadingMode_names + 7, 10}, 1 },
  { {ShadingMode_names + 17, 8}, 2 },
};

static const int ShadingMode_entries_by_number[] = {
  0, // 0 -> SM_FLAT
  1, // 1 -> SM_GOURAUD
  2, // 2 -> SM_PHONG
};

const std::string& ShadingMode_Name(
    ShadingMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ShadingMode_entries,
          ShadingMode_entries_by_number,
          3, ShadingMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ShadingMode_entries,
      ShadingMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ShadingMode_strings[idx].get();
}
bool ShadingMode_Parse(
    const std::string& name, ShadingMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ShadingMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ShadingMode>(int_value);
  }
  return success;
}
bool PolygonMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolygonMode_strings[4] = {};

static const char PolygonMode_names[] =
  "PM_NONE"
  "PM_POINTS"
  "PM_SOLID"
  "PM_WIREFRAME";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolygonMode_entries[] = {
  { {PolygonMode_names + 0, 7}, 0 },
  { {PolygonMode_names + 7, 9}, 1 },
  { {PolygonMode_names + 16, 8}, 3 },
  { {PolygonMode_names + 24, 12}, 2 },
};

static const int PolygonMode_entries_by_number[] = {
  0, // 0 -> PM_NONE
  1, // 1 -> PM_POINTS
  3, // 2 -> PM_WIREFRAME
  2, // 3 -> PM_SOLID
};

const std::string& PolygonMode_Name(
    PolygonMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolygonMode_entries,
          PolygonMode_entries_by_number,
          4, PolygonMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolygonMode_entries,
      PolygonMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolygonMode_strings[idx].get();
}
bool PolygonMode_Parse(
    const std::string& name, PolygonMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolygonMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PolygonMode>(int_value);
  }
  return success;
}
bool FogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FogType_strings[4] = {};

static const char FogType_names[] =
  "FT_EXP"
  "FT_EXP2"
  "FT_LINEAR"
  "FT_NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FogType_entries[] = {
  { {FogType_names + 0, 6}, 1 },
  { {FogType_names + 6, 7}, 2 },
  { {FogType_names + 13, 9}, 3 },
  { {FogType_names + 22, 7}, 0 },
};

static const int FogType_entries_by_number[] = {
  3, // 0 -> FT_NONE
  0, // 1 -> FT_EXP
  1, // 2 -> FT_EXP2
  2, // 3 -> FT_LINEAR
};

const std::string& FogType_Name(
    FogType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FogType_entries,
          FogType_entries_by_number,
          4, FogType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FogType_entries,
      FogType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FogType_strings[idx].get();
}
bool FogType_Parse(
    const std::string& name, FogType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FogType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<FogType>(int_value);
  }
  return success;
}
bool IterationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IterationType_strings[4] = {};

static const char IterationType_names[] =
  "IT_ONCE"
  "IT_ONCE_PER_LIGHT"
  "IT_PER_LIGHT"
  "IT_PER_N_LIGHTS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IterationType_entries[] = {
  { {IterationType_names + 0, 7}, 0 },
  { {IterationType_names + 7, 17}, 1 },
  { {IterationType_names + 24, 12}, 2 },
  { {IterationType_names + 36, 15}, 3 },
};

static const int IterationType_entries_by_number[] = {
  0, // 0 -> IT_ONCE
  1, // 1 -> IT_ONCE_PER_LIGHT
  2, // 2 -> IT_PER_LIGHT
  3, // 3 -> IT_PER_N_LIGHTS
};

const std::string& IterationType_Name(
    IterationType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IterationType_entries,
          IterationType_entries_by_number,
          4, IterationType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IterationType_entries,
      IterationType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IterationType_strings[idx].get();
}
bool IterationType_Parse(
    const std::string& name, IterationType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IterationType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<IterationType>(int_value);
  }
  return success;
}
bool LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LightType_strings[3] = {};

static const char LightType_names[] =
  "LT_DIRECTIONAL"
  "LT_POINT"
  "LT_SPOT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LightType_entries[] = {
  { {LightType_names + 0, 14}, 1 },
  { {LightType_names + 14, 8}, 0 },
  { {LightType_names + 22, 7}, 2 },
};

static const int LightType_entries_by_number[] = {
  1, // 0 -> LT_POINT
  0, // 1 -> LT_DIRECTIONAL
  2, // 2 -> LT_SPOT
};

const std::string& LightType_Name(
    LightType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LightType_entries,
          LightType_entries_by_number,
          3, LightType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LightType_entries,
      LightType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LightType_strings[idx].get();
}
bool LightType_Parse(
    const std::string& name, LightType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LightType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LightType>(int_value);
  }
  return success;
}
bool GPURuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GPURuleType_strings[2] = {};

static const char GPURuleType_names[] =
  "EXCLUDE"
  "INCLUDE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GPURuleType_entries[] = {
  { {GPURuleType_names + 0, 7}, 1 },
  { {GPURuleType_names + 7, 7}, 0 },
};

static const int GPURuleType_entries_by_number[] = {
  1, // 0 -> INCLUDE
  0, // 1 -> EXCLUDE
};

const std::string& GPURuleType_Name(
    GPURuleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GPURuleType_entries,
          GPURuleType_entries_by_number,
          2, GPURuleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GPURuleType_entries,
      GPURuleType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GPURuleType_strings[idx].get();
}
bool GPURuleType_Parse(
    const std::string& name, GPURuleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GPURuleType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<GPURuleType>(int_value);
  }
  return success;
}

// ===================================================================

void Header::InitAsDefaultInstance() {
}
class Header::_Internal {
 public:
};

Header::Header()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_MaterialScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Header.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Header*>(
      &from));
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

std::string Header::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Header";
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
class Color::_Internal {
 public:
};

Color::Color()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Color)
}

void Color::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 4;
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Color*>(
      &from));
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.g() <= 0 && from.g() >= 0)) {
    _internal_set_g(from._internal_g());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
}

std::string Color::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Color";
}


// ===================================================================

void Matrix4::InitAsDefaultInstance() {
}
class Matrix4::_Internal {
 public:
};

Matrix4::Matrix4()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Matrix4)
}
Matrix4::Matrix4(const Matrix4& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Matrix4)
}

void Matrix4::SharedCtor() {
}

Matrix4::~Matrix4() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Matrix4)
  SharedDtor();
}

void Matrix4::SharedDtor() {
}

void Matrix4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Matrix4& Matrix4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Matrix4_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Matrix4::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Matrix4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

const char* Matrix4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Matrix4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Matrix4)
  return target;
}

size_t Matrix4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Matrix4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix4::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Matrix4*>(
      &from));
}

void Matrix4::MergeFrom(const Matrix4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Matrix4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Matrix4::CopyFrom(const Matrix4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Matrix4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix4::IsInitialized() const {
  return true;
}

void Matrix4::InternalSwap(Matrix4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string Matrix4::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Matrix4";
}


// ===================================================================

void Bool::InitAsDefaultInstance() {
}
class Bool::_Internal {
 public:
};

Bool::Bool()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Bool)
}
Bool::Bool(const Bool& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Bool)
}

void Bool::SharedCtor() {
  value_ = false;
}

Bool::~Bool() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Bool)
  SharedDtor();
}

void Bool::SharedDtor() {
}

void Bool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bool& Bool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bool_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Bool::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Bool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear();
}

const char* Bool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Bool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Bool)
  return target;
}

size_t Bool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Bool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bool::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Bool*>(
      &from));
}

void Bool::MergeFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Bool::CopyFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bool::IsInitialized() const {
  return true;
}

void Bool::InternalSwap(Bool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string Bool::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Bool";
}


// ===================================================================

void Float::InitAsDefaultInstance() {
}
class Float::_Internal {
 public:
};

Float::Float()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Float)
}
Float::Float(const Float& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Float)
}

void Float::SharedCtor() {
  value_ = 0;
}

Float::~Float() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Float)
  SharedDtor();
}

void Float::SharedDtor() {
}

void Float::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Float& Float::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Float_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Float::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Float::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Float::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Float)
  return target;
}

size_t Float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Float)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Float::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Float*>(
      &from));
}

void Float::MergeFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Float::CopyFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float::IsInitialized() const {
  return true;
}

void Float::InternalSwap(Float* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string Float::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Float";
}


// ===================================================================

void UInt32::InitAsDefaultInstance() {
}
class UInt32::_Internal {
 public:
};

UInt32::UInt32()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.UInt32)
}
UInt32::UInt32(const UInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.UInt32)
}

void UInt32::SharedCtor() {
  value_ = 0u;
}

UInt32::~UInt32() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.UInt32)
  SharedDtor();
}

void UInt32::SharedDtor() {
}

void UInt32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UInt32& UInt32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UInt32_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void UInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.UInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear();
}

const char* UInt32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UInt32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.UInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.UInt32)
  return target;
}

size_t UInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.UInt32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt32::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UInt32*>(
      &from));
}

void UInt32::MergeFrom(const UInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.UInt32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void UInt32::CopyFrom(const UInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.UInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt32::IsInitialized() const {
  return true;
}

void UInt32::InternalSwap(UInt32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string UInt32::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.UInt32";
}


// ===================================================================

void Int32::InitAsDefaultInstance() {
}
class Int32::_Internal {
 public:
};

Int32::Int32()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Int32)
}
Int32::Int32(const Int32& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Int32)
}

void Int32::SharedCtor() {
  value_ = 0;
}

Int32::~Int32() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Int32)
  SharedDtor();
}

void Int32::SharedDtor() {
}

void Int32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int32& Int32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int32_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Int32::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Int32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Int32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Int32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Int32)
  return target;
}

size_t Int32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Int32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int32::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Int32*>(
      &from));
}

void Int32::MergeFrom(const Int32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Int32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Int32::CopyFrom(const Int32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Int32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32::IsInitialized() const {
  return true;
}

void Int32::InternalSwap(Int32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string Int32::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Int32";
}


// ===================================================================

void String::InitAsDefaultInstance() {
}
class String::_Internal {
 public:
};

String::String()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.String)
}
String::String(const String& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.String)
}

void String::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_String_MaterialScriptObject_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

String::~String() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.String)
  SharedDtor();
}

void String::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const String& String::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_String_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void String::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.String.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.String)
  return target;
}

size_t String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.String)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void String::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const String*>(
      &from));
}

void String::MergeFrom(const String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void String::CopyFrom(const String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {
  return true;
}

void String::InternalSwap(String* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string String::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.String";
}


// ===================================================================

void CompareFunc::InitAsDefaultInstance() {
}
class CompareFunc::_Internal {
 public:
};

CompareFunc::CompareFunc()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.CompareFunc)
}
CompareFunc::CompareFunc(const CompareFunc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.CompareFunc)
}

void CompareFunc::SharedCtor() {
  value_ = 0;
}

CompareFunc::~CompareFunc() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.CompareFunc)
  SharedDtor();
}

void CompareFunc::SharedDtor() {
}

void CompareFunc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompareFunc& CompareFunc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompareFunc_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void CompareFunc::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.CompareFunc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* CompareFunc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.CompareFunction value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::CompareFunction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompareFunc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.CompareFunc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CompareFunction value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.CompareFunc)
  return target;
}

size_t CompareFunc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.CompareFunc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CompareFunction value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompareFunc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CompareFunc*>(
      &from));
}

void CompareFunc::MergeFrom(const CompareFunc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.CompareFunc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void CompareFunc::CopyFrom(const CompareFunc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.CompareFunc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareFunc::IsInitialized() const {
  return true;
}

void CompareFunc::InternalSwap(CompareFunc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string CompareFunc::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.CompareFunc";
}


// ===================================================================

void Shader::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Shader_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class Shader::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const Shader* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
Shader::_Internal::header(const Shader* msg) {
  return *msg->header_;
}
Shader::Shader()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Shader)
}
Shader::Shader(const Shader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  entry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entry().empty()) {
    entry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entry_);
  }
  stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stage().empty()) {
    stage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Shader)
}

void Shader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Shader_MaterialScriptObject_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

Shader::~Shader() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Shader)
  SharedDtor();
}

void Shader::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Shader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shader& Shader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shader_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Shader::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Shader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Shader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_entry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Shader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Shader.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string target = 3;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Shader.target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target(), target);
  }

  // string entry = 4;
  if (this->entry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entry().data(), static_cast<int>(this->_internal_entry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Shader.entry");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_entry(), target);
  }

  // string stage = 5;
  if (this->stage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage().data(), static_cast<int>(this->_internal_stage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Shader.stage");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Shader)
  return target;
}

size_t Shader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Shader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string target = 3;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string entry = 4;
  if (this->entry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry());
  }

  // string stage = 5;
  if (this->stage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage());
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Shader*>(
      &from));
}

void Shader::MergeFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Shader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.entry().size() > 0) {

    entry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entry_);
  }
  if (from.stage().size() > 0) {

    stage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
}

void Shader::CopyFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shader::IsInitialized() const {
  return true;
}

void Shader::InternalSwap(Shader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entry_.Swap(&other->entry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stage_.Swap(&other->stage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
}

std::string Shader::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Shader";
}


// ===================================================================

void GPUProgram::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_GPUProgram_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class GPUProgram::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const GPUProgram* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
GPUProgram::_Internal::header(const GPUProgram* msg) {
  return *msg->header_;
}
GPUProgram::GPUProgram()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUProgram)
}
GPUProgram::GPUProgram(const GPUProgram& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      shaders_(from.shaders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUProgram)
}

void GPUProgram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUProgram_MaterialScriptObject_2eproto.base);
  header_ = nullptr;
}

GPUProgram::~GPUProgram() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUProgram)
  SharedDtor();
}

void GPUProgram::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GPUProgram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUProgram& GPUProgram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUProgram_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUProgram::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shaders_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GPUProgram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.Shader shaders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shaders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUProgram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Shader shaders = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shaders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shaders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUProgram)
  return target;
}

size_t GPUProgram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.Shader shaders = 2;
  total_size += 1UL * this->_internal_shaders_size();
  for (const auto& msg : this->shaders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUProgram::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GPUProgram*>(
      &from));
}

void GPUProgram::MergeFrom(const GPUProgram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shaders_.MergeFrom(from.shaders_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
}

void GPUProgram::CopyFrom(const GPUProgram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUProgram::IsInitialized() const {
  return true;
}

void GPUProgram::InternalSwap(GPUProgram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shaders_.InternalSwap(&other->shaders_);
  swap(header_, other->header_);
}

std::string GPUProgram::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.GPUProgram";
}


// ===================================================================

void GPUConstantBufferRef::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_GPUConstantBufferRef_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class GPUConstantBufferRef::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const GPUConstantBufferRef* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
GPUConstantBufferRef::_Internal::header(const GPUConstantBufferRef* msg) {
  return *msg->header_;
}
GPUConstantBufferRef::GPUConstantBufferRef()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
}
GPUConstantBufferRef::GPUConstantBufferRef(const GPUConstantBufferRef& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
}

void GPUConstantBufferRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&header_)) + sizeof(slot_));
}

GPUConstantBufferRef::~GPUConstantBufferRef() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  SharedDtor();
}

void GPUConstantBufferRef::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GPUConstantBufferRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUConstantBufferRef& GPUConstantBufferRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUConstantBufferRef::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  slot_ = 0u;
  _internal_metadata_.Clear();
}

const char* GPUConstantBufferRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUConstantBufferRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 slot = 2;
  if (this->slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  return target;
}

size_t GPUConstantBufferRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 slot = 2;
  if (this->slot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUConstantBufferRef::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GPUConstantBufferRef*>(
      &from));
}

void GPUConstantBufferRef::MergeFrom(const GPUConstantBufferRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
}

void GPUConstantBufferRef::CopyFrom(const GPUConstantBufferRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUConstantBufferRef::IsInitialized() const {
  return true;
}

void GPUConstantBufferRef::InternalSwap(GPUConstantBufferRef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(slot_, other->slot_);
}

std::string GPUConstantBufferRef::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.GPUConstantBufferRef";
}


// ===================================================================

void GPUProgramRef::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_GPUProgramRef_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class GPUProgramRef::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const GPUProgramRef* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
GPUProgramRef::_Internal::header(const GPUProgramRef* msg) {
  return *msg->header_;
}
GPUProgramRef::GPUProgramRef()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUProgramRef)
}
GPUProgramRef::GPUProgramRef(const GPUProgramRef& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      gpu_cbuffer_ref_(from.gpu_cbuffer_ref_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUProgramRef)
}

void GPUProgramRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUProgramRef_MaterialScriptObject_2eproto.base);
  header_ = nullptr;
}

GPUProgramRef::~GPUProgramRef() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  SharedDtor();
}

void GPUProgramRef::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GPUProgramRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUProgramRef& GPUProgramRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUProgramRef_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUProgramRef::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpu_cbuffer_ref_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GPUProgramRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBufferRef gpu_cbuffer_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gpu_cbuffer_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUProgramRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBufferRef gpu_cbuffer_ref = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gpu_cbuffer_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_gpu_cbuffer_ref(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  return target;
}

size_t GPUProgramRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBufferRef gpu_cbuffer_ref = 2;
  total_size += 1UL * this->_internal_gpu_cbuffer_ref_size();
  for (const auto& msg : this->gpu_cbuffer_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUProgramRef::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GPUProgramRef*>(
      &from));
}

void GPUProgramRef::MergeFrom(const GPUProgramRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpu_cbuffer_ref_.MergeFrom(from.gpu_cbuffer_ref_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
}

void GPUProgramRef::CopyFrom(const GPUProgramRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUProgramRef::IsInitialized() const {
  return true;
}

void GPUProgramRef::InternalSwap(GPUProgramRef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gpu_cbuffer_ref_.InternalSwap(&other->gpu_cbuffer_ref_);
  swap(header_, other->header_);
}

std::string GPUProgramRef::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.GPUProgramRef";
}


// ===================================================================

void Param::InitAsDefaultInstance() {
}
class Param::_Internal {
 public:
};

Param::Param()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Param)
}
Param::Param(const Param& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      fvalues_(from.fvalues_),
      ivalues_(from.ivalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Param)
}

void Param::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Param_MaterialScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(type_));
}

Param::~Param() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Param)
  SharedDtor();
}

void Param::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Param& Param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Param_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Param::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fvalues_.Clear();
  ivalues_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BuiltInType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::BuiltInType>(val));
        } else goto handle_unusual;
        continue;
      // repeated float fvalues = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fvalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_fvalues(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated sint32 ivalues = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_ivalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_ivalues(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Param::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Param.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BuiltInType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated float fvalues = 4;
  if (this->_internal_fvalues_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_fvalues(), target);
  }

  // repeated sint32 ivalues = 5;
  {
    int byte_size = _ivalues_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          5, _internal_ivalues(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Param)
  return target;
}

size_t Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Param)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fvalues = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fvalues_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fvalues_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 ivalues = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->ivalues_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ivalues_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // .Tiny3D.Script.MaterialSystem.BuiltInType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Param::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Param*>(
      &from));
}

void Param::MergeFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fvalues_.MergeFrom(from.fvalues_);
  ivalues_.MergeFrom(from.ivalues_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Param::CopyFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {
  return true;
}

void Param::InternalSwap(Param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fvalues_.InternalSwap(&other->fvalues_);
  ivalues_.InternalSwap(&other->ivalues_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(type_, other->type_);
}

std::string Param::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Param";
}


// ===================================================================

void ParamAuto::InitAsDefaultInstance() {
}
class ParamAuto::_Internal {
 public:
};

ParamAuto::ParamAuto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.ParamAuto)
}
ParamAuto::ParamAuto(const ParamAuto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      fextra_params_(from.fextra_params_),
      iextra_params_(from.iextra_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_code_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_code_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.ParamAuto)
}

void ParamAuto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParamAuto_MaterialScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(value_code_));
}

ParamAuto::~ParamAuto() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.ParamAuto)
  SharedDtor();
}

void ParamAuto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParamAuto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParamAuto& ParamAuto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParamAuto_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ParamAuto::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.ParamAuto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fextra_params_.Clear();
  iextra_params_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(value_code_));
  _internal_metadata_.Clear();
}

const char* ParamAuto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 value_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float fextra_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fextra_params(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_fextra_params(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 iextra_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_iextra_params(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_iextra_params(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamAuto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.ParamAuto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.ParamAuto.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 value_code = 3;
  if (this->value_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value_code(), target);
  }

  // repeated float fextra_params = 4;
  if (this->_internal_fextra_params_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_fextra_params(), target);
  }

  // repeated uint32 iextra_params = 5;
  {
    int byte_size = _iextra_params_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_iextra_params(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.ParamAuto)
  return target;
}

size_t ParamAuto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.ParamAuto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fextra_params = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fextra_params_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fextra_params_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 iextra_params = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->iextra_params_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _iextra_params_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 value_code = 3;
  if (this->value_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamAuto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ParamAuto*>(
      &from));
}

void ParamAuto::MergeFrom(const ParamAuto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.ParamAuto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fextra_params_.MergeFrom(from.fextra_params_);
  iextra_params_.MergeFrom(from.iextra_params_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.value_code() != 0) {
    _internal_set_value_code(from._internal_value_code());
  }
}

void ParamAuto::CopyFrom(const ParamAuto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.ParamAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamAuto::IsInitialized() const {
  return true;
}

void ParamAuto::InternalSwap(ParamAuto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fextra_params_.InternalSwap(&other->fextra_params_);
  iextra_params_.InternalSwap(&other->iextra_params_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(value_code_, other->value_code_);
}

std::string ParamAuto::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.ParamAuto";
}


// ===================================================================

void GPUConstantBuffer::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_GPUConstantBuffer_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class GPUConstantBuffer::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const GPUConstantBuffer* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
GPUConstantBuffer::_Internal::header(const GPUConstantBuffer* msg) {
  return *msg->header_;
}
GPUConstantBuffer::GPUConstantBuffer()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
}
GPUConstantBuffer::GPUConstantBuffer(const GPUConstantBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      param_indexed_(from.param_indexed_),
      param_indexed_auto_(from.param_indexed_auto_),
      param_named_(from.param_named_),
      param_named_auto_(from.param_named_auto_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
}

void GPUConstantBuffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto.base);
  header_ = nullptr;
}

GPUConstantBuffer::~GPUConstantBuffer() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  SharedDtor();
}

void GPUConstantBuffer::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GPUConstantBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUConstantBuffer& GPUConstantBuffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUConstantBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_indexed_.Clear();
  param_indexed_auto_.Clear();
  param_named_.Clear();
  param_named_auto_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GPUConstantBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.Param param_indexed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param_indexed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.ParamAuto param_indexed_auto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param_indexed_auto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.Param param_named = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param_named(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.ParamAuto param_named_auto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param_named_auto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUConstantBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Param param_indexed = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_indexed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_param_indexed(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamAuto param_indexed_auto = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_indexed_auto_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_param_indexed_auto(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Param param_named = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_named_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_param_named(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamAuto param_named_auto = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_named_auto_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_param_named_auto(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  return target;
}

size_t GPUConstantBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.Param param_indexed = 2;
  total_size += 1UL * this->_internal_param_indexed_size();
  for (const auto& msg : this->param_indexed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamAuto param_indexed_auto = 3;
  total_size += 1UL * this->_internal_param_indexed_auto_size();
  for (const auto& msg : this->param_indexed_auto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Param param_named = 4;
  total_size += 1UL * this->_internal_param_named_size();
  for (const auto& msg : this->param_named_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamAuto param_named_auto = 5;
  total_size += 1UL * this->_internal_param_named_auto_size();
  for (const auto& msg : this->param_named_auto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUConstantBuffer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GPUConstantBuffer*>(
      &from));
}

void GPUConstantBuffer::MergeFrom(const GPUConstantBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_indexed_.MergeFrom(from.param_indexed_);
  param_indexed_auto_.MergeFrom(from.param_indexed_auto_);
  param_named_.MergeFrom(from.param_named_);
  param_named_auto_.MergeFrom(from.param_named_auto_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
}

void GPUConstantBuffer::CopyFrom(const GPUConstantBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUConstantBuffer::IsInitialized() const {
  return true;
}

void GPUConstantBuffer::InternalSwap(GPUConstantBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  param_indexed_.InternalSwap(&other->param_indexed_);
  param_indexed_auto_.InternalSwap(&other->param_indexed_auto_);
  param_named_.InternalSwap(&other->param_named_);
  param_named_auto_.InternalSwap(&other->param_named_auto_);
  swap(header_, other->header_);
}

std::string GPUConstantBuffer::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.GPUConstantBuffer";
}


// ===================================================================

void TexAddressModeSimple::InitAsDefaultInstance() {
}
class TexAddressModeSimple::_Internal {
 public:
};

TexAddressModeSimple::TexAddressModeSimple()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
}
TexAddressModeSimple::TexAddressModeSimple(const TexAddressModeSimple& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uvw_mode_ = from.uvw_mode_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
}

void TexAddressModeSimple::SharedCtor() {
  uvw_mode_ = 0;
}

TexAddressModeSimple::~TexAddressModeSimple() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
  SharedDtor();
}

void TexAddressModeSimple::SharedDtor() {
}

void TexAddressModeSimple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexAddressModeSimple& TexAddressModeSimple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexAddressModeSimple_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TexAddressModeSimple::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uvw_mode_ = 0;
  _internal_metadata_.Clear();
}

const char* TexAddressModeSimple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.TextureAddressMode uvw_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_uvw_mode(static_cast<::Tiny3D::Script::MaterialSystem::TextureAddressMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexAddressModeSimple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.TextureAddressMode uvw_mode = 1;
  if (this->uvw_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_uvw_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
  return target;
}

size_t TexAddressModeSimple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.TextureAddressMode uvw_mode = 1;
  if (this->uvw_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_uvw_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexAddressModeSimple::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexAddressModeSimple*>(
      &from));
}

void TexAddressModeSimple::MergeFrom(const TexAddressModeSimple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uvw_mode() != 0) {
    _internal_set_uvw_mode(from._internal_uvw_mode());
  }
}

void TexAddressModeSimple::CopyFrom(const TexAddressModeSimple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TexAddressModeSimple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexAddressModeSimple::IsInitialized() const {
  return true;
}

void TexAddressModeSimple::InternalSwap(TexAddressModeSimple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uvw_mode_, other->uvw_mode_);
}

std::string TexAddressModeSimple::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.TexAddressModeSimple";
}


// ===================================================================

void TexAddressModeComplex::InitAsDefaultInstance() {
}
class TexAddressModeComplex::_Internal {
 public:
};

TexAddressModeComplex::TexAddressModeComplex()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
}
TexAddressModeComplex::TexAddressModeComplex(const TexAddressModeComplex& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&u_mode_, &from.u_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_mode_) -
    reinterpret_cast<char*>(&u_mode_)) + sizeof(w_mode_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
}

void TexAddressModeComplex::SharedCtor() {
  ::memset(&u_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_mode_) -
      reinterpret_cast<char*>(&u_mode_)) + sizeof(w_mode_));
}

TexAddressModeComplex::~TexAddressModeComplex() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
  SharedDtor();
}

void TexAddressModeComplex::SharedDtor() {
}

void TexAddressModeComplex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexAddressModeComplex& TexAddressModeComplex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexAddressModeComplex_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TexAddressModeComplex::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_mode_) -
      reinterpret_cast<char*>(&u_mode_)) + sizeof(w_mode_));
  _internal_metadata_.Clear();
}

const char* TexAddressModeComplex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.TextureAddressMode u_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_u_mode(static_cast<::Tiny3D::Script::MaterialSystem::TextureAddressMode>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TextureAddressMode v_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_v_mode(static_cast<::Tiny3D::Script::MaterialSystem::TextureAddressMode>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TextureAddressMode w_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_w_mode(static_cast<::Tiny3D::Script::MaterialSystem::TextureAddressMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexAddressModeComplex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.TextureAddressMode u_mode = 1;
  if (this->u_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_u_mode(), target);
  }

  // .Tiny3D.Script.MaterialSystem.TextureAddressMode v_mode = 2;
  if (this->v_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_v_mode(), target);
  }

  // .Tiny3D.Script.MaterialSystem.TextureAddressMode w_mode = 3;
  if (this->w_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_w_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
  return target;
}

size_t TexAddressModeComplex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.TextureAddressMode u_mode = 1;
  if (this->u_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_u_mode());
  }

  // .Tiny3D.Script.MaterialSystem.TextureAddressMode v_mode = 2;
  if (this->v_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_v_mode());
  }

  // .Tiny3D.Script.MaterialSystem.TextureAddressMode w_mode = 3;
  if (this->w_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_w_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexAddressModeComplex::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexAddressModeComplex*>(
      &from));
}

void TexAddressModeComplex::MergeFrom(const TexAddressModeComplex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u_mode() != 0) {
    _internal_set_u_mode(from._internal_u_mode());
  }
  if (from.v_mode() != 0) {
    _internal_set_v_mode(from._internal_v_mode());
  }
  if (from.w_mode() != 0) {
    _internal_set_w_mode(from._internal_w_mode());
  }
}

void TexAddressModeComplex::CopyFrom(const TexAddressModeComplex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TexAddressModeComplex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexAddressModeComplex::IsInitialized() const {
  return true;
}

void TexAddressModeComplex::InternalSwap(TexAddressModeComplex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(u_mode_, other->u_mode_);
  swap(v_mode_, other->v_mode_);
  swap(w_mode_, other->w_mode_);
}

std::string TexAddressModeComplex::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.TexAddressModeComplex";
}


// ===================================================================

void TexAddressMode::InitAsDefaultInstance() {
}
class TexAddressMode::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::TexAddressModeSimple& simple(const TexAddressMode* msg);
  static const ::Tiny3D::Script::MaterialSystem::TexAddressModeComplex& complex(const TexAddressMode* msg);
};

const ::Tiny3D::Script::MaterialSystem::TexAddressModeSimple&
TexAddressMode::_Internal::simple(const TexAddressMode* msg) {
  return *msg->TexAddresModeOneOf_.simple_;
}
const ::Tiny3D::Script::MaterialSystem::TexAddressModeComplex&
TexAddressMode::_Internal::complex(const TexAddressMode* msg) {
  return *msg->TexAddresModeOneOf_.complex_;
}
void TexAddressMode::set_allocated_simple(::Tiny3D::Script::MaterialSystem::TexAddressModeSimple* simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TexAddresModeOneOf();
  if (simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple, submessage_arena);
    }
    set_has_simple();
    TexAddresModeOneOf_.simple_ = simple;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.TexAddressMode.simple)
}
void TexAddressMode::set_allocated_complex(::Tiny3D::Script::MaterialSystem::TexAddressModeComplex* complex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TexAddresModeOneOf();
  if (complex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      complex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, complex, submessage_arena);
    }
    set_has_complex();
    TexAddresModeOneOf_.complex_ = complex;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.TexAddressMode.complex)
}
TexAddressMode::TexAddressMode()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TexAddressMode)
}
TexAddressMode::TexAddressMode(const TexAddressMode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_TexAddresModeOneOf();
  switch (from.TexAddresModeOneOf_case()) {
    case kSimple: {
      _internal_mutable_simple()->::Tiny3D::Script::MaterialSystem::TexAddressModeSimple::MergeFrom(from._internal_simple());
      break;
    }
    case kComplex: {
      _internal_mutable_complex()->::Tiny3D::Script::MaterialSystem::TexAddressModeComplex::MergeFrom(from._internal_complex());
      break;
    }
    case TEXADDRESMODEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TexAddressMode)
}

void TexAddressMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TexAddressMode_MaterialScriptObject_2eproto.base);
  clear_has_TexAddresModeOneOf();
}

TexAddressMode::~TexAddressMode() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TexAddressMode)
  SharedDtor();
}

void TexAddressMode::SharedDtor() {
  if (has_TexAddresModeOneOf()) {
    clear_TexAddresModeOneOf();
  }
}

void TexAddressMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexAddressMode& TexAddressMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexAddressMode_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TexAddressMode::clear_TexAddresModeOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.TexAddressMode)
  switch (TexAddresModeOneOf_case()) {
    case kSimple: {
      delete TexAddresModeOneOf_.simple_;
      break;
    }
    case kComplex: {
      delete TexAddresModeOneOf_.complex_;
      break;
    }
    case TEXADDRESMODEONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TEXADDRESMODEONEOF_NOT_SET;
}


void TexAddressMode::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TexAddressMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_TexAddresModeOneOf();
  _internal_metadata_.Clear();
}

const char* TexAddressMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.TexAddressModeSimple simple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TexAddressModeComplex complex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_complex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexAddressMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TexAddressMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.TexAddressModeSimple simple = 1;
  if (_internal_has_simple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simple(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.TexAddressModeComplex complex = 2;
  if (_internal_has_complex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::complex(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TexAddressMode)
  return target;
}

size_t TexAddressMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TexAddressMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (TexAddresModeOneOf_case()) {
    // .Tiny3D.Script.MaterialSystem.TexAddressModeSimple simple = 1;
    case kSimple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TexAddresModeOneOf_.simple_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.TexAddressModeComplex complex = 2;
    case kComplex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TexAddresModeOneOf_.complex_);
      break;
    }
    case TEXADDRESMODEONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexAddressMode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexAddressMode*>(
      &from));
}

void TexAddressMode::MergeFrom(const TexAddressMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TexAddressMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.TexAddresModeOneOf_case()) {
    case kSimple: {
      _internal_mutable_simple()->::Tiny3D::Script::MaterialSystem::TexAddressModeSimple::MergeFrom(from._internal_simple());
      break;
    }
    case kComplex: {
      _internal_mutable_complex()->::Tiny3D::Script::MaterialSystem::TexAddressModeComplex::MergeFrom(from._internal_complex());
      break;
    }
    case TEXADDRESMODEONEOF_NOT_SET: {
      break;
    }
  }
}

void TexAddressMode::CopyFrom(const TexAddressMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TexAddressMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexAddressMode::IsInitialized() const {
  return true;
}

void TexAddressMode::InternalSwap(TexAddressMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(TexAddresModeOneOf_, other->TexAddresModeOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TexAddressMode::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.TexAddressMode";
}


// ===================================================================

void TexFilterSimple::InitAsDefaultInstance() {
}
class TexFilterSimple::_Internal {
 public:
};

TexFilterSimple::TexFilterSimple()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TexFilterSimple)
}
TexFilterSimple::TexFilterSimple(const TexFilterSimple& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_ = from.filter_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TexFilterSimple)
}

void TexFilterSimple::SharedCtor() {
  filter_ = 0;
}

TexFilterSimple::~TexFilterSimple() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TexFilterSimple)
  SharedDtor();
}

void TexFilterSimple::SharedDtor() {
}

void TexFilterSimple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexFilterSimple& TexFilterSimple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexFilterSimple_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TexFilterSimple::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TexFilterSimple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_ = 0;
  _internal_metadata_.Clear();
}

const char* TexFilterSimple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.FilterOption filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_filter(static_cast<::Tiny3D::Script::MaterialSystem::FilterOption>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexFilterSimple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TexFilterSimple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.FilterOption filter = 1;
  if (this->filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TexFilterSimple)
  return target;
}

size_t TexFilterSimple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TexFilterSimple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.FilterOption filter = 1;
  if (this->filter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexFilterSimple::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexFilterSimple*>(
      &from));
}

void TexFilterSimple::MergeFrom(const TexFilterSimple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TexFilterSimple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter() != 0) {
    _internal_set_filter(from._internal_filter());
  }
}

void TexFilterSimple::CopyFrom(const TexFilterSimple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TexFilterSimple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexFilterSimple::IsInitialized() const {
  return true;
}

void TexFilterSimple::InternalSwap(TexFilterSimple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

std::string TexFilterSimple::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.TexFilterSimple";
}


// ===================================================================

void TexFilterComplex::InitAsDefaultInstance() {
}
class TexFilterComplex::_Internal {
 public:
};

TexFilterComplex::TexFilterComplex()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TexFilterComplex)
}
TexFilterComplex::TexFilterComplex(const TexFilterComplex& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minification_, &from.minification_,
    static_cast<size_t>(reinterpret_cast<char*>(&mip_) -
    reinterpret_cast<char*>(&minification_)) + sizeof(mip_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TexFilterComplex)
}

void TexFilterComplex::SharedCtor() {
  ::memset(&minification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mip_) -
      reinterpret_cast<char*>(&minification_)) + sizeof(mip_));
}

TexFilterComplex::~TexFilterComplex() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TexFilterComplex)
  SharedDtor();
}

void TexFilterComplex::SharedDtor() {
}

void TexFilterComplex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexFilterComplex& TexFilterComplex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexFilterComplex_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TexFilterComplex::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TexFilterComplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mip_) -
      reinterpret_cast<char*>(&minification_)) + sizeof(mip_));
  _internal_metadata_.Clear();
}

const char* TexFilterComplex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.FilterOption minification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_minification(static_cast<::Tiny3D::Script::MaterialSystem::FilterOption>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.FilterOption magnification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_magnification(static_cast<::Tiny3D::Script::MaterialSystem::FilterOption>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.FilterOption mip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_mip(static_cast<::Tiny3D::Script::MaterialSystem::FilterOption>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexFilterComplex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TexFilterComplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.FilterOption minification = 1;
  if (this->minification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_minification(), target);
  }

  // .Tiny3D.Script.MaterialSystem.FilterOption magnification = 2;
  if (this->magnification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_magnification(), target);
  }

  // .Tiny3D.Script.MaterialSystem.FilterOption mip = 3;
  if (this->mip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TexFilterComplex)
  return target;
}

size_t TexFilterComplex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TexFilterComplex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.FilterOption minification = 1;
  if (this->minification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_minification());
  }

  // .Tiny3D.Script.MaterialSystem.FilterOption magnification = 2;
  if (this->magnification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_magnification());
  }

  // .Tiny3D.Script.MaterialSystem.FilterOption mip = 3;
  if (this->mip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexFilterComplex::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexFilterComplex*>(
      &from));
}

void TexFilterComplex::MergeFrom(const TexFilterComplex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TexFilterComplex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minification() != 0) {
    _internal_set_minification(from._internal_minification());
  }
  if (from.magnification() != 0) {
    _internal_set_magnification(from._internal_magnification());
  }
  if (from.mip() != 0) {
    _internal_set_mip(from._internal_mip());
  }
}

void TexFilterComplex::CopyFrom(const TexFilterComplex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TexFilterComplex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexFilterComplex::IsInitialized() const {
  return true;
}

void TexFilterComplex::InternalSwap(TexFilterComplex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(minification_, other->minification_);
  swap(magnification_, other->magnification_);
  swap(mip_, other->mip_);
}

std::string TexFilterComplex::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.TexFilterComplex";
}


// ===================================================================

void TexFilter::InitAsDefaultInstance() {
}
class TexFilter::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::TexFilterSimple& simple(const TexFilter* msg);
  static const ::Tiny3D::Script::MaterialSystem::TexFilterComplex& complex(const TexFilter* msg);
};

const ::Tiny3D::Script::MaterialSystem::TexFilterSimple&
TexFilter::_Internal::simple(const TexFilter* msg) {
  return *msg->TexFilterOneOf_.simple_;
}
const ::Tiny3D::Script::MaterialSystem::TexFilterComplex&
TexFilter::_Internal::complex(const TexFilter* msg) {
  return *msg->TexFilterOneOf_.complex_;
}
void TexFilter::set_allocated_simple(::Tiny3D::Script::MaterialSystem::TexFilterSimple* simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TexFilterOneOf();
  if (simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple, submessage_arena);
    }
    set_has_simple();
    TexFilterOneOf_.simple_ = simple;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.TexFilter.simple)
}
void TexFilter::set_allocated_complex(::Tiny3D::Script::MaterialSystem::TexFilterComplex* complex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TexFilterOneOf();
  if (complex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      complex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, complex, submessage_arena);
    }
    set_has_complex();
    TexFilterOneOf_.complex_ = complex;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.TexFilter.complex)
}
TexFilter::TexFilter()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TexFilter)
}
TexFilter::TexFilter(const TexFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_TexFilterOneOf();
  switch (from.TexFilterOneOf_case()) {
    case kSimple: {
      _internal_mutable_simple()->::Tiny3D::Script::MaterialSystem::TexFilterSimple::MergeFrom(from._internal_simple());
      break;
    }
    case kComplex: {
      _internal_mutable_complex()->::Tiny3D::Script::MaterialSystem::TexFilterComplex::MergeFrom(from._internal_complex());
      break;
    }
    case TEXFILTERONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TexFilter)
}

void TexFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TexFilter_MaterialScriptObject_2eproto.base);
  clear_has_TexFilterOneOf();
}

TexFilter::~TexFilter() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TexFilter)
  SharedDtor();
}

void TexFilter::SharedDtor() {
  if (has_TexFilterOneOf()) {
    clear_TexFilterOneOf();
  }
}

void TexFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexFilter& TexFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexFilter_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TexFilter::clear_TexFilterOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.TexFilter)
  switch (TexFilterOneOf_case()) {
    case kSimple: {
      delete TexFilterOneOf_.simple_;
      break;
    }
    case kComplex: {
      delete TexFilterOneOf_.complex_;
      break;
    }
    case TEXFILTERONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TEXFILTERONEOF_NOT_SET;
}


void TexFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TexFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_TexFilterOneOf();
  _internal_metadata_.Clear();
}

const char* TexFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.TexFilterSimple simple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TexFilterComplex complex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_complex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TexFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.TexFilterSimple simple = 1;
  if (_internal_has_simple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simple(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.TexFilterComplex complex = 2;
  if (_internal_has_complex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::complex(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TexFilter)
  return target;
}

size_t TexFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TexFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (TexFilterOneOf_case()) {
    // .Tiny3D.Script.MaterialSystem.TexFilterSimple simple = 1;
    case kSimple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TexFilterOneOf_.simple_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.TexFilterComplex complex = 2;
    case kComplex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TexFilterOneOf_.complex_);
      break;
    }
    case TEXFILTERONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexFilter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexFilter*>(
      &from));
}

void TexFilter::MergeFrom(const TexFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TexFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.TexFilterOneOf_case()) {
    case kSimple: {
      _internal_mutable_simple()->::Tiny3D::Script::MaterialSystem::TexFilterSimple::MergeFrom(from._internal_simple());
      break;
    }
    case kComplex: {
      _internal_mutable_complex()->::Tiny3D::Script::MaterialSystem::TexFilterComplex::MergeFrom(from._internal_complex());
      break;
    }
    case TEXFILTERONEOF_NOT_SET: {
      break;
    }
  }
}

void TexFilter::CopyFrom(const TexFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TexFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexFilter::IsInitialized() const {
  return true;
}

void TexFilter::InternalSwap(TexFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(TexFilterOneOf_, other->TexFilterOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TexFilter::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.TexFilter";
}


// ===================================================================

void Sampler::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_._instance.get_mutable()->tex_address_mode_ = const_cast< ::Tiny3D::Script::MaterialSystem::TexAddressMode*>(
      ::Tiny3D::Script::MaterialSystem::TexAddressMode::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_._instance.get_mutable()->tex_border_color_ = const_cast< ::Tiny3D::Script::MaterialSystem::Color*>(
      ::Tiny3D::Script::MaterialSystem::Color::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_._instance.get_mutable()->filtering_ = const_cast< ::Tiny3D::Script::MaterialSystem::TexFilter*>(
      ::Tiny3D::Script::MaterialSystem::TexFilter::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_._instance.get_mutable()->compare_test_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_._instance.get_mutable()->compare_func_ = const_cast< ::Tiny3D::Script::MaterialSystem::CompareFunc*>(
      ::Tiny3D::Script::MaterialSystem::CompareFunc::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_._instance.get_mutable()->max_anisotropy_ = const_cast< ::Tiny3D::Script::MaterialSystem::UInt32*>(
      ::Tiny3D::Script::MaterialSystem::UInt32::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Sampler_default_instance_._instance.get_mutable()->mipmap_bias_ = const_cast< ::Tiny3D::Script::MaterialSystem::Float*>(
      ::Tiny3D::Script::MaterialSystem::Float::internal_default_instance());
}
class Sampler::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const Sampler* msg);
  static const ::Tiny3D::Script::MaterialSystem::TexAddressMode& tex_address_mode(const Sampler* msg);
  static const ::Tiny3D::Script::MaterialSystem::Color& tex_border_color(const Sampler* msg);
  static const ::Tiny3D::Script::MaterialSystem::TexFilter& filtering(const Sampler* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& compare_test(const Sampler* msg);
  static const ::Tiny3D::Script::MaterialSystem::CompareFunc& compare_func(const Sampler* msg);
  static const ::Tiny3D::Script::MaterialSystem::UInt32& max_anisotropy(const Sampler* msg);
  static const ::Tiny3D::Script::MaterialSystem::Float& mipmap_bias(const Sampler* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
Sampler::_Internal::header(const Sampler* msg) {
  return *msg->header_;
}
const ::Tiny3D::Script::MaterialSystem::TexAddressMode&
Sampler::_Internal::tex_address_mode(const Sampler* msg) {
  return *msg->tex_address_mode_;
}
const ::Tiny3D::Script::MaterialSystem::Color&
Sampler::_Internal::tex_border_color(const Sampler* msg) {
  return *msg->tex_border_color_;
}
const ::Tiny3D::Script::MaterialSystem::TexFilter&
Sampler::_Internal::filtering(const Sampler* msg) {
  return *msg->filtering_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Sampler::_Internal::compare_test(const Sampler* msg) {
  return *msg->compare_test_;
}
const ::Tiny3D::Script::MaterialSystem::CompareFunc&
Sampler::_Internal::compare_func(const Sampler* msg) {
  return *msg->compare_func_;
}
const ::Tiny3D::Script::MaterialSystem::UInt32&
Sampler::_Internal::max_anisotropy(const Sampler* msg) {
  return *msg->max_anisotropy_;
}
const ::Tiny3D::Script::MaterialSystem::Float&
Sampler::_Internal::mipmap_bias(const Sampler* msg) {
  return *msg->mipmap_bias_;
}
Sampler::Sampler()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Sampler)
}
Sampler::Sampler(const Sampler& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_tex_address_mode()) {
    tex_address_mode_ = new ::Tiny3D::Script::MaterialSystem::TexAddressMode(*from.tex_address_mode_);
  } else {
    tex_address_mode_ = nullptr;
  }
  if (from._internal_has_tex_border_color()) {
    tex_border_color_ = new ::Tiny3D::Script::MaterialSystem::Color(*from.tex_border_color_);
  } else {
    tex_border_color_ = nullptr;
  }
  if (from._internal_has_filtering()) {
    filtering_ = new ::Tiny3D::Script::MaterialSystem::TexFilter(*from.filtering_);
  } else {
    filtering_ = nullptr;
  }
  if (from._internal_has_compare_test()) {
    compare_test_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.compare_test_);
  } else {
    compare_test_ = nullptr;
  }
  if (from._internal_has_compare_func()) {
    compare_func_ = new ::Tiny3D::Script::MaterialSystem::CompareFunc(*from.compare_func_);
  } else {
    compare_func_ = nullptr;
  }
  if (from._internal_has_max_anisotropy()) {
    max_anisotropy_ = new ::Tiny3D::Script::MaterialSystem::UInt32(*from.max_anisotropy_);
  } else {
    max_anisotropy_ = nullptr;
  }
  if (from._internal_has_mipmap_bias()) {
    mipmap_bias_ = new ::Tiny3D::Script::MaterialSystem::Float(*from.mipmap_bias_);
  } else {
    mipmap_bias_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Sampler)
}

void Sampler::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sampler_MaterialScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mipmap_bias_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mipmap_bias_));
}

Sampler::~Sampler() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Sampler)
  SharedDtor();
}

void Sampler::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete tex_address_mode_;
  if (this != internal_default_instance()) delete tex_border_color_;
  if (this != internal_default_instance()) delete filtering_;
  if (this != internal_default_instance()) delete compare_test_;
  if (this != internal_default_instance()) delete compare_func_;
  if (this != internal_default_instance()) delete max_anisotropy_;
  if (this != internal_default_instance()) delete mipmap_bias_;
}

void Sampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sampler& Sampler::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sampler_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Sampler::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Sampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tex_address_mode_ != nullptr) {
    delete tex_address_mode_;
  }
  tex_address_mode_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tex_border_color_ != nullptr) {
    delete tex_border_color_;
  }
  tex_border_color_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && filtering_ != nullptr) {
    delete filtering_;
  }
  filtering_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && compare_test_ != nullptr) {
    delete compare_test_;
  }
  compare_test_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && compare_func_ != nullptr) {
    delete compare_func_;
  }
  compare_func_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_anisotropy_ != nullptr) {
    delete max_anisotropy_;
  }
  max_anisotropy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mipmap_bias_ != nullptr) {
    delete mipmap_bias_;
  }
  mipmap_bias_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Sampler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TexAddressMode tex_address_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tex_address_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Color tex_border_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tex_border_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TexFilter filtering = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_filtering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool compare_test = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_compare_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CompareFunc compare_func = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_compare_func(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.UInt32 max_anisotropy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_anisotropy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Float mipmap_bias = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mipmap_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sampler::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Sampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.TexAddressMode tex_address_mode = 2;
  if (this->has_tex_address_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tex_address_mode(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Color tex_border_color = 3;
  if (this->has_tex_border_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tex_border_color(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.TexFilter filtering = 4;
  if (this->has_filtering()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::filtering(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool compare_test = 5;
  if (this->has_compare_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::compare_test(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.CompareFunc compare_func = 6;
  if (this->has_compare_func()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::compare_func(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 max_anisotropy = 7;
  if (this->has_max_anisotropy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::max_anisotropy(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Float mipmap_bias = 8;
  if (this->has_mipmap_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mipmap_bias(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Sampler)
  return target;
}

size_t Sampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Sampler)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Tiny3D.Script.MaterialSystem.TexAddressMode tex_address_mode = 2;
  if (this->has_tex_address_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tex_address_mode_);
  }

  // .Tiny3D.Script.MaterialSystem.Color tex_border_color = 3;
  if (this->has_tex_border_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tex_border_color_);
  }

  // .Tiny3D.Script.MaterialSystem.TexFilter filtering = 4;
  if (this->has_filtering()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filtering_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool compare_test = 5;
  if (this->has_compare_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compare_test_);
  }

  // .Tiny3D.Script.MaterialSystem.CompareFunc compare_func = 6;
  if (this->has_compare_func()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compare_func_);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 max_anisotropy = 7;
  if (this->has_max_anisotropy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_anisotropy_);
  }

  // .Tiny3D.Script.MaterialSystem.Float mipmap_bias = 8;
  if (this->has_mipmap_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mipmap_bias_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sampler::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Sampler*>(
      &from));
}

void Sampler::MergeFrom(const Sampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Sampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.has_tex_address_mode()) {
    _internal_mutable_tex_address_mode()->::Tiny3D::Script::MaterialSystem::TexAddressMode::MergeFrom(from._internal_tex_address_mode());
  }
  if (from.has_tex_border_color()) {
    _internal_mutable_tex_border_color()->::Tiny3D::Script::MaterialSystem::Color::MergeFrom(from._internal_tex_border_color());
  }
  if (from.has_filtering()) {
    _internal_mutable_filtering()->::Tiny3D::Script::MaterialSystem::TexFilter::MergeFrom(from._internal_filtering());
  }
  if (from.has_compare_test()) {
    _internal_mutable_compare_test()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_compare_test());
  }
  if (from.has_compare_func()) {
    _internal_mutable_compare_func()->::Tiny3D::Script::MaterialSystem::CompareFunc::MergeFrom(from._internal_compare_func());
  }
  if (from.has_max_anisotropy()) {
    _internal_mutable_max_anisotropy()->::Tiny3D::Script::MaterialSystem::UInt32::MergeFrom(from._internal_max_anisotropy());
  }
  if (from.has_mipmap_bias()) {
    _internal_mutable_mipmap_bias()->::Tiny3D::Script::MaterialSystem::Float::MergeFrom(from._internal_mipmap_bias());
  }
}

void Sampler::CopyFrom(const Sampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Sampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sampler::IsInitialized() const {
  return true;
}

void Sampler::InternalSwap(Sampler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(tex_address_mode_, other->tex_address_mode_);
  swap(tex_border_color_, other->tex_border_color_);
  swap(filtering_, other->filtering_);
  swap(compare_test_, other->compare_test_);
  swap(compare_func_, other->compare_func_);
  swap(max_anisotropy_, other->max_anisotropy_);
  swap(mipmap_bias_, other->mipmap_bias_);
}

std::string Sampler::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Sampler";
}


// ===================================================================

void Texture::InitAsDefaultInstance() {
}
class Texture::_Internal {
 public:
};

Texture::Texture()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Texture)
}
Texture::Texture(const Texture& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamma_) -
    reinterpret_cast<char*>(&type_)) + sizeof(gamma_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Texture)
}

void Texture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Texture_MaterialScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamma_) -
      reinterpret_cast<char*>(&type_)) + sizeof(gamma_));
}

Texture::~Texture() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Texture)
  SharedDtor();
}

void Texture::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Texture& Texture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Texture_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamma_) -
      reinterpret_cast<char*>(&type_)) + sizeof(gamma_));
  _internal_metadata_.Clear();
}

const char* Texture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TextureType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::TextureType>(val));
        } else goto handle_unusual;
        continue;
      // sint32 mipmaps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mipmaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool alpha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gamma = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Texture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Texture.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .Tiny3D.Script.MaterialSystem.TextureType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // sint32 mipmaps = 3;
  if (this->mipmaps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_mipmaps(), target);
  }

  // bool alpha = 4;
  if (this->alpha() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_alpha(), target);
  }

  // bool gamma = 5;
  if (this->gamma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gamma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Texture)
  return target;
}

size_t Texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Texture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Tiny3D.Script.MaterialSystem.TextureType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // sint32 mipmaps = 3;
  if (this->mipmaps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_mipmaps());
  }

  // bool alpha = 4;
  if (this->alpha() != 0) {
    total_size += 1 + 1;
  }

  // bool gamma = 5;
  if (this->gamma() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Texture::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Texture*>(
      &from));
}

void Texture::MergeFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.mipmaps() != 0) {
    _internal_set_mipmaps(from._internal_mipmaps());
  }
  if (from.alpha() != 0) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (from.gamma() != 0) {
    _internal_set_gamma(from._internal_gamma());
  }
}

void Texture::CopyFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Texture::IsInitialized() const {
  return true;
}

void Texture::InternalSwap(Texture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(mipmaps_, other->mipmaps_);
  swap(alpha_, other->alpha_);
  swap(gamma_, other->gamma_);
}

std::string Texture::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Texture";
}


// ===================================================================

void AnimTextureSimple::InitAsDefaultInstance() {
}
class AnimTextureSimple::_Internal {
 public:
};

AnimTextureSimple::AnimTextureSimple()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
}
AnimTextureSimple::AnimTextureSimple(const AnimTextureSimple& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_name().empty()) {
    base_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_name_);
  }
  ::memcpy(&num_frames_, &from.num_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&num_frames_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
}

void AnimTextureSimple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimTextureSimple_MaterialScriptObject_2eproto.base);
  base_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&num_frames_)) + sizeof(duration_));
}

AnimTextureSimple::~AnimTextureSimple() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
  SharedDtor();
}

void AnimTextureSimple::SharedDtor() {
  base_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnimTextureSimple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimTextureSimple& AnimTextureSimple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimTextureSimple_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void AnimTextureSimple::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&num_frames_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

const char* AnimTextureSimple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string base_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_base_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimTextureSimple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string base_name = 1;
  if (this->base_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_name().data(), static_cast<int>(this->_internal_base_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.AnimTextureSimple.base_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_base_name(), target);
  }

  // uint32 num_frames = 2;
  if (this->num_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_frames(), target);
  }

  // float duration = 3;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
  return target;
}

size_t AnimTextureSimple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_name = 1;
  if (this->base_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_name());
  }

  // uint32 num_frames = 2;
  if (this->num_frames() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_frames());
  }

  // float duration = 3;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimTextureSimple::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AnimTextureSimple*>(
      &from));
}

void AnimTextureSimple::MergeFrom(const AnimTextureSimple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_name().size() > 0) {

    base_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_name_);
  }
  if (from.num_frames() != 0) {
    _internal_set_num_frames(from._internal_num_frames());
  }
  if (!(from.duration() <= 0 && from.duration() >= 0)) {
    _internal_set_duration(from._internal_duration());
  }
}

void AnimTextureSimple::CopyFrom(const AnimTextureSimple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.AnimTextureSimple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimTextureSimple::IsInitialized() const {
  return true;
}

void AnimTextureSimple::InternalSwap(AnimTextureSimple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  base_name_.Swap(&other->base_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_frames_, other->num_frames_);
  swap(duration_, other->duration_);
}

std::string AnimTextureSimple::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.AnimTextureSimple";
}


// ===================================================================

void AnimTextureComplex::InitAsDefaultInstance() {
}
class AnimTextureComplex::_Internal {
 public:
};

AnimTextureComplex::AnimTextureComplex()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
}
AnimTextureComplex::AnimTextureComplex(const AnimTextureComplex& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
}

void AnimTextureComplex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimTextureComplex_MaterialScriptObject_2eproto.base);
  duration_ = 0;
}

AnimTextureComplex::~AnimTextureComplex() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
  SharedDtor();
}

void AnimTextureComplex::SharedDtor() {
}

void AnimTextureComplex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimTextureComplex& AnimTextureComplex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimTextureComplex_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void AnimTextureComplex::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  duration_ = 0;
  _internal_metadata_.Clear();
}

const char* AnimTextureComplex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_frames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimTextureComplex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float duration = 1;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_duration(), target);
  }

  // repeated string frames = 2;
  for (int i = 0, n = this->_internal_frames_size(); i < n; i++) {
    const auto& s = this->_internal_frames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.AnimTextureComplex.frames");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
  return target;
}

size_t AnimTextureComplex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string frames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(frames_.size());
  for (int i = 0, n = frames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      frames_.Get(i));
  }

  // float duration = 1;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimTextureComplex::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AnimTextureComplex*>(
      &from));
}

void AnimTextureComplex::MergeFrom(const AnimTextureComplex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (!(from.duration() <= 0 && from.duration() >= 0)) {
    _internal_set_duration(from._internal_duration());
  }
}

void AnimTextureComplex::CopyFrom(const AnimTextureComplex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.AnimTextureComplex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimTextureComplex::IsInitialized() const {
  return true;
}

void AnimTextureComplex::InternalSwap(AnimTextureComplex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  swap(duration_, other->duration_);
}

std::string AnimTextureComplex::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.AnimTextureComplex";
}


// ===================================================================

void AnimTexture::InitAsDefaultInstance() {
}
class AnimTexture::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::AnimTextureSimple& simple(const AnimTexture* msg);
  static const ::Tiny3D::Script::MaterialSystem::AnimTextureComplex& complex(const AnimTexture* msg);
};

const ::Tiny3D::Script::MaterialSystem::AnimTextureSimple&
AnimTexture::_Internal::simple(const AnimTexture* msg) {
  return *msg->AnimTextureOneOf_.simple_;
}
const ::Tiny3D::Script::MaterialSystem::AnimTextureComplex&
AnimTexture::_Internal::complex(const AnimTexture* msg) {
  return *msg->AnimTextureOneOf_.complex_;
}
void AnimTexture::set_allocated_simple(::Tiny3D::Script::MaterialSystem::AnimTextureSimple* simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_AnimTextureOneOf();
  if (simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple, submessage_arena);
    }
    set_has_simple();
    AnimTextureOneOf_.simple_ = simple;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.AnimTexture.simple)
}
void AnimTexture::set_allocated_complex(::Tiny3D::Script::MaterialSystem::AnimTextureComplex* complex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_AnimTextureOneOf();
  if (complex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      complex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, complex, submessage_arena);
    }
    set_has_complex();
    AnimTextureOneOf_.complex_ = complex;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.AnimTexture.complex)
}
AnimTexture::AnimTexture()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.AnimTexture)
}
AnimTexture::AnimTexture(const AnimTexture& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_AnimTextureOneOf();
  switch (from.AnimTextureOneOf_case()) {
    case kSimple: {
      _internal_mutable_simple()->::Tiny3D::Script::MaterialSystem::AnimTextureSimple::MergeFrom(from._internal_simple());
      break;
    }
    case kComplex: {
      _internal_mutable_complex()->::Tiny3D::Script::MaterialSystem::AnimTextureComplex::MergeFrom(from._internal_complex());
      break;
    }
    case ANIMTEXTUREONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.AnimTexture)
}

void AnimTexture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimTexture_MaterialScriptObject_2eproto.base);
  clear_has_AnimTextureOneOf();
}

AnimTexture::~AnimTexture() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.AnimTexture)
  SharedDtor();
}

void AnimTexture::SharedDtor() {
  if (has_AnimTextureOneOf()) {
    clear_AnimTextureOneOf();
  }
}

void AnimTexture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimTexture& AnimTexture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimTexture_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void AnimTexture::clear_AnimTextureOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.AnimTexture)
  switch (AnimTextureOneOf_case()) {
    case kSimple: {
      delete AnimTextureOneOf_.simple_;
      break;
    }
    case kComplex: {
      delete AnimTextureOneOf_.complex_;
      break;
    }
    case ANIMTEXTUREONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ANIMTEXTUREONEOF_NOT_SET;
}


void AnimTexture::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.AnimTexture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_AnimTextureOneOf();
  _internal_metadata_.Clear();
}

const char* AnimTexture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.AnimTextureSimple simple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.AnimTextureComplex complex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_complex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimTexture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.AnimTexture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.AnimTextureSimple simple = 1;
  if (_internal_has_simple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simple(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.AnimTextureComplex complex = 2;
  if (_internal_has_complex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::complex(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.AnimTexture)
  return target;
}

size_t AnimTexture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.AnimTexture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (AnimTextureOneOf_case()) {
    // .Tiny3D.Script.MaterialSystem.AnimTextureSimple simple = 1;
    case kSimple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AnimTextureOneOf_.simple_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.AnimTextureComplex complex = 2;
    case kComplex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AnimTextureOneOf_.complex_);
      break;
    }
    case ANIMTEXTUREONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimTexture::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AnimTexture*>(
      &from));
}

void AnimTexture::MergeFrom(const AnimTexture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.AnimTexture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.AnimTextureOneOf_case()) {
    case kSimple: {
      _internal_mutable_simple()->::Tiny3D::Script::MaterialSystem::AnimTextureSimple::MergeFrom(from._internal_simple());
      break;
    }
    case kComplex: {
      _internal_mutable_complex()->::Tiny3D::Script::MaterialSystem::AnimTextureComplex::MergeFrom(from._internal_complex());
      break;
    }
    case ANIMTEXTUREONEOF_NOT_SET: {
      break;
    }
  }
}

void AnimTexture::CopyFrom(const AnimTexture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.AnimTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimTexture::IsInitialized() const {
  return true;
}

void AnimTexture::InternalSwap(AnimTexture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(AnimTextureOneOf_, other->AnimTextureOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string AnimTexture::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.AnimTexture";
}


// ===================================================================

void CubicTextureSimple::InitAsDefaultInstance() {
}
class CubicTextureSimple::_Internal {
 public:
};

CubicTextureSimple::CubicTextureSimple()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
}
CubicTextureSimple::CubicTextureSimple(const CubicTextureSimple& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_name().empty()) {
    base_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_name_);
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
}

void CubicTextureSimple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CubicTextureSimple_MaterialScriptObject_2eproto.base);
  base_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CubicTextureSimple::~CubicTextureSimple() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
  SharedDtor();
}

void CubicTextureSimple::SharedDtor() {
  base_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CubicTextureSimple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CubicTextureSimple& CubicTextureSimple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CubicTextureSimple_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void CubicTextureSimple::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CubicTextureSimple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string base_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_base_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CubicTextureSimple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string base_name = 1;
  if (this->base_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_name().data(), static_cast<int>(this->_internal_base_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.CubicTextureSimple.base_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_base_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
  return target;
}

size_t CubicTextureSimple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_name = 1;
  if (this->base_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CubicTextureSimple::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CubicTextureSimple*>(
      &from));
}

void CubicTextureSimple::MergeFrom(const CubicTextureSimple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_name().size() > 0) {

    base_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_name_);
  }
}

void CubicTextureSimple::CopyFrom(const CubicTextureSimple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.CubicTextureSimple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CubicTextureSimple::IsInitialized() const {
  return true;
}

void CubicTextureSimple::InternalSwap(CubicTextureSimple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  base_name_.Swap(&other->base_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string CubicTextureSimple::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.CubicTextureSimple";
}


// ===================================================================

void CubicTextureComplex::InitAsDefaultInstance() {
}
class CubicTextureComplex::_Internal {
 public:
};

CubicTextureComplex::CubicTextureComplex()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
}
CubicTextureComplex::CubicTextureComplex(const CubicTextureComplex& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  front_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_front().empty()) {
    front_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.front_);
  }
  back_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_back().empty()) {
    back_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.back_);
  }
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_left().empty()) {
    left_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.left_);
  }
  right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_right().empty()) {
    right_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.right_);
  }
  up_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_up().empty()) {
    up_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.up_);
  }
  down_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_down().empty()) {
    down_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.down_);
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
}

void CubicTextureComplex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CubicTextureComplex_MaterialScriptObject_2eproto.base);
  front_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  back_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CubicTextureComplex::~CubicTextureComplex() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
  SharedDtor();
}

void CubicTextureComplex::SharedDtor() {
  front_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  back_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  right_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CubicTextureComplex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CubicTextureComplex& CubicTextureComplex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CubicTextureComplex_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void CubicTextureComplex::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  front_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  back_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  right_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CubicTextureComplex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string front = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_front();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string back = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_back();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_right();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string up = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_up();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string down = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_down();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CubicTextureComplex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string front = 1;
  if (this->front().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_front().data(), static_cast<int>(this->_internal_front().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.CubicTextureComplex.front");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_front(), target);
  }

  // string back = 2;
  if (this->back().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_back().data(), static_cast<int>(this->_internal_back().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.CubicTextureComplex.back");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_back(), target);
  }

  // string left = 3;
  if (this->left().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_left().data(), static_cast<int>(this->_internal_left().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.CubicTextureComplex.left");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_left(), target);
  }

  // string right = 4;
  if (this->right().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_right().data(), static_cast<int>(this->_internal_right().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.CubicTextureComplex.right");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_right(), target);
  }

  // string up = 5;
  if (this->up().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_up().data(), static_cast<int>(this->_internal_up().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.CubicTextureComplex.up");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_up(), target);
  }

  // string down = 6;
  if (this->down().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_down().data(), static_cast<int>(this->_internal_down().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.CubicTextureComplex.down");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
  return target;
}

size_t CubicTextureComplex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string front = 1;
  if (this->front().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_front());
  }

  // string back = 2;
  if (this->back().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_back());
  }

  // string left = 3;
  if (this->left().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_left());
  }

  // string right = 4;
  if (this->right().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_right());
  }

  // string up = 5;
  if (this->up().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_up());
  }

  // string down = 6;
  if (this->down().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_down());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CubicTextureComplex::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CubicTextureComplex*>(
      &from));
}

void CubicTextureComplex::MergeFrom(const CubicTextureComplex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.front().size() > 0) {

    front_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.front_);
  }
  if (from.back().size() > 0) {

    back_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.back_);
  }
  if (from.left().size() > 0) {

    left_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.left_);
  }
  if (from.right().size() > 0) {

    right_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.right_);
  }
  if (from.up().size() > 0) {

    up_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.up_);
  }
  if (from.down().size() > 0) {

    down_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.down_);
  }
}

void CubicTextureComplex::CopyFrom(const CubicTextureComplex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.CubicTextureComplex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CubicTextureComplex::IsInitialized() const {
  return true;
}

void CubicTextureComplex::InternalSwap(CubicTextureComplex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  front_.Swap(&other->front_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  back_.Swap(&other->back_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  left_.Swap(&other->left_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  right_.Swap(&other->right_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  up_.Swap(&other->up_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  down_.Swap(&other->down_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string CubicTextureComplex::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.CubicTextureComplex";
}


// ===================================================================

void CubicTexture::InitAsDefaultInstance() {
}
class CubicTexture::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::CubicTextureSimple& simple(const CubicTexture* msg);
  static const ::Tiny3D::Script::MaterialSystem::CubicTextureComplex& complex(const CubicTexture* msg);
};

const ::Tiny3D::Script::MaterialSystem::CubicTextureSimple&
CubicTexture::_Internal::simple(const CubicTexture* msg) {
  return *msg->CubicTextureOneOf_.simple_;
}
const ::Tiny3D::Script::MaterialSystem::CubicTextureComplex&
CubicTexture::_Internal::complex(const CubicTexture* msg) {
  return *msg->CubicTextureOneOf_.complex_;
}
void CubicTexture::set_allocated_simple(::Tiny3D::Script::MaterialSystem::CubicTextureSimple* simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CubicTextureOneOf();
  if (simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple, submessage_arena);
    }
    set_has_simple();
    CubicTextureOneOf_.simple_ = simple;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.CubicTexture.simple)
}
void CubicTexture::set_allocated_complex(::Tiny3D::Script::MaterialSystem::CubicTextureComplex* complex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CubicTextureOneOf();
  if (complex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      complex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, complex, submessage_arena);
    }
    set_has_complex();
    CubicTextureOneOf_.complex_ = complex;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.CubicTexture.complex)
}
CubicTexture::CubicTexture()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.CubicTexture)
}
CubicTexture::CubicTexture(const CubicTexture& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cubic_texture_mode_ = from.cubic_texture_mode_;
  clear_has_CubicTextureOneOf();
  switch (from.CubicTextureOneOf_case()) {
    case kSimple: {
      _internal_mutable_simple()->::Tiny3D::Script::MaterialSystem::CubicTextureSimple::MergeFrom(from._internal_simple());
      break;
    }
    case kComplex: {
      _internal_mutable_complex()->::Tiny3D::Script::MaterialSystem::CubicTextureComplex::MergeFrom(from._internal_complex());
      break;
    }
    case CUBICTEXTUREONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.CubicTexture)
}

void CubicTexture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CubicTexture_MaterialScriptObject_2eproto.base);
  cubic_texture_mode_ = 0;
  clear_has_CubicTextureOneOf();
}

CubicTexture::~CubicTexture() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.CubicTexture)
  SharedDtor();
}

void CubicTexture::SharedDtor() {
  if (has_CubicTextureOneOf()) {
    clear_CubicTextureOneOf();
  }
}

void CubicTexture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CubicTexture& CubicTexture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CubicTexture_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void CubicTexture::clear_CubicTextureOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.CubicTexture)
  switch (CubicTextureOneOf_case()) {
    case kSimple: {
      delete CubicTextureOneOf_.simple_;
      break;
    }
    case kComplex: {
      delete CubicTextureOneOf_.complex_;
      break;
    }
    case CUBICTEXTUREONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUBICTEXTUREONEOF_NOT_SET;
}


void CubicTexture::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.CubicTexture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cubic_texture_mode_ = 0;
  clear_CubicTextureOneOf();
  _internal_metadata_.Clear();
}

const char* CubicTexture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.CubicTextureSimple simple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CubicTextureComplex complex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_complex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CubicTextureMode cubic_texture_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cubic_texture_mode(static_cast<::Tiny3D::Script::MaterialSystem::CubicTextureMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CubicTexture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.CubicTexture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CubicTextureSimple simple = 1;
  if (_internal_has_simple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simple(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.CubicTextureComplex complex = 2;
  if (_internal_has_complex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::complex(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.CubicTextureMode cubic_texture_mode = 3;
  if (this->cubic_texture_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_cubic_texture_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.CubicTexture)
  return target;
}

size_t CubicTexture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.CubicTexture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CubicTextureMode cubic_texture_mode = 3;
  if (this->cubic_texture_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cubic_texture_mode());
  }

  switch (CubicTextureOneOf_case()) {
    // .Tiny3D.Script.MaterialSystem.CubicTextureSimple simple = 1;
    case kSimple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CubicTextureOneOf_.simple_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.CubicTextureComplex complex = 2;
    case kComplex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CubicTextureOneOf_.complex_);
      break;
    }
    case CUBICTEXTUREONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CubicTexture::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CubicTexture*>(
      &from));
}

void CubicTexture::MergeFrom(const CubicTexture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.CubicTexture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cubic_texture_mode() != 0) {
    _internal_set_cubic_texture_mode(from._internal_cubic_texture_mode());
  }
  switch (from.CubicTextureOneOf_case()) {
    case kSimple: {
      _internal_mutable_simple()->::Tiny3D::Script::MaterialSystem::CubicTextureSimple::MergeFrom(from._internal_simple());
      break;
    }
    case kComplex: {
      _internal_mutable_complex()->::Tiny3D::Script::MaterialSystem::CubicTextureComplex::MergeFrom(from._internal_complex());
      break;
    }
    case CUBICTEXTUREONEOF_NOT_SET: {
      break;
    }
  }
}

void CubicTexture::CopyFrom(const CubicTexture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.CubicTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CubicTexture::IsInitialized() const {
  return true;
}

void CubicTexture::InternalSwap(CubicTexture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cubic_texture_mode_, other->cubic_texture_mode_);
  swap(CubicTextureOneOf_, other->CubicTextureOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string CubicTexture::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.CubicTexture";
}


// ===================================================================

void Binding::InitAsDefaultInstance() {
}
class Binding::_Internal {
 public:
};

Binding::Binding()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Binding)
}
Binding::Binding(const Binding& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Binding)
}

void Binding::SharedCtor() {
  value_ = 0;
}

Binding::~Binding() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Binding)
  SharedDtor();
}

void Binding::SharedDtor() {
}

void Binding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Binding& Binding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Binding_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Binding::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Binding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Binding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BindingType value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::BindingType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Binding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Binding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BindingType value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Binding)
  return target;
}

size_t Binding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Binding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BindingType value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Binding::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Binding*>(
      &from));
}

void Binding::MergeFrom(const Binding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Binding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Binding::CopyFrom(const Binding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Binding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Binding::IsInitialized() const {
  return true;
}

void Binding::InternalSwap(Binding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string Binding::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Binding";
}


// ===================================================================

void ColorOp::InitAsDefaultInstance() {
}
class ColorOp::_Internal {
 public:
};

ColorOp::ColorOp()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.ColorOp)
}
ColorOp::ColorOp(const ColorOp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.ColorOp)
}

void ColorOp::SharedCtor() {
  value_ = 0;
}

ColorOp::~ColorOp() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.ColorOp)
  SharedDtor();
}

void ColorOp::SharedDtor() {
}

void ColorOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorOp& ColorOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorOp_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ColorOp::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.ColorOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* ColorOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendType value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::BlendType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.ColorOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendType value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.ColorOp)
  return target;
}

size_t ColorOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.ColorOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendType value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorOp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ColorOp*>(
      &from));
}

void ColorOp::MergeFrom(const ColorOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.ColorOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void ColorOp::CopyFrom(const ColorOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.ColorOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorOp::IsInitialized() const {
  return true;
}

void ColorOp::InternalSwap(ColorOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string ColorOp::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.ColorOp";
}


// ===================================================================

void TextureUnit::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->texture_alias_ = const_cast< ::Tiny3D::Script::MaterialSystem::String*>(
      ::Tiny3D::Script::MaterialSystem::String::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->texture_ = const_cast< ::Tiny3D::Script::MaterialSystem::Texture*>(
      ::Tiny3D::Script::MaterialSystem::Texture::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->anim_texture_ = const_cast< ::Tiny3D::Script::MaterialSystem::AnimTexture*>(
      ::Tiny3D::Script::MaterialSystem::AnimTexture::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->cubic_texture_ = const_cast< ::Tiny3D::Script::MaterialSystem::CubicTexture*>(
      ::Tiny3D::Script::MaterialSystem::CubicTexture::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->binding_type_ = const_cast< ::Tiny3D::Script::MaterialSystem::Binding*>(
      ::Tiny3D::Script::MaterialSystem::Binding::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->tex_coord_set_ = const_cast< ::Tiny3D::Script::MaterialSystem::UInt32*>(
      ::Tiny3D::Script::MaterialSystem::UInt32::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->color_op_ = const_cast< ::Tiny3D::Script::MaterialSystem::ColorOp*>(
      ::Tiny3D::Script::MaterialSystem::ColorOp::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_TextureUnit_default_instance_._instance.get_mutable()->sampler_ref_ = const_cast< ::Tiny3D::Script::MaterialSystem::String*>(
      ::Tiny3D::Script::MaterialSystem::String::internal_default_instance());
}
class TextureUnit::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const TextureUnit* msg);
  static const ::Tiny3D::Script::MaterialSystem::String& texture_alias(const TextureUnit* msg);
  static const ::Tiny3D::Script::MaterialSystem::Texture& texture(const TextureUnit* msg);
  static const ::Tiny3D::Script::MaterialSystem::AnimTexture& anim_texture(const TextureUnit* msg);
  static const ::Tiny3D::Script::MaterialSystem::CubicTexture& cubic_texture(const TextureUnit* msg);
  static const ::Tiny3D::Script::MaterialSystem::Binding& binding_type(const TextureUnit* msg);
  static const ::Tiny3D::Script::MaterialSystem::UInt32& tex_coord_set(const TextureUnit* msg);
  static const ::Tiny3D::Script::MaterialSystem::ColorOp& color_op(const TextureUnit* msg);
  static const ::Tiny3D::Script::MaterialSystem::String& sampler_ref(const TextureUnit* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
TextureUnit::_Internal::header(const TextureUnit* msg) {
  return *msg->header_;
}
const ::Tiny3D::Script::MaterialSystem::String&
TextureUnit::_Internal::texture_alias(const TextureUnit* msg) {
  return *msg->texture_alias_;
}
const ::Tiny3D::Script::MaterialSystem::Texture&
TextureUnit::_Internal::texture(const TextureUnit* msg) {
  return *msg->texture_;
}
const ::Tiny3D::Script::MaterialSystem::AnimTexture&
TextureUnit::_Internal::anim_texture(const TextureUnit* msg) {
  return *msg->anim_texture_;
}
const ::Tiny3D::Script::MaterialSystem::CubicTexture&
TextureUnit::_Internal::cubic_texture(const TextureUnit* msg) {
  return *msg->cubic_texture_;
}
const ::Tiny3D::Script::MaterialSystem::Binding&
TextureUnit::_Internal::binding_type(const TextureUnit* msg) {
  return *msg->binding_type_;
}
const ::Tiny3D::Script::MaterialSystem::UInt32&
TextureUnit::_Internal::tex_coord_set(const TextureUnit* msg) {
  return *msg->tex_coord_set_;
}
const ::Tiny3D::Script::MaterialSystem::ColorOp&
TextureUnit::_Internal::color_op(const TextureUnit* msg) {
  return *msg->color_op_;
}
const ::Tiny3D::Script::MaterialSystem::String&
TextureUnit::_Internal::sampler_ref(const TextureUnit* msg) {
  return *msg->sampler_ref_;
}
TextureUnit::TextureUnit()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TextureUnit)
}
TextureUnit::TextureUnit(const TextureUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_texture_alias()) {
    texture_alias_ = new ::Tiny3D::Script::MaterialSystem::String(*from.texture_alias_);
  } else {
    texture_alias_ = nullptr;
  }
  if (from._internal_has_texture()) {
    texture_ = new ::Tiny3D::Script::MaterialSystem::Texture(*from.texture_);
  } else {
    texture_ = nullptr;
  }
  if (from._internal_has_anim_texture()) {
    anim_texture_ = new ::Tiny3D::Script::MaterialSystem::AnimTexture(*from.anim_texture_);
  } else {
    anim_texture_ = nullptr;
  }
  if (from._internal_has_cubic_texture()) {
    cubic_texture_ = new ::Tiny3D::Script::MaterialSystem::CubicTexture(*from.cubic_texture_);
  } else {
    cubic_texture_ = nullptr;
  }
  if (from._internal_has_binding_type()) {
    binding_type_ = new ::Tiny3D::Script::MaterialSystem::Binding(*from.binding_type_);
  } else {
    binding_type_ = nullptr;
  }
  if (from._internal_has_tex_coord_set()) {
    tex_coord_set_ = new ::Tiny3D::Script::MaterialSystem::UInt32(*from.tex_coord_set_);
  } else {
    tex_coord_set_ = nullptr;
  }
  if (from._internal_has_color_op()) {
    color_op_ = new ::Tiny3D::Script::MaterialSystem::ColorOp(*from.color_op_);
  } else {
    color_op_ = nullptr;
  }
  if (from._internal_has_sampler_ref()) {
    sampler_ref_ = new ::Tiny3D::Script::MaterialSystem::String(*from.sampler_ref_);
  } else {
    sampler_ref_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TextureUnit)
}

void TextureUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextureUnit_MaterialScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampler_ref_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sampler_ref_));
}

TextureUnit::~TextureUnit() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TextureUnit)
  SharedDtor();
}

void TextureUnit::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete texture_alias_;
  if (this != internal_default_instance()) delete texture_;
  if (this != internal_default_instance()) delete anim_texture_;
  if (this != internal_default_instance()) delete cubic_texture_;
  if (this != internal_default_instance()) delete binding_type_;
  if (this != internal_default_instance()) delete tex_coord_set_;
  if (this != internal_default_instance()) delete color_op_;
  if (this != internal_default_instance()) delete sampler_ref_;
}

void TextureUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextureUnit& TextureUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextureUnit_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TextureUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TextureUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && texture_alias_ != nullptr) {
    delete texture_alias_;
  }
  texture_alias_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && texture_ != nullptr) {
    delete texture_;
  }
  texture_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && anim_texture_ != nullptr) {
    delete anim_texture_;
  }
  anim_texture_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cubic_texture_ != nullptr) {
    delete cubic_texture_;
  }
  cubic_texture_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && binding_type_ != nullptr) {
    delete binding_type_;
  }
  binding_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tex_coord_set_ != nullptr) {
    delete tex_coord_set_;
  }
  tex_coord_set_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_op_ != nullptr) {
    delete color_op_;
  }
  color_op_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sampler_ref_ != nullptr) {
    delete sampler_ref_;
  }
  sampler_ref_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TextureUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.String texture_alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture_alias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Texture texture = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.AnimTexture anim_texture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_anim_texture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CubicTexture cubic_texture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cubic_texture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Binding binding_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_binding_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.UInt32 tex_coord_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tex_coord_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.ColorOp color_op = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.String sampler_ref = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampler_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextureUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TextureUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.String texture_alias = 2;
  if (this->has_texture_alias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::texture_alias(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Texture texture = 3;
  if (this->has_texture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::texture(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.AnimTexture anim_texture = 4;
  if (this->has_anim_texture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::anim_texture(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.CubicTexture cubic_texture = 5;
  if (this->has_cubic_texture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cubic_texture(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Binding binding_type = 6;
  if (this->has_binding_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::binding_type(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 tex_coord_set = 7;
  if (this->has_tex_coord_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tex_coord_set(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.ColorOp color_op = 8;
  if (this->has_color_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::color_op(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.String sampler_ref = 9;
  if (this->has_sampler_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sampler_ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TextureUnit)
  return target;
}

size_t TextureUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TextureUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Tiny3D.Script.MaterialSystem.String texture_alias = 2;
  if (this->has_texture_alias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texture_alias_);
  }

  // .Tiny3D.Script.MaterialSystem.Texture texture = 3;
  if (this->has_texture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texture_);
  }

  // .Tiny3D.Script.MaterialSystem.AnimTexture anim_texture = 4;
  if (this->has_anim_texture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anim_texture_);
  }

  // .Tiny3D.Script.MaterialSystem.CubicTexture cubic_texture = 5;
  if (this->has_cubic_texture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cubic_texture_);
  }

  // .Tiny3D.Script.MaterialSystem.Binding binding_type = 6;
  if (this->has_binding_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *binding_type_);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 tex_coord_set = 7;
  if (this->has_tex_coord_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tex_coord_set_);
  }

  // .Tiny3D.Script.MaterialSystem.ColorOp color_op = 8;
  if (this->has_color_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_op_);
  }

  // .Tiny3D.Script.MaterialSystem.String sampler_ref = 9;
  if (this->has_sampler_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sampler_ref_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextureUnit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TextureUnit*>(
      &from));
}

void TextureUnit::MergeFrom(const TextureUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TextureUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.has_texture_alias()) {
    _internal_mutable_texture_alias()->::Tiny3D::Script::MaterialSystem::String::MergeFrom(from._internal_texture_alias());
  }
  if (from.has_texture()) {
    _internal_mutable_texture()->::Tiny3D::Script::MaterialSystem::Texture::MergeFrom(from._internal_texture());
  }
  if (from.has_anim_texture()) {
    _internal_mutable_anim_texture()->::Tiny3D::Script::MaterialSystem::AnimTexture::MergeFrom(from._internal_anim_texture());
  }
  if (from.has_cubic_texture()) {
    _internal_mutable_cubic_texture()->::Tiny3D::Script::MaterialSystem::CubicTexture::MergeFrom(from._internal_cubic_texture());
  }
  if (from.has_binding_type()) {
    _internal_mutable_binding_type()->::Tiny3D::Script::MaterialSystem::Binding::MergeFrom(from._internal_binding_type());
  }
  if (from.has_tex_coord_set()) {
    _internal_mutable_tex_coord_set()->::Tiny3D::Script::MaterialSystem::UInt32::MergeFrom(from._internal_tex_coord_set());
  }
  if (from.has_color_op()) {
    _internal_mutable_color_op()->::Tiny3D::Script::MaterialSystem::ColorOp::MergeFrom(from._internal_color_op());
  }
  if (from.has_sampler_ref()) {
    _internal_mutable_sampler_ref()->::Tiny3D::Script::MaterialSystem::String::MergeFrom(from._internal_sampler_ref());
  }
}

void TextureUnit::CopyFrom(const TextureUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TextureUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureUnit::IsInitialized() const {
  return true;
}

void TextureUnit::InternalSwap(TextureUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(texture_alias_, other->texture_alias_);
  swap(texture_, other->texture_);
  swap(anim_texture_, other->anim_texture_);
  swap(cubic_texture_, other->cubic_texture_);
  swap(binding_type_, other->binding_type_);
  swap(tex_coord_set_, other->tex_coord_set_);
  swap(color_op_, other->color_op_);
  swap(sampler_ref_, other->sampler_ref_);
}

std::string TextureUnit::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.TextureUnit";
}


// ===================================================================

void LightColor::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_._instance.get_mutable()->color_ = const_cast< ::Tiny3D::Script::MaterialSystem::Color*>(
      ::Tiny3D::Script::MaterialSystem::Color::internal_default_instance());
}
class LightColor::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Color& color(const LightColor* msg);
};

const ::Tiny3D::Script::MaterialSystem::Color&
LightColor::_Internal::color(const LightColor* msg) {
  return *msg->color_;
}
LightColor::LightColor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.LightColor)
}
LightColor::LightColor(const LightColor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::Tiny3D::Script::MaterialSystem::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  vertex_color_ = from.vertex_color_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.LightColor)
}

void LightColor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LightColor_MaterialScriptObject_2eproto.base);
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertex_color_) -
      reinterpret_cast<char*>(&color_)) + sizeof(vertex_color_));
}

LightColor::~LightColor() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.LightColor)
  SharedDtor();
}

void LightColor::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void LightColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightColor& LightColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightColor_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void LightColor::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.LightColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  vertex_color_ = false;
  _internal_metadata_.Clear();
}

const char* LightColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vertex_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vertex_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.LightColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Color color = 1;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  // bool vertex_color = 2;
  if (this->vertex_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vertex_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.LightColor)
  return target;
}

size_t LightColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.LightColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Color color = 1;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // bool vertex_color = 2;
  if (this->vertex_color() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightColor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LightColor*>(
      &from));
}

void LightColor::MergeFrom(const LightColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.LightColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color()) {
    _internal_mutable_color()->::Tiny3D::Script::MaterialSystem::Color::MergeFrom(from._internal_color());
  }
  if (from.vertex_color() != 0) {
    _internal_set_vertex_color(from._internal_vertex_color());
  }
}

void LightColor::CopyFrom(const LightColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.LightColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightColor::IsInitialized() const {
  return true;
}

void LightColor::InternalSwap(LightColor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_, other->color_);
  swap(vertex_color_, other->vertex_color_);
}

std::string LightColor::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.LightColor";
}


// ===================================================================

void BlendSceneFactor::InitAsDefaultInstance() {
}
class BlendSceneFactor::_Internal {
 public:
};

BlendSceneFactor::BlendSceneFactor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
}
BlendSceneFactor::BlendSceneFactor(const BlendSceneFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&src_factor_, &from.src_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&dest_factor_) -
    reinterpret_cast<char*>(&src_factor_)) + sizeof(dest_factor_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
}

void BlendSceneFactor::SharedCtor() {
  ::memset(&src_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_factor_) -
      reinterpret_cast<char*>(&src_factor_)) + sizeof(dest_factor_));
}

BlendSceneFactor::~BlendSceneFactor() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  SharedDtor();
}

void BlendSceneFactor::SharedDtor() {
}

void BlendSceneFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlendSceneFactor& BlendSceneFactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlendSceneFactor_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void BlendSceneFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&src_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_factor_) -
      reinterpret_cast<char*>(&src_factor_)) + sizeof(dest_factor_));
  _internal_metadata_.Clear();
}

const char* BlendSceneFactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendFactor src_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_src_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendFactor dest_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dest_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlendSceneFactor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendFactor src_factor = 1;
  if (this->src_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_src_factor(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor dest_factor = 2;
  if (this->dest_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dest_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  return target;
}

size_t BlendSceneFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendFactor src_factor = 1;
  if (this->src_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_src_factor());
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor dest_factor = 2;
  if (this->dest_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dest_factor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlendSceneFactor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BlendSceneFactor*>(
      &from));
}

void BlendSceneFactor::MergeFrom(const BlendSceneFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_factor() != 0) {
    _internal_set_src_factor(from._internal_src_factor());
  }
  if (from.dest_factor() != 0) {
    _internal_set_dest_factor(from._internal_dest_factor());
  }
}

void BlendSceneFactor::CopyFrom(const BlendSceneFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendSceneFactor::IsInitialized() const {
  return true;
}

void BlendSceneFactor::InternalSwap(BlendSceneFactor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(src_factor_, other->src_factor_);
  swap(dest_factor_, other->dest_factor_);
}

std::string BlendSceneFactor::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.BlendSceneFactor";
}


// ===================================================================

void BlendScene::InitAsDefaultInstance() {
}
class BlendScene::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor& blend_factor(const BlendScene* msg);
};

const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor&
BlendScene::_Internal::blend_factor(const BlendScene* msg) {
  return *msg->BlendSceneOneOf_.blend_factor_;
}
void BlendScene::set_allocated_blend_factor(::Tiny3D::Script::MaterialSystem::BlendSceneFactor* blend_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_BlendSceneOneOf();
  if (blend_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_factor, submessage_arena);
    }
    set_has_blend_factor();
    BlendSceneOneOf_.blend_factor_ = blend_factor;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.BlendScene.blend_factor)
}
BlendScene::BlendScene()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.BlendScene)
}
BlendScene::BlendScene(const BlendScene& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_BlendSceneOneOf();
  switch (from.BlendSceneOneOf_case()) {
    case kBlendType: {
      _internal_set_blend_type(from._internal_blend_type());
      break;
    }
    case kBlendFactor: {
      _internal_mutable_blend_factor()->::Tiny3D::Script::MaterialSystem::BlendSceneFactor::MergeFrom(from._internal_blend_factor());
      break;
    }
    case BLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.BlendScene)
}

void BlendScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlendScene_MaterialScriptObject_2eproto.base);
  clear_has_BlendSceneOneOf();
}

BlendScene::~BlendScene() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.BlendScene)
  SharedDtor();
}

void BlendScene::SharedDtor() {
  if (has_BlendSceneOneOf()) {
    clear_BlendSceneOneOf();
  }
}

void BlendScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlendScene& BlendScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlendScene_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void BlendScene::clear_BlendSceneOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.BlendScene)
  switch (BlendSceneOneOf_case()) {
    case kBlendType: {
      // No need to clear
      break;
    }
    case kBlendFactor: {
      delete BlendSceneOneOf_.blend_factor_;
      break;
    }
    case BLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BLENDSCENEONEOF_NOT_SET;
}


void BlendScene::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.BlendScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_BlendSceneOneOf();
  _internal_metadata_.Clear();
}

const char* BlendScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendType blend_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_blend_type(static_cast<::Tiny3D::Script::MaterialSystem::BlendType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendSceneFactor blend_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_factor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlendScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.BlendScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendType blend_type = 1;
  if (_internal_has_blend_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_blend_type(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendSceneFactor blend_factor = 2;
  if (_internal_has_blend_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::blend_factor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.BlendScene)
  return target;
}

size_t BlendScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.BlendScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (BlendSceneOneOf_case()) {
    // .Tiny3D.Script.MaterialSystem.BlendType blend_type = 1;
    case kBlendType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blend_type());
      break;
    }
    // .Tiny3D.Script.MaterialSystem.BlendSceneFactor blend_factor = 2;
    case kBlendFactor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *BlendSceneOneOf_.blend_factor_);
      break;
    }
    case BLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlendScene::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BlendScene*>(
      &from));
}

void BlendScene::MergeFrom(const BlendScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.BlendScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.BlendSceneOneOf_case()) {
    case kBlendType: {
      _internal_set_blend_type(from._internal_blend_type());
      break;
    }
    case kBlendFactor: {
      _internal_mutable_blend_factor()->::Tiny3D::Script::MaterialSystem::BlendSceneFactor::MergeFrom(from._internal_blend_factor());
      break;
    }
    case BLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
}

void BlendScene::CopyFrom(const BlendScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.BlendScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendScene::IsInitialized() const {
  return true;
}

void BlendScene::InternalSwap(BlendScene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(BlendSceneOneOf_, other->BlendSceneOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string BlendScene::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.BlendScene";
}


// ===================================================================

void SimpleBlendType::InitAsDefaultInstance() {
}
class SimpleBlendType::_Internal {
 public:
};

SimpleBlendType::SimpleBlendType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SimpleBlendType)
}
SimpleBlendType::SimpleBlendType(const SimpleBlendType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_blend_, &from.color_blend_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_blend_) -
    reinterpret_cast<char*>(&color_blend_)) + sizeof(alpha_blend_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SimpleBlendType)
}

void SimpleBlendType::SharedCtor() {
  ::memset(&color_blend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_blend_) -
      reinterpret_cast<char*>(&color_blend_)) + sizeof(alpha_blend_));
}

SimpleBlendType::~SimpleBlendType() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  SharedDtor();
}

void SimpleBlendType::SharedDtor() {
}

void SimpleBlendType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleBlendType& SimpleBlendType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleBlendType_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SimpleBlendType::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_blend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_blend_) -
      reinterpret_cast<char*>(&color_blend_)) + sizeof(alpha_blend_));
  _internal_metadata_.Clear();
}

const char* SimpleBlendType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendType color_blend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_blend(static_cast<::Tiny3D::Script::MaterialSystem::BlendType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendType alpha_blend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alpha_blend(static_cast<::Tiny3D::Script::MaterialSystem::BlendType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleBlendType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendType color_blend = 1;
  if (this->color_blend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color_blend(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendType alpha_blend = 2;
  if (this->alpha_blend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_alpha_blend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  return target;
}

size_t SimpleBlendType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendType color_blend = 1;
  if (this->color_blend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_blend());
  }

  // .Tiny3D.Script.MaterialSystem.BlendType alpha_blend = 2;
  if (this->alpha_blend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alpha_blend());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleBlendType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SimpleBlendType*>(
      &from));
}

void SimpleBlendType::MergeFrom(const SimpleBlendType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_blend() != 0) {
    _internal_set_color_blend(from._internal_color_blend());
  }
  if (from.alpha_blend() != 0) {
    _internal_set_alpha_blend(from._internal_alpha_blend());
  }
}

void SimpleBlendType::CopyFrom(const SimpleBlendType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleBlendType::IsInitialized() const {
  return true;
}

void SimpleBlendType::InternalSwap(SimpleBlendType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_blend_, other->color_blend_);
  swap(alpha_blend_, other->alpha_blend_);
}

std::string SimpleBlendType::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.SimpleBlendType";
}


// ===================================================================

void SimpleBlendSceneFactor::InitAsDefaultInstance() {
}
class SimpleBlendSceneFactor::_Internal {
 public:
};

SimpleBlendSceneFactor::SimpleBlendSceneFactor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
}
SimpleBlendSceneFactor::SimpleBlendSceneFactor(const SimpleBlendSceneFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_src_factor_, &from.color_src_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_dest_factor_) -
    reinterpret_cast<char*>(&color_src_factor_)) + sizeof(alpha_dest_factor_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
}

void SimpleBlendSceneFactor::SharedCtor() {
  ::memset(&color_src_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_dest_factor_) -
      reinterpret_cast<char*>(&color_src_factor_)) + sizeof(alpha_dest_factor_));
}

SimpleBlendSceneFactor::~SimpleBlendSceneFactor() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  SharedDtor();
}

void SimpleBlendSceneFactor::SharedDtor() {
}

void SimpleBlendSceneFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleBlendSceneFactor& SimpleBlendSceneFactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SimpleBlendSceneFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_src_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_dest_factor_) -
      reinterpret_cast<char*>(&color_src_factor_)) + sizeof(alpha_dest_factor_));
  _internal_metadata_.Clear();
}

const char* SimpleBlendSceneFactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendFactor color_src_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_src_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendFactor color_dest_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_dest_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_src_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alpha_src_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_dest_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alpha_dest_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleBlendSceneFactor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_src_factor = 1;
  if (this->color_src_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color_src_factor(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_dest_factor = 2;
  if (this->color_dest_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color_dest_factor(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_src_factor = 3;
  if (this->alpha_src_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_alpha_src_factor(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_dest_factor = 4;
  if (this->alpha_dest_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_alpha_dest_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  return target;
}

size_t SimpleBlendSceneFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_src_factor = 1;
  if (this->color_src_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_src_factor());
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_dest_factor = 2;
  if (this->color_dest_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_dest_factor());
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_src_factor = 3;
  if (this->alpha_src_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alpha_src_factor());
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_dest_factor = 4;
  if (this->alpha_dest_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alpha_dest_factor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleBlendSceneFactor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SimpleBlendSceneFactor*>(
      &from));
}

void SimpleBlendSceneFactor::MergeFrom(const SimpleBlendSceneFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_src_factor() != 0) {
    _internal_set_color_src_factor(from._internal_color_src_factor());
  }
  if (from.color_dest_factor() != 0) {
    _internal_set_color_dest_factor(from._internal_color_dest_factor());
  }
  if (from.alpha_src_factor() != 0) {
    _internal_set_alpha_src_factor(from._internal_alpha_src_factor());
  }
  if (from.alpha_dest_factor() != 0) {
    _internal_set_alpha_dest_factor(from._internal_alpha_dest_factor());
  }
}

void SimpleBlendSceneFactor::CopyFrom(const SimpleBlendSceneFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleBlendSceneFactor::IsInitialized() const {
  return true;
}

void SimpleBlendSceneFactor::InternalSwap(SimpleBlendSceneFactor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_src_factor_, other->color_src_factor_);
  swap(color_dest_factor_, other->color_dest_factor_);
  swap(alpha_src_factor_, other->alpha_src_factor_);
  swap(alpha_dest_factor_, other->alpha_dest_factor_);
}

std::string SimpleBlendSceneFactor::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor";
}


// ===================================================================

void SeparateBlendScene::InitAsDefaultInstance() {
}
class SeparateBlendScene::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::SimpleBlendType& blend_type(const SeparateBlendScene* msg);
  static const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor& blend_factor(const SeparateBlendScene* msg);
};

const ::Tiny3D::Script::MaterialSystem::SimpleBlendType&
SeparateBlendScene::_Internal::blend_type(const SeparateBlendScene* msg) {
  return *msg->SeparateBlendSceneOneOf_.blend_type_;
}
const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor&
SeparateBlendScene::_Internal::blend_factor(const SeparateBlendScene* msg) {
  return *msg->SeparateBlendSceneOneOf_.blend_factor_;
}
void SeparateBlendScene::set_allocated_blend_type(::Tiny3D::Script::MaterialSystem::SimpleBlendType* blend_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SeparateBlendSceneOneOf();
  if (blend_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_type, submessage_arena);
    }
    set_has_blend_type();
    SeparateBlendSceneOneOf_.blend_type_ = blend_type;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_type)
}
void SeparateBlendScene::set_allocated_blend_factor(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* blend_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SeparateBlendSceneOneOf();
  if (blend_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_factor, submessage_arena);
    }
    set_has_blend_factor();
    SeparateBlendSceneOneOf_.blend_factor_ = blend_factor;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_factor)
}
SeparateBlendScene::SeparateBlendScene()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
}
SeparateBlendScene::SeparateBlendScene(const SeparateBlendScene& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_SeparateBlendSceneOneOf();
  switch (from.SeparateBlendSceneOneOf_case()) {
    case kBlendType: {
      _internal_mutable_blend_type()->::Tiny3D::Script::MaterialSystem::SimpleBlendType::MergeFrom(from._internal_blend_type());
      break;
    }
    case kBlendFactor: {
      _internal_mutable_blend_factor()->::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor::MergeFrom(from._internal_blend_factor());
      break;
    }
    case SEPARATEBLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
}

void SeparateBlendScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeparateBlendScene_MaterialScriptObject_2eproto.base);
  clear_has_SeparateBlendSceneOneOf();
}

SeparateBlendScene::~SeparateBlendScene() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  SharedDtor();
}

void SeparateBlendScene::SharedDtor() {
  if (has_SeparateBlendSceneOneOf()) {
    clear_SeparateBlendSceneOneOf();
  }
}

void SeparateBlendScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeparateBlendScene& SeparateBlendScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeparateBlendScene_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SeparateBlendScene::clear_SeparateBlendSceneOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  switch (SeparateBlendSceneOneOf_case()) {
    case kBlendType: {
      delete SeparateBlendSceneOneOf_.blend_type_;
      break;
    }
    case kBlendFactor: {
      delete SeparateBlendSceneOneOf_.blend_factor_;
      break;
    }
    case SEPARATEBLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SEPARATEBLENDSCENEONEOF_NOT_SET;
}


void SeparateBlendScene::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_SeparateBlendSceneOneOf();
  _internal_metadata_.Clear();
}

const char* SeparateBlendScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.SimpleBlendType blend_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor blend_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_factor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeparateBlendScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.SimpleBlendType blend_type = 1;
  if (_internal_has_blend_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blend_type(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor blend_factor = 2;
  if (_internal_has_blend_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::blend_factor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  return target;
}

size_t SeparateBlendScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (SeparateBlendSceneOneOf_case()) {
    // .Tiny3D.Script.MaterialSystem.SimpleBlendType blend_type = 1;
    case kBlendType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SeparateBlendSceneOneOf_.blend_type_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor blend_factor = 2;
    case kBlendFactor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SeparateBlendSceneOneOf_.blend_factor_);
      break;
    }
    case SEPARATEBLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeparateBlendScene::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SeparateBlendScene*>(
      &from));
}

void SeparateBlendScene::MergeFrom(const SeparateBlendScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.SeparateBlendSceneOneOf_case()) {
    case kBlendType: {
      _internal_mutable_blend_type()->::Tiny3D::Script::MaterialSystem::SimpleBlendType::MergeFrom(from._internal_blend_type());
      break;
    }
    case kBlendFactor: {
      _internal_mutable_blend_factor()->::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor::MergeFrom(from._internal_blend_factor());
      break;
    }
    case SEPARATEBLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
}

void SeparateBlendScene::CopyFrom(const SeparateBlendScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeparateBlendScene::IsInitialized() const {
  return true;
}

void SeparateBlendScene::InternalSwap(SeparateBlendScene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(SeparateBlendSceneOneOf_, other->SeparateBlendSceneOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SeparateBlendScene::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.SeparateBlendScene";
}


// ===================================================================

void SceneBlendOperation::InitAsDefaultInstance() {
}
class SceneBlendOperation::_Internal {
 public:
};

SceneBlendOperation::SceneBlendOperation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
}
SceneBlendOperation::SceneBlendOperation(const SceneBlendOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
}

void SceneBlendOperation::SharedCtor() {
  value_ = 0;
}

SceneBlendOperation::~SceneBlendOperation() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
  SharedDtor();
}

void SceneBlendOperation::SharedDtor() {
}

void SceneBlendOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneBlendOperation& SceneBlendOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneBlendOperation_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SceneBlendOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* SceneBlendOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendOperation value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::BlendOperation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneBlendOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendOperation value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
  return target;
}

size_t SceneBlendOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendOperation value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneBlendOperation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SceneBlendOperation*>(
      &from));
}

void SceneBlendOperation::MergeFrom(const SceneBlendOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SceneBlendOperation::CopyFrom(const SceneBlendOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SceneBlendOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneBlendOperation::IsInitialized() const {
  return true;
}

void SceneBlendOperation::InternalSwap(SceneBlendOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string SceneBlendOperation::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.SceneBlendOperation";
}


// ===================================================================

void SeparateSceneBlendOperation::InitAsDefaultInstance() {
}
class SeparateSceneBlendOperation::_Internal {
 public:
};

SeparateSceneBlendOperation::SeparateSceneBlendOperation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
}
SeparateSceneBlendOperation::SeparateSceneBlendOperation(const SeparateSceneBlendOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_op_, &from.color_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_op_) -
    reinterpret_cast<char*>(&color_op_)) + sizeof(alpha_op_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
}

void SeparateSceneBlendOperation::SharedCtor() {
  ::memset(&color_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_op_) -
      reinterpret_cast<char*>(&color_op_)) + sizeof(alpha_op_));
}

SeparateSceneBlendOperation::~SeparateSceneBlendOperation() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  SharedDtor();
}

void SeparateSceneBlendOperation::SharedDtor() {
}

void SeparateSceneBlendOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeparateSceneBlendOperation& SeparateSceneBlendOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SeparateSceneBlendOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_op_) -
      reinterpret_cast<char*>(&color_op_)) + sizeof(alpha_op_));
  _internal_metadata_.Clear();
}

const char* SeparateSceneBlendOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendOperation color_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_op(static_cast<::Tiny3D::Script::MaterialSystem::BlendOperation>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendOperation alpha_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alpha_op(static_cast<::Tiny3D::Script::MaterialSystem::BlendOperation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeparateSceneBlendOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendOperation color_op = 1;
  if (this->color_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color_op(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendOperation alpha_op = 2;
  if (this->alpha_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_alpha_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  return target;
}

size_t SeparateSceneBlendOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendOperation color_op = 1;
  if (this->color_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_op());
  }

  // .Tiny3D.Script.MaterialSystem.BlendOperation alpha_op = 2;
  if (this->alpha_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alpha_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeparateSceneBlendOperation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SeparateSceneBlendOperation*>(
      &from));
}

void SeparateSceneBlendOperation::MergeFrom(const SeparateSceneBlendOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_op() != 0) {
    _internal_set_color_op(from._internal_color_op());
  }
  if (from.alpha_op() != 0) {
    _internal_set_alpha_op(from._internal_alpha_op());
  }
}

void SeparateSceneBlendOperation::CopyFrom(const SeparateSceneBlendOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeparateSceneBlendOperation::IsInitialized() const {
  return true;
}

void SeparateSceneBlendOperation::InternalSwap(SeparateSceneBlendOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_op_, other->color_op_);
  swap(alpha_op_, other->alpha_op_);
}

std::string SeparateSceneBlendOperation::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation";
}


// ===================================================================

void DepthBias::InitAsDefaultInstance() {
}
class DepthBias::_Internal {
 public:
};

DepthBias::DepthBias()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.DepthBias)
}
DepthBias::DepthBias(const DepthBias& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&constant_bias_, &from.constant_bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&slopescale_bias_) -
    reinterpret_cast<char*>(&constant_bias_)) + sizeof(slopescale_bias_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.DepthBias)
}

void DepthBias::SharedCtor() {
  ::memset(&constant_bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slopescale_bias_) -
      reinterpret_cast<char*>(&constant_bias_)) + sizeof(slopescale_bias_));
}

DepthBias::~DepthBias() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.DepthBias)
  SharedDtor();
}

void DepthBias::SharedDtor() {
}

void DepthBias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthBias& DepthBias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthBias_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void DepthBias::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.DepthBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&constant_bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slopescale_bias_) -
      reinterpret_cast<char*>(&constant_bias_)) + sizeof(slopescale_bias_));
  _internal_metadata_.Clear();
}

const char* DepthBias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float constant_bias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          constant_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float slopescale_bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          slopescale_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthBias::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.DepthBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float constant_bias = 1;
  if (!(this->constant_bias() <= 0 && this->constant_bias() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_constant_bias(), target);
  }

  // float slopescale_bias = 2;
  if (!(this->slopescale_bias() <= 0 && this->slopescale_bias() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_slopescale_bias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.DepthBias)
  return target;
}

size_t DepthBias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.DepthBias)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float constant_bias = 1;
  if (!(this->constant_bias() <= 0 && this->constant_bias() >= 0)) {
    total_size += 1 + 4;
  }

  // float slopescale_bias = 2;
  if (!(this->slopescale_bias() <= 0 && this->slopescale_bias() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthBias::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DepthBias*>(
      &from));
}

void DepthBias::MergeFrom(const DepthBias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.DepthBias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.constant_bias() <= 0 && from.constant_bias() >= 0)) {
    _internal_set_constant_bias(from._internal_constant_bias());
  }
  if (!(from.slopescale_bias() <= 0 && from.slopescale_bias() >= 0)) {
    _internal_set_slopescale_bias(from._internal_slopescale_bias());
  }
}

void DepthBias::CopyFrom(const DepthBias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.DepthBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthBias::IsInitialized() const {
  return true;
}

void DepthBias::InternalSwap(DepthBias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(constant_bias_, other->constant_bias_);
  swap(slopescale_bias_, other->slopescale_bias_);
}

std::string DepthBias::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.DepthBias";
}


// ===================================================================

void AlphaRejection::InitAsDefaultInstance() {
}
class AlphaRejection::_Internal {
 public:
};

AlphaRejection::AlphaRejection()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.AlphaRejection)
}
AlphaRejection::AlphaRejection(const AlphaRejection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&function_, &from.function_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&function_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.AlphaRejection)
}

void AlphaRejection::SharedCtor() {
  ::memset(&function_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&function_)) + sizeof(value_));
}

AlphaRejection::~AlphaRejection() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.AlphaRejection)
  SharedDtor();
}

void AlphaRejection::SharedDtor() {
}

void AlphaRejection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlphaRejection& AlphaRejection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlphaRejection_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void AlphaRejection::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&function_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&function_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

const char* AlphaRejection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.CompareFunction function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_function(static_cast<::Tiny3D::Script::MaterialSystem::CompareFunction>(val));
        } else goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlphaRejection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CompareFunction function = 1;
  if (this->function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_function(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.AlphaRejection)
  return target;
}

size_t AlphaRejection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CompareFunction function = 1;
  if (this->function() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_function());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlphaRejection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AlphaRejection*>(
      &from));
}

void AlphaRejection::MergeFrom(const AlphaRejection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.function() != 0) {
    _internal_set_function(from._internal_function());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void AlphaRejection::CopyFrom(const AlphaRejection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphaRejection::IsInitialized() const {
  return true;
}

void AlphaRejection::InternalSwap(AlphaRejection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(function_, other->function_);
  swap(value_, other->value_);
}

std::string AlphaRejection::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.AlphaRejection";
}


// ===================================================================

void Illumination::InitAsDefaultInstance() {
}
class Illumination::_Internal {
 public:
};

Illumination::Illumination()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Illumination)
}
Illumination::Illumination(const Illumination& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_ = from.stage_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Illumination)
}

void Illumination::SharedCtor() {
  stage_ = 0;
}

Illumination::~Illumination() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Illumination)
  SharedDtor();
}

void Illumination::SharedDtor() {
}

void Illumination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Illumination& Illumination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Illumination_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Illumination::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Illumination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_ = 0;
  _internal_metadata_.Clear();
}

const char* Illumination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.IlluminationStage stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_stage(static_cast<::Tiny3D::Script::MaterialSystem::IlluminationStage>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Illumination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Illumination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IlluminationStage stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Illumination)
  return target;
}

size_t Illumination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Illumination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IlluminationStage stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Illumination::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Illumination*>(
      &from));
}

void Illumination::MergeFrom(const Illumination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Illumination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void Illumination::CopyFrom(const Illumination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Illumination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Illumination::IsInitialized() const {
  return true;
}

void Illumination::InternalSwap(Illumination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stage_, other->stage_);
}

std::string Illumination::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Illumination";
}


// ===================================================================

void SortingTransparent::InitAsDefaultInstance() {
}
class SortingTransparent::_Internal {
 public:
};

SortingTransparent::SortingTransparent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SortingTransparent)
}
SortingTransparent::SortingTransparent(const SortingTransparent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SortingTransparent)
}

void SortingTransparent::SharedCtor() {
  value_ = 0;
}

SortingTransparent::~SortingTransparent() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SortingTransparent)
  SharedDtor();
}

void SortingTransparent::SharedDtor() {
}

void SortingTransparent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SortingTransparent& SortingTransparent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SortingTransparent_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SortingTransparent::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SortingTransparent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* SortingTransparent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.TransparentSorting value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::TransparentSorting>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortingTransparent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SortingTransparent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.TransparentSorting value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SortingTransparent)
  return target;
}

size_t SortingTransparent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SortingTransparent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.TransparentSorting value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortingTransparent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SortingTransparent*>(
      &from));
}

void SortingTransparent::MergeFrom(const SortingTransparent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SortingTransparent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SortingTransparent::CopyFrom(const SortingTransparent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SortingTransparent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortingTransparent::IsInitialized() const {
  return true;
}

void SortingTransparent::InternalSwap(SortingTransparent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string SortingTransparent::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.SortingTransparent";
}


// ===================================================================

void CullingHardware::InitAsDefaultInstance() {
}
class CullingHardware::_Internal {
 public:
};

CullingHardware::CullingHardware()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.CullingHardware)
}
CullingHardware::CullingHardware(const CullingHardware& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.CullingHardware)
}

void CullingHardware::SharedCtor() {
  value_ = 0;
}

CullingHardware::~CullingHardware() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.CullingHardware)
  SharedDtor();
}

void CullingHardware::SharedDtor() {
}

void CullingHardware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CullingHardware& CullingHardware::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CullingHardware_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void CullingHardware::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.CullingHardware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* CullingHardware::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.CullHardware value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::CullHardware>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CullingHardware::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.CullingHardware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CullHardware value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.CullingHardware)
  return target;
}

size_t CullingHardware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.CullingHardware)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CullHardware value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CullingHardware::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CullingHardware*>(
      &from));
}

void CullingHardware::MergeFrom(const CullingHardware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.CullingHardware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void CullingHardware::CopyFrom(const CullingHardware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.CullingHardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CullingHardware::IsInitialized() const {
  return true;
}

void CullingHardware::InternalSwap(CullingHardware* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string CullingHardware::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.CullingHardware";
}


// ===================================================================

void CullingSoftware::InitAsDefaultInstance() {
}
class CullingSoftware::_Internal {
 public:
};

CullingSoftware::CullingSoftware()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.CullingSoftware)
}
CullingSoftware::CullingSoftware(const CullingSoftware& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.CullingSoftware)
}

void CullingSoftware::SharedCtor() {
  value_ = 0;
}

CullingSoftware::~CullingSoftware() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.CullingSoftware)
  SharedDtor();
}

void CullingSoftware::SharedDtor() {
}

void CullingSoftware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CullingSoftware& CullingSoftware::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CullingSoftware_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void CullingSoftware::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.CullingSoftware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* CullingSoftware::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.CullSoftware value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::CullSoftware>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CullingSoftware::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.CullingSoftware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CullSoftware value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.CullingSoftware)
  return target;
}

size_t CullingSoftware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.CullingSoftware)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CullSoftware value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CullingSoftware::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CullingSoftware*>(
      &from));
}

void CullingSoftware::MergeFrom(const CullingSoftware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.CullingSoftware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void CullingSoftware::CopyFrom(const CullingSoftware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.CullingSoftware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CullingSoftware::IsInitialized() const {
  return true;
}

void CullingSoftware::InternalSwap(CullingSoftware* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string CullingSoftware::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.CullingSoftware";
}


// ===================================================================

void Shading::InitAsDefaultInstance() {
}
class Shading::_Internal {
 public:
};

Shading::Shading()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Shading)
}
Shading::Shading(const Shading& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Shading)
}

void Shading::SharedCtor() {
  value_ = 0;
}

Shading::~Shading() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Shading)
  SharedDtor();
}

void Shading::SharedDtor() {
}

void Shading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shading& Shading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shading_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Shading::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Shading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Shading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.ShadingMode value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::ShadingMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Shading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.ShadingMode value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Shading)
  return target;
}

size_t Shading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Shading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.ShadingMode value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shading::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Shading*>(
      &from));
}

void Shading::MergeFrom(const Shading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Shading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Shading::CopyFrom(const Shading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Shading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shading::IsInitialized() const {
  return true;
}

void Shading::InternalSwap(Shading* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string Shading::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Shading";
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
class Polygon::_Internal {
 public:
};

Polygon::Polygon()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Polygon)
}

void Polygon::SharedCtor() {
  value_ = 0;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.PolygonMode value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::Tiny3D::Script::MaterialSystem::PolygonMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.PolygonMode value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.PolygonMode value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Polygon*>(
      &from));
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string Polygon::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Polygon";
}


// ===================================================================

void Fog::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Fog_default_instance_._instance.get_mutable()->color_ = const_cast< ::Tiny3D::Script::MaterialSystem::Color*>(
      ::Tiny3D::Script::MaterialSystem::Color::internal_default_instance());
}
class Fog::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Color& color(const Fog* msg);
};

const ::Tiny3D::Script::MaterialSystem::Color&
Fog::_Internal::color(const Fog* msg) {
  return *msg->color_;
}
Fog::Fog()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Fog)
}
Fog::Fog(const Fog& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::Tiny3D::Script::MaterialSystem::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&overrideable_, &from.overrideable_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&overrideable_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Fog)
}

void Fog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fog_MaterialScriptObject_2eproto.base);
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&color_)) + sizeof(end_));
}

Fog::~Fog() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Fog)
  SharedDtor();
}

void Fog::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void Fog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fog& Fog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fog_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Fog::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Fog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  ::memset(&overrideable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&overrideable_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

const char* Fog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool overrideable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          overrideable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.FogType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::FogType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float density = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Fog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool overrideable = 1;
  if (this->overrideable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_overrideable(), target);
  }

  // .Tiny3D.Script.MaterialSystem.FogType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .Tiny3D.Script.MaterialSystem.Color color = 3;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::color(this), target, stream);
  }

  // float density = 4;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_density(), target);
  }

  // float start = 5;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_start(), target);
  }

  // float end = 6;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Fog)
  return target;
}

size_t Fog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Fog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Color color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // bool overrideable = 1;
  if (this->overrideable() != 0) {
    total_size += 1 + 1;
  }

  // .Tiny3D.Script.MaterialSystem.FogType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float density = 4;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    total_size += 1 + 4;
  }

  // float start = 5;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    total_size += 1 + 4;
  }

  // float end = 6;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fog::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fog*>(
      &from));
}

void Fog::MergeFrom(const Fog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Fog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color()) {
    _internal_mutable_color()->::Tiny3D::Script::MaterialSystem::Color::MergeFrom(from._internal_color());
  }
  if (from.overrideable() != 0) {
    _internal_set_overrideable(from._internal_overrideable());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.density() <= 0 && from.density() >= 0)) {
    _internal_set_density(from._internal_density());
  }
  if (!(from.start() <= 0 && from.start() >= 0)) {
    _internal_set_start(from._internal_start());
  }
  if (!(from.end() <= 0 && from.end() >= 0)) {
    _internal_set_end(from._internal_end());
  }
}

void Fog::CopyFrom(const Fog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Fog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fog::IsInitialized() const {
  return true;
}

void Fog::InternalSwap(Fog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_, other->color_);
  swap(overrideable_, other->overrideable_);
  swap(type_, other->type_);
  swap(density_, other->density_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

std::string Fog::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Fog";
}


// ===================================================================

void IterationOnce::InitAsDefaultInstance() {
}
class IterationOnce::_Internal {
 public:
};

IterationOnce::IterationOnce()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.IterationOnce)
}
IterationOnce::IterationOnce(const IterationOnce& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.IterationOnce)
}

void IterationOnce::SharedCtor() {
  type_ = 0;
}

IterationOnce::~IterationOnce() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.IterationOnce)
  SharedDtor();
}

void IterationOnce::SharedDtor() {
}

void IterationOnce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IterationOnce& IterationOnce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IterationOnce_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void IterationOnce::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.IterationOnce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* IterationOnce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::IterationType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IterationOnce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.IterationOnce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.IterationOnce)
  return target;
}

size_t IterationOnce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.IterationOnce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IterationOnce::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IterationOnce*>(
      &from));
}

void IterationOnce::MergeFrom(const IterationOnce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.IterationOnce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void IterationOnce::CopyFrom(const IterationOnce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.IterationOnce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterationOnce::IsInitialized() const {
  return true;
}

void IterationOnce::InternalSwap(IterationOnce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

std::string IterationOnce::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.IterationOnce";
}


// ===================================================================

void IterationOncePerLight::InitAsDefaultInstance() {
}
class IterationOncePerLight::_Internal {
 public:
};

IterationOncePerLight::IterationOncePerLight()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
}
IterationOncePerLight::IterationOncePerLight(const IterationOncePerLight& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&light_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(light_type_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
}

void IterationOncePerLight::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(light_type_));
}

IterationOncePerLight::~IterationOncePerLight() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
  SharedDtor();
}

void IterationOncePerLight::SharedDtor() {
}

void IterationOncePerLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IterationOncePerLight& IterationOncePerLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IterationOncePerLight_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void IterationOncePerLight::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(light_type_));
  _internal_metadata_.Clear();
}

const char* IterationOncePerLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::IterationType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightType light_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_light_type(static_cast<::Tiny3D::Script::MaterialSystem::LightType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IterationOncePerLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 2;
  if (this->light_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_light_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
  return target;
}

size_t IterationOncePerLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 2;
  if (this->light_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_light_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IterationOncePerLight::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IterationOncePerLight*>(
      &from));
}

void IterationOncePerLight::MergeFrom(const IterationOncePerLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.light_type() != 0) {
    _internal_set_light_type(from._internal_light_type());
  }
}

void IterationOncePerLight::CopyFrom(const IterationOncePerLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.IterationOncePerLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterationOncePerLight::IsInitialized() const {
  return true;
}

void IterationOncePerLight::InternalSwap(IterationOncePerLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(light_type_, other->light_type_);
}

std::string IterationOncePerLight::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.IterationOncePerLight";
}


// ===================================================================

void IterationNumber::InitAsDefaultInstance() {
}
class IterationNumber::_Internal {
 public:
};

IterationNumber::IterationNumber()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.IterationNumber)
}
IterationNumber::IterationNumber(const IterationNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.IterationNumber)
}

void IterationNumber::SharedCtor() {
  number_ = 0u;
}

IterationNumber::~IterationNumber() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.IterationNumber)
  SharedDtor();
}

void IterationNumber::SharedDtor() {
}

void IterationNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IterationNumber& IterationNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IterationNumber_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void IterationNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.IterationNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_ = 0u;
  _internal_metadata_.Clear();
}

const char* IterationNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IterationNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.IterationNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.IterationNumber)
  return target;
}

size_t IterationNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.IterationNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IterationNumber::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IterationNumber*>(
      &from));
}

void IterationNumber::MergeFrom(const IterationNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.IterationNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void IterationNumber::CopyFrom(const IterationNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.IterationNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterationNumber::IsInitialized() const {
  return true;
}

void IterationNumber::InternalSwap(IterationNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
}

std::string IterationNumber::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.IterationNumber";
}


// ===================================================================

void IterationPerLight::InitAsDefaultInstance() {
}
class IterationPerLight::_Internal {
 public:
};

IterationPerLight::IterationPerLight()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.IterationPerLight)
}
IterationPerLight::IterationPerLight(const IterationPerLight& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&light_type_) -
    reinterpret_cast<char*>(&number_)) + sizeof(light_type_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.IterationPerLight)
}

void IterationPerLight::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_type_) -
      reinterpret_cast<char*>(&number_)) + sizeof(light_type_));
}

IterationPerLight::~IterationPerLight() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.IterationPerLight)
  SharedDtor();
}

void IterationPerLight::SharedDtor() {
}

void IterationPerLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IterationPerLight& IterationPerLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IterationPerLight_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void IterationPerLight::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.IterationPerLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_type_) -
      reinterpret_cast<char*>(&number_)) + sizeof(light_type_));
  _internal_metadata_.Clear();
}

const char* IterationPerLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.IterationType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::IterationType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightType light_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_light_type(static_cast<::Tiny3D::Script::MaterialSystem::LightType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IterationPerLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.IterationPerLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // .Tiny3D.Script.MaterialSystem.IterationType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 3;
  if (this->light_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_light_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.IterationPerLight)
  return target;
}

size_t IterationPerLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.IterationPerLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  // .Tiny3D.Script.MaterialSystem.IterationType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 3;
  if (this->light_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_light_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IterationPerLight::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IterationPerLight*>(
      &from));
}

void IterationPerLight::MergeFrom(const IterationPerLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.IterationPerLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.light_type() != 0) {
    _internal_set_light_type(from._internal_light_type());
  }
}

void IterationPerLight::CopyFrom(const IterationPerLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.IterationPerLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterationPerLight::IsInitialized() const {
  return true;
}

void IterationPerLight::InternalSwap(IterationPerLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
  swap(type_, other->type_);
  swap(light_type_, other->light_type_);
}

std::string IterationPerLight::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.IterationPerLight";
}


// ===================================================================

void IterationPerNLight::InitAsDefaultInstance() {
}
class IterationPerNLight::_Internal {
 public:
};

IterationPerNLight::IterationPerNLight()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.IterationPerNLight)
}
IterationPerNLight::IterationPerNLight(const IterationPerNLight& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&light_type_) -
    reinterpret_cast<char*>(&number_)) + sizeof(light_type_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.IterationPerNLight)
}

void IterationPerNLight::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_type_) -
      reinterpret_cast<char*>(&number_)) + sizeof(light_type_));
}

IterationPerNLight::~IterationPerNLight() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.IterationPerNLight)
  SharedDtor();
}

void IterationPerNLight::SharedDtor() {
}

void IterationPerNLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IterationPerNLight& IterationPerNLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IterationPerNLight_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void IterationPerNLight::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.IterationPerNLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_type_) -
      reinterpret_cast<char*>(&number_)) + sizeof(light_type_));
  _internal_metadata_.Clear();
}

const char* IterationPerNLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.IterationType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::IterationType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 num_lights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightType light_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_light_type(static_cast<::Tiny3D::Script::MaterialSystem::LightType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IterationPerNLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.IterationPerNLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // .Tiny3D.Script.MaterialSystem.IterationType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 num_lights = 3;
  if (this->num_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_lights(), target);
  }

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 4;
  if (this->light_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_light_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.IterationPerNLight)
  return target;
}

size_t IterationPerNLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.IterationPerNLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  // .Tiny3D.Script.MaterialSystem.IterationType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 num_lights = 3;
  if (this->num_lights() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_lights());
  }

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 4;
  if (this->light_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_light_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IterationPerNLight::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IterationPerNLight*>(
      &from));
}

void IterationPerNLight::MergeFrom(const IterationPerNLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.IterationPerNLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.num_lights() != 0) {
    _internal_set_num_lights(from._internal_num_lights());
  }
  if (from.light_type() != 0) {
    _internal_set_light_type(from._internal_light_type());
  }
}

void IterationPerNLight::CopyFrom(const IterationPerNLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.IterationPerNLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterationPerNLight::IsInitialized() const {
  return true;
}

void IterationPerNLight::InternalSwap(IterationPerNLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
  swap(type_, other->type_);
  swap(num_lights_, other->num_lights_);
  swap(light_type_, other->light_type_);
}

std::string IterationPerNLight::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.IterationPerNLight";
}


// ===================================================================

void Iteration::InitAsDefaultInstance() {
}
class Iteration::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::IterationOnce& once(const Iteration* msg);
  static const ::Tiny3D::Script::MaterialSystem::IterationOncePerLight& once_per_light(const Iteration* msg);
  static const ::Tiny3D::Script::MaterialSystem::IterationNumber& number(const Iteration* msg);
  static const ::Tiny3D::Script::MaterialSystem::IterationPerLight& per_light(const Iteration* msg);
  static const ::Tiny3D::Script::MaterialSystem::IterationPerNLight& per_n_light(const Iteration* msg);
};

const ::Tiny3D::Script::MaterialSystem::IterationOnce&
Iteration::_Internal::once(const Iteration* msg) {
  return *msg->IterationOneof_.once_;
}
const ::Tiny3D::Script::MaterialSystem::IterationOncePerLight&
Iteration::_Internal::once_per_light(const Iteration* msg) {
  return *msg->IterationOneof_.once_per_light_;
}
const ::Tiny3D::Script::MaterialSystem::IterationNumber&
Iteration::_Internal::number(const Iteration* msg) {
  return *msg->IterationOneof_.number_;
}
const ::Tiny3D::Script::MaterialSystem::IterationPerLight&
Iteration::_Internal::per_light(const Iteration* msg) {
  return *msg->IterationOneof_.per_light_;
}
const ::Tiny3D::Script::MaterialSystem::IterationPerNLight&
Iteration::_Internal::per_n_light(const Iteration* msg) {
  return *msg->IterationOneof_.per_n_light_;
}
void Iteration::set_allocated_once(::Tiny3D::Script::MaterialSystem::IterationOnce* once) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_IterationOneof();
  if (once) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      once = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, once, submessage_arena);
    }
    set_has_once();
    IterationOneof_.once_ = once;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Iteration.once)
}
void Iteration::set_allocated_once_per_light(::Tiny3D::Script::MaterialSystem::IterationOncePerLight* once_per_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_IterationOneof();
  if (once_per_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      once_per_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, once_per_light, submessage_arena);
    }
    set_has_once_per_light();
    IterationOneof_.once_per_light_ = once_per_light;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Iteration.once_per_light)
}
void Iteration::set_allocated_number(::Tiny3D::Script::MaterialSystem::IterationNumber* number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_IterationOneof();
  if (number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number, submessage_arena);
    }
    set_has_number();
    IterationOneof_.number_ = number;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Iteration.number)
}
void Iteration::set_allocated_per_light(::Tiny3D::Script::MaterialSystem::IterationPerLight* per_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_IterationOneof();
  if (per_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      per_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, per_light, submessage_arena);
    }
    set_has_per_light();
    IterationOneof_.per_light_ = per_light;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Iteration.per_light)
}
void Iteration::set_allocated_per_n_light(::Tiny3D::Script::MaterialSystem::IterationPerNLight* per_n_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_IterationOneof();
  if (per_n_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      per_n_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, per_n_light, submessage_arena);
    }
    set_has_per_n_light();
    IterationOneof_.per_n_light_ = per_n_light;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Iteration.per_n_light)
}
Iteration::Iteration()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Iteration)
}
Iteration::Iteration(const Iteration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_IterationOneof();
  switch (from.IterationOneof_case()) {
    case kOnce: {
      _internal_mutable_once()->::Tiny3D::Script::MaterialSystem::IterationOnce::MergeFrom(from._internal_once());
      break;
    }
    case kOncePerLight: {
      _internal_mutable_once_per_light()->::Tiny3D::Script::MaterialSystem::IterationOncePerLight::MergeFrom(from._internal_once_per_light());
      break;
    }
    case kNumber: {
      _internal_mutable_number()->::Tiny3D::Script::MaterialSystem::IterationNumber::MergeFrom(from._internal_number());
      break;
    }
    case kPerLight: {
      _internal_mutable_per_light()->::Tiny3D::Script::MaterialSystem::IterationPerLight::MergeFrom(from._internal_per_light());
      break;
    }
    case kPerNLight: {
      _internal_mutable_per_n_light()->::Tiny3D::Script::MaterialSystem::IterationPerNLight::MergeFrom(from._internal_per_n_light());
      break;
    }
    case ITERATIONONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Iteration)
}

void Iteration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Iteration_MaterialScriptObject_2eproto.base);
  clear_has_IterationOneof();
}

Iteration::~Iteration() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Iteration)
  SharedDtor();
}

void Iteration::SharedDtor() {
  if (has_IterationOneof()) {
    clear_IterationOneof();
  }
}

void Iteration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Iteration& Iteration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Iteration_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Iteration::clear_IterationOneof() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.Iteration)
  switch (IterationOneof_case()) {
    case kOnce: {
      delete IterationOneof_.once_;
      break;
    }
    case kOncePerLight: {
      delete IterationOneof_.once_per_light_;
      break;
    }
    case kNumber: {
      delete IterationOneof_.number_;
      break;
    }
    case kPerLight: {
      delete IterationOneof_.per_light_;
      break;
    }
    case kPerNLight: {
      delete IterationOneof_.per_n_light_;
      break;
    }
    case ITERATIONONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITERATIONONEOF_NOT_SET;
}


void Iteration::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Iteration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_IterationOneof();
  _internal_metadata_.Clear();
}

const char* Iteration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.IterationOnce once = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_once(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.IterationOncePerLight once_per_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_once_per_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.IterationNumber number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.IterationPerLight per_light = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_per_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.IterationPerNLight per_n_light = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_per_n_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Iteration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Iteration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IterationOnce once = 1;
  if (_internal_has_once()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::once(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.IterationOncePerLight once_per_light = 2;
  if (_internal_has_once_per_light()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::once_per_light(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.IterationNumber number = 3;
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::number(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.IterationPerLight per_light = 4;
  if (_internal_has_per_light()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::per_light(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.IterationPerNLight per_n_light = 5;
  if (_internal_has_per_n_light()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::per_n_light(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Iteration)
  return target;
}

size_t Iteration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Iteration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (IterationOneof_case()) {
    // .Tiny3D.Script.MaterialSystem.IterationOnce once = 1;
    case kOnce: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *IterationOneof_.once_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.IterationOncePerLight once_per_light = 2;
    case kOncePerLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *IterationOneof_.once_per_light_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.IterationNumber number = 3;
    case kNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *IterationOneof_.number_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.IterationPerLight per_light = 4;
    case kPerLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *IterationOneof_.per_light_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.IterationPerNLight per_n_light = 5;
    case kPerNLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *IterationOneof_.per_n_light_);
      break;
    }
    case ITERATIONONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Iteration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Iteration*>(
      &from));
}

void Iteration::MergeFrom(const Iteration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Iteration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.IterationOneof_case()) {
    case kOnce: {
      _internal_mutable_once()->::Tiny3D::Script::MaterialSystem::IterationOnce::MergeFrom(from._internal_once());
      break;
    }
    case kOncePerLight: {
      _internal_mutable_once_per_light()->::Tiny3D::Script::MaterialSystem::IterationOncePerLight::MergeFrom(from._internal_once_per_light());
      break;
    }
    case kNumber: {
      _internal_mutable_number()->::Tiny3D::Script::MaterialSystem::IterationNumber::MergeFrom(from._internal_number());
      break;
    }
    case kPerLight: {
      _internal_mutable_per_light()->::Tiny3D::Script::MaterialSystem::IterationPerLight::MergeFrom(from._internal_per_light());
      break;
    }
    case kPerNLight: {
      _internal_mutable_per_n_light()->::Tiny3D::Script::MaterialSystem::IterationPerNLight::MergeFrom(from._internal_per_n_light());
      break;
    }
    case ITERATIONONEOF_NOT_SET: {
      break;
    }
  }
}

void Iteration::CopyFrom(const Iteration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Iteration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Iteration::IsInitialized() const {
  return true;
}

void Iteration::InternalSwap(Iteration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(IterationOneof_, other->IterationOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Iteration::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Iteration";
}


// ===================================================================

void PointSizeAttenuation::InitAsDefaultInstance() {
}
class PointSizeAttenuation::_Internal {
 public:
};

PointSizeAttenuation::PointSizeAttenuation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
}
PointSizeAttenuation::PointSizeAttenuation(const PointSizeAttenuation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&quadratic_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(quadratic_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
}

void PointSizeAttenuation::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quadratic_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(quadratic_));
}

PointSizeAttenuation::~PointSizeAttenuation() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  SharedDtor();
}

void PointSizeAttenuation::SharedDtor() {
}

void PointSizeAttenuation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointSizeAttenuation& PointSizeAttenuation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void PointSizeAttenuation::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quadratic_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(quadratic_));
  _internal_metadata_.Clear();
}

const char* PointSizeAttenuation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float constant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float linear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          linear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float quadratic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          quadratic_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointSizeAttenuation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // float constant = 2;
  if (!(this->constant() <= 0 && this->constant() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_constant(), target);
  }

  // float linear = 3;
  if (!(this->linear() <= 0 && this->linear() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_linear(), target);
  }

  // float quadratic = 4;
  if (!(this->quadratic() <= 0 && this->quadratic() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_quadratic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  return target;
}

size_t PointSizeAttenuation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // float constant = 2;
  if (!(this->constant() <= 0 && this->constant() >= 0)) {
    total_size += 1 + 4;
  }

  // float linear = 3;
  if (!(this->linear() <= 0 && this->linear() >= 0)) {
    total_size += 1 + 4;
  }

  // float quadratic = 4;
  if (!(this->quadratic() <= 0 && this->quadratic() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointSizeAttenuation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PointSizeAttenuation*>(
      &from));
}

void PointSizeAttenuation::MergeFrom(const PointSizeAttenuation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (!(from.constant() <= 0 && from.constant() >= 0)) {
    _internal_set_constant(from._internal_constant());
  }
  if (!(from.linear() <= 0 && from.linear() >= 0)) {
    _internal_set_linear(from._internal_linear());
  }
  if (!(from.quadratic() <= 0 && from.quadratic() >= 0)) {
    _internal_set_quadratic(from._internal_quadratic());
  }
}

void PointSizeAttenuation::CopyFrom(const PointSizeAttenuation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointSizeAttenuation::IsInitialized() const {
  return true;
}

void PointSizeAttenuation::InternalSwap(PointSizeAttenuation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enable_, other->enable_);
  swap(constant_, other->constant_);
  swap(linear_, other->linear_);
  swap(quadratic_, other->quadratic_);
}

std::string PointSizeAttenuation::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.PointSizeAttenuation";
}


// ===================================================================

void Pass::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->ambient_ = const_cast< ::Tiny3D::Script::MaterialSystem::LightColor*>(
      ::Tiny3D::Script::MaterialSystem::LightColor::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->diffuse_ = const_cast< ::Tiny3D::Script::MaterialSystem::LightColor*>(
      ::Tiny3D::Script::MaterialSystem::LightColor::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->specular_ = const_cast< ::Tiny3D::Script::MaterialSystem::LightColor*>(
      ::Tiny3D::Script::MaterialSystem::LightColor::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->emissive_ = const_cast< ::Tiny3D::Script::MaterialSystem::LightColor*>(
      ::Tiny3D::Script::MaterialSystem::LightColor::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->shininess_ = const_cast< ::Tiny3D::Script::MaterialSystem::Float*>(
      ::Tiny3D::Script::MaterialSystem::Float::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->scene_blend_ = const_cast< ::Tiny3D::Script::MaterialSystem::BlendScene*>(
      ::Tiny3D::Script::MaterialSystem::BlendScene::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->separate_scene_blend_ = const_cast< ::Tiny3D::Script::MaterialSystem::SeparateBlendScene*>(
      ::Tiny3D::Script::MaterialSystem::SeparateBlendScene::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->scene_blend_op_ = const_cast< ::Tiny3D::Script::MaterialSystem::SceneBlendOperation*>(
      ::Tiny3D::Script::MaterialSystem::SceneBlendOperation::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->separate_scene_blend_op_ = const_cast< ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation*>(
      ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->depth_check_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->depth_write_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->depth_func_ = const_cast< ::Tiny3D::Script::MaterialSystem::CompareFunc*>(
      ::Tiny3D::Script::MaterialSystem::CompareFunc::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->depth_bias_ = const_cast< ::Tiny3D::Script::MaterialSystem::DepthBias*>(
      ::Tiny3D::Script::MaterialSystem::DepthBias::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->iteration_depth_bias_ = const_cast< ::Tiny3D::Script::MaterialSystem::Float*>(
      ::Tiny3D::Script::MaterialSystem::Float::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->alpha_rejection_ = const_cast< ::Tiny3D::Script::MaterialSystem::AlphaRejection*>(
      ::Tiny3D::Script::MaterialSystem::AlphaRejection::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->alpha_to_coverage_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->light_scissor_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->light_clip_planes_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->illumination_stage_ = const_cast< ::Tiny3D::Script::MaterialSystem::Illumination*>(
      ::Tiny3D::Script::MaterialSystem::Illumination::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->normailize_normals_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->transparent_sorting_ = const_cast< ::Tiny3D::Script::MaterialSystem::SortingTransparent*>(
      ::Tiny3D::Script::MaterialSystem::SortingTransparent::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->cull_hardware_ = const_cast< ::Tiny3D::Script::MaterialSystem::CullingHardware*>(
      ::Tiny3D::Script::MaterialSystem::CullingHardware::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->cull_software_ = const_cast< ::Tiny3D::Script::MaterialSystem::CullingSoftware*>(
      ::Tiny3D::Script::MaterialSystem::CullingSoftware::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->lighting_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->shading_ = const_cast< ::Tiny3D::Script::MaterialSystem::Shading*>(
      ::Tiny3D::Script::MaterialSystem::Shading::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->polygon_mode_ = const_cast< ::Tiny3D::Script::MaterialSystem::Polygon*>(
      ::Tiny3D::Script::MaterialSystem::Polygon::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->polygon_mode_overrideable_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->fog_ = const_cast< ::Tiny3D::Script::MaterialSystem::Fog*>(
      ::Tiny3D::Script::MaterialSystem::Fog::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->color_write_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->max_lights_ = const_cast< ::Tiny3D::Script::MaterialSystem::UInt32*>(
      ::Tiny3D::Script::MaterialSystem::UInt32::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->start_light_ = const_cast< ::Tiny3D::Script::MaterialSystem::UInt32*>(
      ::Tiny3D::Script::MaterialSystem::UInt32::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->iteration_ = const_cast< ::Tiny3D::Script::MaterialSystem::Iteration*>(
      ::Tiny3D::Script::MaterialSystem::Iteration::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->point_size_ = const_cast< ::Tiny3D::Script::MaterialSystem::Float*>(
      ::Tiny3D::Script::MaterialSystem::Float::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->point_sprites_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->point_size_attenuation_ = const_cast< ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation*>(
      ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->point_size_min_ = const_cast< ::Tiny3D::Script::MaterialSystem::Float*>(
      ::Tiny3D::Script::MaterialSystem::Float::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->point_size_max_ = const_cast< ::Tiny3D::Script::MaterialSystem::Float*>(
      ::Tiny3D::Script::MaterialSystem::Float::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->gpu_program_ref_ = const_cast< ::Tiny3D::Script::MaterialSystem::GPUProgramRef*>(
      ::Tiny3D::Script::MaterialSystem::GPUProgramRef::internal_default_instance());
}
class Pass::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::LightColor& ambient(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::LightColor& diffuse(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::LightColor& specular(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::LightColor& emissive(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Float& shininess(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::BlendScene& scene_blend(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene& separate_scene_blend(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::SceneBlendOperation& scene_blend_op(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation& separate_scene_blend_op(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& depth_check(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& depth_write(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::CompareFunc& depth_func(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::DepthBias& depth_bias(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Float& iteration_depth_bias(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::AlphaRejection& alpha_rejection(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& alpha_to_coverage(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& light_scissor(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& light_clip_planes(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Illumination& illumination_stage(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& normailize_normals(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::SortingTransparent& transparent_sorting(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::CullingHardware& cull_hardware(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::CullingSoftware& cull_software(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& lighting(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Shading& shading(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Polygon& polygon_mode(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& polygon_mode_overrideable(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Fog& fog(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& color_write(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::UInt32& max_lights(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::UInt32& start_light(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Iteration& iteration(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Float& point_size(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& point_sprites(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation& point_size_attenuation(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Float& point_size_min(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Float& point_size_max(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::GPUProgramRef& gpu_program_ref(const Pass* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
Pass::_Internal::header(const Pass* msg) {
  return *msg->header_;
}
const ::Tiny3D::Script::MaterialSystem::LightColor&
Pass::_Internal::ambient(const Pass* msg) {
  return *msg->ambient_;
}
const ::Tiny3D::Script::MaterialSystem::LightColor&
Pass::_Internal::diffuse(const Pass* msg) {
  return *msg->diffuse_;
}
const ::Tiny3D::Script::MaterialSystem::LightColor&
Pass::_Internal::specular(const Pass* msg) {
  return *msg->specular_;
}
const ::Tiny3D::Script::MaterialSystem::LightColor&
Pass::_Internal::emissive(const Pass* msg) {
  return *msg->emissive_;
}
const ::Tiny3D::Script::MaterialSystem::Float&
Pass::_Internal::shininess(const Pass* msg) {
  return *msg->shininess_;
}
const ::Tiny3D::Script::MaterialSystem::BlendScene&
Pass::_Internal::scene_blend(const Pass* msg) {
  return *msg->scene_blend_;
}
const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene&
Pass::_Internal::separate_scene_blend(const Pass* msg) {
  return *msg->separate_scene_blend_;
}
const ::Tiny3D::Script::MaterialSystem::SceneBlendOperation&
Pass::_Internal::scene_blend_op(const Pass* msg) {
  return *msg->scene_blend_op_;
}
const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation&
Pass::_Internal::separate_scene_blend_op(const Pass* msg) {
  return *msg->separate_scene_blend_op_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::depth_check(const Pass* msg) {
  return *msg->depth_check_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::depth_write(const Pass* msg) {
  return *msg->depth_write_;
}
const ::Tiny3D::Script::MaterialSystem::CompareFunc&
Pass::_Internal::depth_func(const Pass* msg) {
  return *msg->depth_func_;
}
const ::Tiny3D::Script::MaterialSystem::DepthBias&
Pass::_Internal::depth_bias(const Pass* msg) {
  return *msg->depth_bias_;
}
const ::Tiny3D::Script::MaterialSystem::Float&
Pass::_Internal::iteration_depth_bias(const Pass* msg) {
  return *msg->iteration_depth_bias_;
}
const ::Tiny3D::Script::MaterialSystem::AlphaRejection&
Pass::_Internal::alpha_rejection(const Pass* msg) {
  return *msg->alpha_rejection_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::alpha_to_coverage(const Pass* msg) {
  return *msg->alpha_to_coverage_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::light_scissor(const Pass* msg) {
  return *msg->light_scissor_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::light_clip_planes(const Pass* msg) {
  return *msg->light_clip_planes_;
}
const ::Tiny3D::Script::MaterialSystem::Illumination&
Pass::_Internal::illumination_stage(const Pass* msg) {
  return *msg->illumination_stage_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::normailize_normals(const Pass* msg) {
  return *msg->normailize_normals_;
}
const ::Tiny3D::Script::MaterialSystem::SortingTransparent&
Pass::_Internal::transparent_sorting(const Pass* msg) {
  return *msg->transparent_sorting_;
}
const ::Tiny3D::Script::MaterialSystem::CullingHardware&
Pass::_Internal::cull_hardware(const Pass* msg) {
  return *msg->cull_hardware_;
}
const ::Tiny3D::Script::MaterialSystem::CullingSoftware&
Pass::_Internal::cull_software(const Pass* msg) {
  return *msg->cull_software_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::lighting(const Pass* msg) {
  return *msg->lighting_;
}
const ::Tiny3D::Script::MaterialSystem::Shading&
Pass::_Internal::shading(const Pass* msg) {
  return *msg->shading_;
}
const ::Tiny3D::Script::MaterialSystem::Polygon&
Pass::_Internal::polygon_mode(const Pass* msg) {
  return *msg->polygon_mode_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::polygon_mode_overrideable(const Pass* msg) {
  return *msg->polygon_mode_overrideable_;
}
const ::Tiny3D::Script::MaterialSystem::Fog&
Pass::_Internal::fog(const Pass* msg) {
  return *msg->fog_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::color_write(const Pass* msg) {
  return *msg->color_write_;
}
const ::Tiny3D::Script::MaterialSystem::UInt32&
Pass::_Internal::max_lights(const Pass* msg) {
  return *msg->max_lights_;
}
const ::Tiny3D::Script::MaterialSystem::UInt32&
Pass::_Internal::start_light(const Pass* msg) {
  return *msg->start_light_;
}
const ::Tiny3D::Script::MaterialSystem::Iteration&
Pass::_Internal::iteration(const Pass* msg) {
  return *msg->iteration_;
}
const ::Tiny3D::Script::MaterialSystem::Float&
Pass::_Internal::point_size(const Pass* msg) {
  return *msg->point_size_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Pass::_Internal::point_sprites(const Pass* msg) {
  return *msg->point_sprites_;
}
const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation&
Pass::_Internal::point_size_attenuation(const Pass* msg) {
  return *msg->point_size_attenuation_;
}
const ::Tiny3D::Script::MaterialSystem::Float&
Pass::_Internal::point_size_min(const Pass* msg) {
  return *msg->point_size_min_;
}
const ::Tiny3D::Script::MaterialSystem::Float&
Pass::_Internal::point_size_max(const Pass* msg) {
  return *msg->point_size_max_;
}
const ::Tiny3D::Script::MaterialSystem::GPUProgramRef&
Pass::_Internal::gpu_program_ref(const Pass* msg) {
  return *msg->gpu_program_ref_;
}
Pass::Pass()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Pass)
}
Pass::Pass(const Pass& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      textures_(from.textures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_ambient()) {
    ambient_ = new ::Tiny3D::Script::MaterialSystem::LightColor(*from.ambient_);
  } else {
    ambient_ = nullptr;
  }
  if (from._internal_has_diffuse()) {
    diffuse_ = new ::Tiny3D::Script::MaterialSystem::LightColor(*from.diffuse_);
  } else {
    diffuse_ = nullptr;
  }
  if (from._internal_has_specular()) {
    specular_ = new ::Tiny3D::Script::MaterialSystem::LightColor(*from.specular_);
  } else {
    specular_ = nullptr;
  }
  if (from._internal_has_emissive()) {
    emissive_ = new ::Tiny3D::Script::MaterialSystem::LightColor(*from.emissive_);
  } else {
    emissive_ = nullptr;
  }
  if (from._internal_has_shininess()) {
    shininess_ = new ::Tiny3D::Script::MaterialSystem::Float(*from.shininess_);
  } else {
    shininess_ = nullptr;
  }
  if (from._internal_has_scene_blend()) {
    scene_blend_ = new ::Tiny3D::Script::MaterialSystem::BlendScene(*from.scene_blend_);
  } else {
    scene_blend_ = nullptr;
  }
  if (from._internal_has_separate_scene_blend()) {
    separate_scene_blend_ = new ::Tiny3D::Script::MaterialSystem::SeparateBlendScene(*from.separate_scene_blend_);
  } else {
    separate_scene_blend_ = nullptr;
  }
  if (from._internal_has_scene_blend_op()) {
    scene_blend_op_ = new ::Tiny3D::Script::MaterialSystem::SceneBlendOperation(*from.scene_blend_op_);
  } else {
    scene_blend_op_ = nullptr;
  }
  if (from._internal_has_separate_scene_blend_op()) {
    separate_scene_blend_op_ = new ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation(*from.separate_scene_blend_op_);
  } else {
    separate_scene_blend_op_ = nullptr;
  }
  if (from._internal_has_depth_check()) {
    depth_check_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.depth_check_);
  } else {
    depth_check_ = nullptr;
  }
  if (from._internal_has_depth_write()) {
    depth_write_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.depth_write_);
  } else {
    depth_write_ = nullptr;
  }
  if (from._internal_has_depth_func()) {
    depth_func_ = new ::Tiny3D::Script::MaterialSystem::CompareFunc(*from.depth_func_);
  } else {
    depth_func_ = nullptr;
  }
  if (from._internal_has_depth_bias()) {
    depth_bias_ = new ::Tiny3D::Script::MaterialSystem::DepthBias(*from.depth_bias_);
  } else {
    depth_bias_ = nullptr;
  }
  if (from._internal_has_iteration_depth_bias()) {
    iteration_depth_bias_ = new ::Tiny3D::Script::MaterialSystem::Float(*from.iteration_depth_bias_);
  } else {
    iteration_depth_bias_ = nullptr;
  }
  if (from._internal_has_alpha_rejection()) {
    alpha_rejection_ = new ::Tiny3D::Script::MaterialSystem::AlphaRejection(*from.alpha_rejection_);
  } else {
    alpha_rejection_ = nullptr;
  }
  if (from._internal_has_alpha_to_coverage()) {
    alpha_to_coverage_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.alpha_to_coverage_);
  } else {
    alpha_to_coverage_ = nullptr;
  }
  if (from._internal_has_light_scissor()) {
    light_scissor_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.light_scissor_);
  } else {
    light_scissor_ = nullptr;
  }
  if (from._internal_has_light_clip_planes()) {
    light_clip_planes_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.light_clip_planes_);
  } else {
    light_clip_planes_ = nullptr;
  }
  if (from._internal_has_illumination_stage()) {
    illumination_stage_ = new ::Tiny3D::Script::MaterialSystem::Illumination(*from.illumination_stage_);
  } else {
    illumination_stage_ = nullptr;
  }
  if (from._internal_has_normailize_normals()) {
    normailize_normals_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.normailize_normals_);
  } else {
    normailize_normals_ = nullptr;
  }
  if (from._internal_has_transparent_sorting()) {
    transparent_sorting_ = new ::Tiny3D::Script::MaterialSystem::SortingTransparent(*from.transparent_sorting_);
  } else {
    transparent_sorting_ = nullptr;
  }
  if (from._internal_has_cull_hardware()) {
    cull_hardware_ = new ::Tiny3D::Script::MaterialSystem::CullingHardware(*from.cull_hardware_);
  } else {
    cull_hardware_ = nullptr;
  }
  if (from._internal_has_cull_software()) {
    cull_software_ = new ::Tiny3D::Script::MaterialSystem::CullingSoftware(*from.cull_software_);
  } else {
    cull_software_ = nullptr;
  }
  if (from._internal_has_lighting()) {
    lighting_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.lighting_);
  } else {
    lighting_ = nullptr;
  }
  if (from._internal_has_shading()) {
    shading_ = new ::Tiny3D::Script::MaterialSystem::Shading(*from.shading_);
  } else {
    shading_ = nullptr;
  }
  if (from._internal_has_polygon_mode()) {
    polygon_mode_ = new ::Tiny3D::Script::MaterialSystem::Polygon(*from.polygon_mode_);
  } else {
    polygon_mode_ = nullptr;
  }
  if (from._internal_has_polygon_mode_overrideable()) {
    polygon_mode_overrideable_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.polygon_mode_overrideable_);
  } else {
    polygon_mode_overrideable_ = nullptr;
  }
  if (from._internal_has_fog()) {
    fog_ = new ::Tiny3D::Script::MaterialSystem::Fog(*from.fog_);
  } else {
    fog_ = nullptr;
  }
  if (from._internal_has_color_write()) {
    color_write_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.color_write_);
  } else {
    color_write_ = nullptr;
  }
  if (from._internal_has_max_lights()) {
    max_lights_ = new ::Tiny3D::Script::MaterialSystem::UInt32(*from.max_lights_);
  } else {
    max_lights_ = nullptr;
  }
  if (from._internal_has_start_light()) {
    start_light_ = new ::Tiny3D::Script::MaterialSystem::UInt32(*from.start_light_);
  } else {
    start_light_ = nullptr;
  }
  if (from._internal_has_iteration()) {
    iteration_ = new ::Tiny3D::Script::MaterialSystem::Iteration(*from.iteration_);
  } else {
    iteration_ = nullptr;
  }
  if (from._internal_has_point_size()) {
    point_size_ = new ::Tiny3D::Script::MaterialSystem::Float(*from.point_size_);
  } else {
    point_size_ = nullptr;
  }
  if (from._internal_has_point_sprites()) {
    point_sprites_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.point_sprites_);
  } else {
    point_sprites_ = nullptr;
  }
  if (from._internal_has_point_size_attenuation()) {
    point_size_attenuation_ = new ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation(*from.point_size_attenuation_);
  } else {
    point_size_attenuation_ = nullptr;
  }
  if (from._internal_has_point_size_min()) {
    point_size_min_ = new ::Tiny3D::Script::MaterialSystem::Float(*from.point_size_min_);
  } else {
    point_size_min_ = nullptr;
  }
  if (from._internal_has_point_size_max()) {
    point_size_max_ = new ::Tiny3D::Script::MaterialSystem::Float(*from.point_size_max_);
  } else {
    point_size_max_ = nullptr;
  }
  if (from._internal_has_gpu_program_ref()) {
    gpu_program_ref_ = new ::Tiny3D::Script::MaterialSystem::GPUProgramRef(*from.gpu_program_ref_);
  } else {
    gpu_program_ref_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Pass)
}

void Pass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pass_MaterialScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_program_ref_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gpu_program_ref_));
}

Pass::~Pass() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Pass)
  SharedDtor();
}

void Pass::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete ambient_;
  if (this != internal_default_instance()) delete diffuse_;
  if (this != internal_default_instance()) delete specular_;
  if (this != internal_default_instance()) delete emissive_;
  if (this != internal_default_instance()) delete shininess_;
  if (this != internal_default_instance()) delete scene_blend_;
  if (this != internal_default_instance()) delete separate_scene_blend_;
  if (this != internal_default_instance()) delete scene_blend_op_;
  if (this != internal_default_instance()) delete separate_scene_blend_op_;
  if (this != internal_default_instance()) delete depth_check_;
  if (this != internal_default_instance()) delete depth_write_;
  if (this != internal_default_instance()) delete depth_func_;
  if (this != internal_default_instance()) delete depth_bias_;
  if (this != internal_default_instance()) delete iteration_depth_bias_;
  if (this != internal_default_instance()) delete alpha_rejection_;
  if (this != internal_default_instance()) delete alpha_to_coverage_;
  if (this != internal_default_instance()) delete light_scissor_;
  if (this != internal_default_instance()) delete light_clip_planes_;
  if (this != internal_default_instance()) delete illumination_stage_;
  if (this != internal_default_instance()) delete normailize_normals_;
  if (this != internal_default_instance()) delete transparent_sorting_;
  if (this != internal_default_instance()) delete cull_hardware_;
  if (this != internal_default_instance()) delete cull_software_;
  if (this != internal_default_instance()) delete lighting_;
  if (this != internal_default_instance()) delete shading_;
  if (this != internal_default_instance()) delete polygon_mode_;
  if (this != internal_default_instance()) delete polygon_mode_overrideable_;
  if (this != internal_default_instance()) delete fog_;
  if (this != internal_default_instance()) delete color_write_;
  if (this != internal_default_instance()) delete max_lights_;
  if (this != internal_default_instance()) delete start_light_;
  if (this != internal_default_instance()) delete iteration_;
  if (this != internal_default_instance()) delete point_size_;
  if (this != internal_default_instance()) delete point_sprites_;
  if (this != internal_default_instance()) delete point_size_attenuation_;
  if (this != internal_default_instance()) delete point_size_min_;
  if (this != internal_default_instance()) delete point_size_max_;
  if (this != internal_default_instance()) delete gpu_program_ref_;
}

void Pass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pass& Pass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pass_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Pass::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Pass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textures_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ambient_ != nullptr) {
    delete ambient_;
  }
  ambient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && diffuse_ != nullptr) {
    delete diffuse_;
  }
  diffuse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && specular_ != nullptr) {
    delete specular_;
  }
  specular_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && emissive_ != nullptr) {
    delete emissive_;
  }
  emissive_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && shininess_ != nullptr) {
    delete shininess_;
  }
  shininess_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scene_blend_ != nullptr) {
    delete scene_blend_;
  }
  scene_blend_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && separate_scene_blend_ != nullptr) {
    delete separate_scene_blend_;
  }
  separate_scene_blend_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scene_blend_op_ != nullptr) {
    delete scene_blend_op_;
  }
  scene_blend_op_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && separate_scene_blend_op_ != nullptr) {
    delete separate_scene_blend_op_;
  }
  separate_scene_blend_op_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && depth_check_ != nullptr) {
    delete depth_check_;
  }
  depth_check_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && depth_write_ != nullptr) {
    delete depth_write_;
  }
  depth_write_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && depth_func_ != nullptr) {
    delete depth_func_;
  }
  depth_func_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && depth_bias_ != nullptr) {
    delete depth_bias_;
  }
  depth_bias_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && iteration_depth_bias_ != nullptr) {
    delete iteration_depth_bias_;
  }
  iteration_depth_bias_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && alpha_rejection_ != nullptr) {
    delete alpha_rejection_;
  }
  alpha_rejection_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && alpha_to_coverage_ != nullptr) {
    delete alpha_to_coverage_;
  }
  alpha_to_coverage_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && light_scissor_ != nullptr) {
    delete light_scissor_;
  }
  light_scissor_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && light_clip_planes_ != nullptr) {
    delete light_clip_planes_;
  }
  light_clip_planes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && illumination_stage_ != nullptr) {
    delete illumination_stage_;
  }
  illumination_stage_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && normailize_normals_ != nullptr) {
    delete normailize_normals_;
  }
  normailize_normals_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transparent_sorting_ != nullptr) {
    delete transparent_sorting_;
  }
  transparent_sorting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cull_hardware_ != nullptr) {
    delete cull_hardware_;
  }
  cull_hardware_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cull_software_ != nullptr) {
    delete cull_software_;
  }
  cull_software_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lighting_ != nullptr) {
    delete lighting_;
  }
  lighting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && shading_ != nullptr) {
    delete shading_;
  }
  shading_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && polygon_mode_ != nullptr) {
    delete polygon_mode_;
  }
  polygon_mode_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && polygon_mode_overrideable_ != nullptr) {
    delete polygon_mode_overrideable_;
  }
  polygon_mode_overrideable_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fog_ != nullptr) {
    delete fog_;
  }
  fog_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_write_ != nullptr) {
    delete color_write_;
  }
  color_write_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_lights_ != nullptr) {
    delete max_lights_;
  }
  max_lights_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && start_light_ != nullptr) {
    delete start_light_;
  }
  start_light_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && iteration_ != nullptr) {
    delete iteration_;
  }
  iteration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_size_ != nullptr) {
    delete point_size_;
  }
  point_size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_sprites_ != nullptr) {
    delete point_sprites_;
  }
  point_sprites_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_size_attenuation_ != nullptr) {
    delete point_size_attenuation_;
  }
  point_size_attenuation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_size_min_ != nullptr) {
    delete point_size_min_;
  }
  point_size_min_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_size_max_ != nullptr) {
    delete point_size_max_;
  }
  point_size_max_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gpu_program_ref_ != nullptr) {
    delete gpu_program_ref_;
  }
  gpu_program_ref_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Pass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightColor ambient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightColor diffuse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightColor specular = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_specular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightColor emissive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_emissive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Float shininess = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shininess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendScene scene_blend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scene_blend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.SeparateBlendScene separate_scene_blend = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_separate_scene_blend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.SceneBlendOperation scene_blend_op = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_scene_blend_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation separate_scene_blend_op = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_separate_scene_blend_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool depth_check = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool depth_write = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CompareFunc depth_func = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth_func(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.DepthBias depth_bias = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Float iteration_depth_bias = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteration_depth_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.AlphaRejection alpha_rejection = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_alpha_rejection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool alpha_to_coverage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_alpha_to_coverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool light_scissor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_scissor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool light_clip_planes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_clip_planes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Illumination illumination_stage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_illumination_stage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool normailize_normals = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_normailize_normals(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.SortingTransparent transparent_sorting = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_transparent_sorting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CullingHardware cull_hardware = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_cull_hardware(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CullingSoftware cull_software = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_cull_software(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool lighting = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_lighting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Shading shading = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_shading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Polygon polygon_mode = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool polygon_mode_overrideable = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon_mode_overrideable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Fog fog = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_fog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool color_write = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.UInt32 max_lights = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_lights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.UInt32 start_light = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Iteration iteration = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Float point_size = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool point_sprites = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_sprites(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.PointSizeAttenuation point_size_attenuation = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_size_attenuation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Float point_size_min = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_size_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Float point_size_max = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_size_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.GPUProgramRef gpu_program_ref = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_program_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.TextureUnit textures = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_textures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Pass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor ambient = 2;
  if (this->has_ambient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ambient(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor diffuse = 3;
  if (this->has_diffuse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::diffuse(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor specular = 4;
  if (this->has_specular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::specular(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor emissive = 5;
  if (this->has_emissive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::emissive(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Float shininess = 6;
  if (this->has_shininess()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::shininess(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.BlendScene scene_blend = 7;
  if (this->has_scene_blend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scene_blend(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.SeparateBlendScene separate_scene_blend = 8;
  if (this->has_separate_scene_blend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::separate_scene_blend(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.SceneBlendOperation scene_blend_op = 9;
  if (this->has_scene_blend_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::scene_blend_op(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation separate_scene_blend_op = 10;
  if (this->has_separate_scene_blend_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::separate_scene_blend_op(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool depth_check = 11;
  if (this->has_depth_check()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::depth_check(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool depth_write = 12;
  if (this->has_depth_write()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::depth_write(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.CompareFunc depth_func = 13;
  if (this->has_depth_func()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::depth_func(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.DepthBias depth_bias = 14;
  if (this->has_depth_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::depth_bias(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Float iteration_depth_bias = 15;
  if (this->has_iteration_depth_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::iteration_depth_bias(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.AlphaRejection alpha_rejection = 16;
  if (this->has_alpha_rejection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::alpha_rejection(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool alpha_to_coverage = 17;
  if (this->has_alpha_to_coverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::alpha_to_coverage(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool light_scissor = 18;
  if (this->has_light_scissor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::light_scissor(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool light_clip_planes = 19;
  if (this->has_light_clip_planes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::light_clip_planes(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Illumination illumination_stage = 20;
  if (this->has_illumination_stage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::illumination_stage(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool normailize_normals = 21;
  if (this->has_normailize_normals()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::normailize_normals(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.SortingTransparent transparent_sorting = 22;
  if (this->has_transparent_sorting()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::transparent_sorting(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.CullingHardware cull_hardware = 23;
  if (this->has_cull_hardware()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::cull_hardware(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.CullingSoftware cull_software = 24;
  if (this->has_cull_software()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::cull_software(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool lighting = 25;
  if (this->has_lighting()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::lighting(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Shading shading = 26;
  if (this->has_shading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::shading(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Polygon polygon_mode = 27;
  if (this->has_polygon_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::polygon_mode(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool polygon_mode_overrideable = 28;
  if (this->has_polygon_mode_overrideable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::polygon_mode_overrideable(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Fog fog = 29;
  if (this->has_fog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::fog(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool color_write = 30;
  if (this->has_color_write()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::color_write(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 max_lights = 31;
  if (this->has_max_lights()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::max_lights(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 start_light = 32;
  if (this->has_start_light()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::start_light(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Iteration iteration = 33;
  if (this->has_iteration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::iteration(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Float point_size = 34;
  if (this->has_point_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::point_size(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool point_sprites = 35;
  if (this->has_point_sprites()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::point_sprites(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.PointSizeAttenuation point_size_attenuation = 36;
  if (this->has_point_size_attenuation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::point_size_attenuation(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Float point_size_min = 37;
  if (this->has_point_size_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::point_size_min(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Float point_size_max = 38;
  if (this->has_point_size_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::point_size_max(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.GPUProgramRef gpu_program_ref = 39;
  if (this->has_gpu_program_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::gpu_program_ref(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.TextureUnit textures = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_textures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_textures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Pass)
  return target;
}

size_t Pass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Pass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.TextureUnit textures = 40;
  total_size += 2UL * this->_internal_textures_size();
  for (const auto& msg : this->textures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor ambient = 2;
  if (this->has_ambient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambient_);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor diffuse = 3;
  if (this->has_diffuse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diffuse_);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor specular = 4;
  if (this->has_specular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specular_);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor emissive = 5;
  if (this->has_emissive()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emissive_);
  }

  // .Tiny3D.Script.MaterialSystem.Float shininess = 6;
  if (this->has_shininess()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shininess_);
  }

  // .Tiny3D.Script.MaterialSystem.BlendScene scene_blend = 7;
  if (this->has_scene_blend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scene_blend_);
  }

  // .Tiny3D.Script.MaterialSystem.SeparateBlendScene separate_scene_blend = 8;
  if (this->has_separate_scene_blend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *separate_scene_blend_);
  }

  // .Tiny3D.Script.MaterialSystem.SceneBlendOperation scene_blend_op = 9;
  if (this->has_scene_blend_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scene_blend_op_);
  }

  // .Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation separate_scene_blend_op = 10;
  if (this->has_separate_scene_blend_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *separate_scene_blend_op_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool depth_check = 11;
  if (this->has_depth_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_check_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool depth_write = 12;
  if (this->has_depth_write()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_write_);
  }

  // .Tiny3D.Script.MaterialSystem.CompareFunc depth_func = 13;
  if (this->has_depth_func()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_func_);
  }

  // .Tiny3D.Script.MaterialSystem.DepthBias depth_bias = 14;
  if (this->has_depth_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_bias_);
  }

  // .Tiny3D.Script.MaterialSystem.Float iteration_depth_bias = 15;
  if (this->has_iteration_depth_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iteration_depth_bias_);
  }

  // .Tiny3D.Script.MaterialSystem.AlphaRejection alpha_rejection = 16;
  if (this->has_alpha_rejection()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alpha_rejection_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool alpha_to_coverage = 17;
  if (this->has_alpha_to_coverage()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alpha_to_coverage_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool light_scissor = 18;
  if (this->has_light_scissor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *light_scissor_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool light_clip_planes = 19;
  if (this->has_light_clip_planes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *light_clip_planes_);
  }

  // .Tiny3D.Script.MaterialSystem.Illumination illumination_stage = 20;
  if (this->has_illumination_stage()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *illumination_stage_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool normailize_normals = 21;
  if (this->has_normailize_normals()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normailize_normals_);
  }

  // .Tiny3D.Script.MaterialSystem.SortingTransparent transparent_sorting = 22;
  if (this->has_transparent_sorting()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transparent_sorting_);
  }

  // .Tiny3D.Script.MaterialSystem.CullingHardware cull_hardware = 23;
  if (this->has_cull_hardware()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cull_hardware_);
  }

  // .Tiny3D.Script.MaterialSystem.CullingSoftware cull_software = 24;
  if (this->has_cull_software()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cull_software_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool lighting = 25;
  if (this->has_lighting()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lighting_);
  }

  // .Tiny3D.Script.MaterialSystem.Shading shading = 26;
  if (this->has_shading()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shading_);
  }

  // .Tiny3D.Script.MaterialSystem.Polygon polygon_mode = 27;
  if (this->has_polygon_mode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygon_mode_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool polygon_mode_overrideable = 28;
  if (this->has_polygon_mode_overrideable()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygon_mode_overrideable_);
  }

  // .Tiny3D.Script.MaterialSystem.Fog fog = 29;
  if (this->has_fog()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fog_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool color_write = 30;
  if (this->has_color_write()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_write_);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 max_lights = 31;
  if (this->has_max_lights()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_lights_);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 start_light = 32;
  if (this->has_start_light()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_light_);
  }

  // .Tiny3D.Script.MaterialSystem.Iteration iteration = 33;
  if (this->has_iteration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iteration_);
  }

  // .Tiny3D.Script.MaterialSystem.Float point_size = 34;
  if (this->has_point_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_size_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool point_sprites = 35;
  if (this->has_point_sprites()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_sprites_);
  }

  // .Tiny3D.Script.MaterialSystem.PointSizeAttenuation point_size_attenuation = 36;
  if (this->has_point_size_attenuation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_size_attenuation_);
  }

  // .Tiny3D.Script.MaterialSystem.Float point_size_min = 37;
  if (this->has_point_size_min()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_size_min_);
  }

  // .Tiny3D.Script.MaterialSystem.Float point_size_max = 38;
  if (this->has_point_size_max()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_size_max_);
  }

  // .Tiny3D.Script.MaterialSystem.GPUProgramRef gpu_program_ref = 39;
  if (this->has_gpu_program_ref()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpu_program_ref_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pass::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Pass*>(
      &from));
}

void Pass::MergeFrom(const Pass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Pass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  textures_.MergeFrom(from.textures_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.has_ambient()) {
    _internal_mutable_ambient()->::Tiny3D::Script::MaterialSystem::LightColor::MergeFrom(from._internal_ambient());
  }
  if (from.has_diffuse()) {
    _internal_mutable_diffuse()->::Tiny3D::Script::MaterialSystem::LightColor::MergeFrom(from._internal_diffuse());
  }
  if (from.has_specular()) {
    _internal_mutable_specular()->::Tiny3D::Script::MaterialSystem::LightColor::MergeFrom(from._internal_specular());
  }
  if (from.has_emissive()) {
    _internal_mutable_emissive()->::Tiny3D::Script::MaterialSystem::LightColor::MergeFrom(from._internal_emissive());
  }
  if (from.has_shininess()) {
    _internal_mutable_shininess()->::Tiny3D::Script::MaterialSystem::Float::MergeFrom(from._internal_shininess());
  }
  if (from.has_scene_blend()) {
    _internal_mutable_scene_blend()->::Tiny3D::Script::MaterialSystem::BlendScene::MergeFrom(from._internal_scene_blend());
  }
  if (from.has_separate_scene_blend()) {
    _internal_mutable_separate_scene_blend()->::Tiny3D::Script::MaterialSystem::SeparateBlendScene::MergeFrom(from._internal_separate_scene_blend());
  }
  if (from.has_scene_blend_op()) {
    _internal_mutable_scene_blend_op()->::Tiny3D::Script::MaterialSystem::SceneBlendOperation::MergeFrom(from._internal_scene_blend_op());
  }
  if (from.has_separate_scene_blend_op()) {
    _internal_mutable_separate_scene_blend_op()->::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation::MergeFrom(from._internal_separate_scene_blend_op());
  }
  if (from.has_depth_check()) {
    _internal_mutable_depth_check()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_depth_check());
  }
  if (from.has_depth_write()) {
    _internal_mutable_depth_write()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_depth_write());
  }
  if (from.has_depth_func()) {
    _internal_mutable_depth_func()->::Tiny3D::Script::MaterialSystem::CompareFunc::MergeFrom(from._internal_depth_func());
  }
  if (from.has_depth_bias()) {
    _internal_mutable_depth_bias()->::Tiny3D::Script::MaterialSystem::DepthBias::MergeFrom(from._internal_depth_bias());
  }
  if (from.has_iteration_depth_bias()) {
    _internal_mutable_iteration_depth_bias()->::Tiny3D::Script::MaterialSystem::Float::MergeFrom(from._internal_iteration_depth_bias());
  }
  if (from.has_alpha_rejection()) {
    _internal_mutable_alpha_rejection()->::Tiny3D::Script::MaterialSystem::AlphaRejection::MergeFrom(from._internal_alpha_rejection());
  }
  if (from.has_alpha_to_coverage()) {
    _internal_mutable_alpha_to_coverage()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_alpha_to_coverage());
  }
  if (from.has_light_scissor()) {
    _internal_mutable_light_scissor()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_light_scissor());
  }
  if (from.has_light_clip_planes()) {
    _internal_mutable_light_clip_planes()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_light_clip_planes());
  }
  if (from.has_illumination_stage()) {
    _internal_mutable_illumination_stage()->::Tiny3D::Script::MaterialSystem::Illumination::MergeFrom(from._internal_illumination_stage());
  }
  if (from.has_normailize_normals()) {
    _internal_mutable_normailize_normals()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_normailize_normals());
  }
  if (from.has_transparent_sorting()) {
    _internal_mutable_transparent_sorting()->::Tiny3D::Script::MaterialSystem::SortingTransparent::MergeFrom(from._internal_transparent_sorting());
  }
  if (from.has_cull_hardware()) {
    _internal_mutable_cull_hardware()->::Tiny3D::Script::MaterialSystem::CullingHardware::MergeFrom(from._internal_cull_hardware());
  }
  if (from.has_cull_software()) {
    _internal_mutable_cull_software()->::Tiny3D::Script::MaterialSystem::CullingSoftware::MergeFrom(from._internal_cull_software());
  }
  if (from.has_lighting()) {
    _internal_mutable_lighting()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_lighting());
  }
  if (from.has_shading()) {
    _internal_mutable_shading()->::Tiny3D::Script::MaterialSystem::Shading::MergeFrom(from._internal_shading());
  }
  if (from.has_polygon_mode()) {
    _internal_mutable_polygon_mode()->::Tiny3D::Script::MaterialSystem::Polygon::MergeFrom(from._internal_polygon_mode());
  }
  if (from.has_polygon_mode_overrideable()) {
    _internal_mutable_polygon_mode_overrideable()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_polygon_mode_overrideable());
  }
  if (from.has_fog()) {
    _internal_mutable_fog()->::Tiny3D::Script::MaterialSystem::Fog::MergeFrom(from._internal_fog());
  }
  if (from.has_color_write()) {
    _internal_mutable_color_write()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_color_write());
  }
  if (from.has_max_lights()) {
    _internal_mutable_max_lights()->::Tiny3D::Script::MaterialSystem::UInt32::MergeFrom(from._internal_max_lights());
  }
  if (from.has_start_light()) {
    _internal_mutable_start_light()->::Tiny3D::Script::MaterialSystem::UInt32::MergeFrom(from._internal_start_light());
  }
  if (from.has_iteration()) {
    _internal_mutable_iteration()->::Tiny3D::Script::MaterialSystem::Iteration::MergeFrom(from._internal_iteration());
  }
  if (from.has_point_size()) {
    _internal_mutable_point_size()->::Tiny3D::Script::MaterialSystem::Float::MergeFrom(from._internal_point_size());
  }
  if (from.has_point_sprites()) {
    _internal_mutable_point_sprites()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_point_sprites());
  }
  if (from.has_point_size_attenuation()) {
    _internal_mutable_point_size_attenuation()->::Tiny3D::Script::MaterialSystem::PointSizeAttenuation::MergeFrom(from._internal_point_size_attenuation());
  }
  if (from.has_point_size_min()) {
    _internal_mutable_point_size_min()->::Tiny3D::Script::MaterialSystem::Float::MergeFrom(from._internal_point_size_min());
  }
  if (from.has_point_size_max()) {
    _internal_mutable_point_size_max()->::Tiny3D::Script::MaterialSystem::Float::MergeFrom(from._internal_point_size_max());
  }
  if (from.has_gpu_program_ref()) {
    _internal_mutable_gpu_program_ref()->::Tiny3D::Script::MaterialSystem::GPUProgramRef::MergeFrom(from._internal_gpu_program_ref());
  }
}

void Pass::CopyFrom(const Pass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Pass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pass::IsInitialized() const {
  return true;
}

void Pass::InternalSwap(Pass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  textures_.InternalSwap(&other->textures_);
  swap(header_, other->header_);
  swap(ambient_, other->ambient_);
  swap(diffuse_, other->diffuse_);
  swap(specular_, other->specular_);
  swap(emissive_, other->emissive_);
  swap(shininess_, other->shininess_);
  swap(scene_blend_, other->scene_blend_);
  swap(separate_scene_blend_, other->separate_scene_blend_);
  swap(scene_blend_op_, other->scene_blend_op_);
  swap(separate_scene_blend_op_, other->separate_scene_blend_op_);
  swap(depth_check_, other->depth_check_);
  swap(depth_write_, other->depth_write_);
  swap(depth_func_, other->depth_func_);
  swap(depth_bias_, other->depth_bias_);
  swap(iteration_depth_bias_, other->iteration_depth_bias_);
  swap(alpha_rejection_, other->alpha_rejection_);
  swap(alpha_to_coverage_, other->alpha_to_coverage_);
  swap(light_scissor_, other->light_scissor_);
  swap(light_clip_planes_, other->light_clip_planes_);
  swap(illumination_stage_, other->illumination_stage_);
  swap(normailize_normals_, other->normailize_normals_);
  swap(transparent_sorting_, other->transparent_sorting_);
  swap(cull_hardware_, other->cull_hardware_);
  swap(cull_software_, other->cull_software_);
  swap(lighting_, other->lighting_);
  swap(shading_, other->shading_);
  swap(polygon_mode_, other->polygon_mode_);
  swap(polygon_mode_overrideable_, other->polygon_mode_overrideable_);
  swap(fog_, other->fog_);
  swap(color_write_, other->color_write_);
  swap(max_lights_, other->max_lights_);
  swap(start_light_, other->start_light_);
  swap(iteration_, other->iteration_);
  swap(point_size_, other->point_size_);
  swap(point_sprites_, other->point_sprites_);
  swap(point_size_attenuation_, other->point_size_attenuation_);
  swap(point_size_min_, other->point_size_min_);
  swap(point_size_max_, other->point_size_max_);
  swap(gpu_program_ref_, other->gpu_program_ref_);
}

std::string Pass::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Pass";
}


// ===================================================================

void GPUVendorRule::InitAsDefaultInstance() {
}
class GPUVendorRule::_Internal {
 public:
};

GPUVendorRule::GPUVendorRule()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUVendorRule)
}
GPUVendorRule::GPUVendorRule(const GPUVendorRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_name().empty()) {
    vendor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
  }
  rule_ = from.rule_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUVendorRule)
}

void GPUVendorRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUVendorRule_MaterialScriptObject_2eproto.base);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_ = 0;
}

GPUVendorRule::~GPUVendorRule() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  SharedDtor();
}

void GPUVendorRule::SharedDtor() {
  vendor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPUVendorRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUVendorRule& GPUVendorRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUVendorRule_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUVendorRule::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_ = 0;
  _internal_metadata_.Clear();
}

const char* GPUVendorRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_rule(static_cast<::Tiny3D::Script::MaterialSystem::GPURuleType>(val));
        } else goto handle_unusual;
        continue;
      // string vendor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vendor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUVendorRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  if (this->rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rule(), target);
  }

  // string vendor_name = 2;
  if (this->vendor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_name().data(), static_cast<int>(this->_internal_vendor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  return target;
}

size_t GPUVendorRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor_name = 2;
  if (this->vendor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_name());
  }

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rule());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUVendorRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GPUVendorRule*>(
      &from));
}

void GPUVendorRule::MergeFrom(const GPUVendorRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vendor_name().size() > 0) {

    vendor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
  }
  if (from.rule() != 0) {
    _internal_set_rule(from._internal_rule());
  }
}

void GPUVendorRule::CopyFrom(const GPUVendorRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUVendorRule::IsInitialized() const {
  return true;
}

void GPUVendorRule::InternalSwap(GPUVendorRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vendor_name_.Swap(&other->vendor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rule_, other->rule_);
}

std::string GPUVendorRule::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.GPUVendorRule";
}


// ===================================================================

void GPUDeviceRule::InitAsDefaultInstance() {
}
class GPUDeviceRule::_Internal {
 public:
};

GPUDeviceRule::GPUDeviceRule()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
}
GPUDeviceRule::GPUDeviceRule(const GPUDeviceRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_pattern().empty()) {
    device_pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_pattern_);
  }
  ::memcpy(&rule_, &from.rule_,
    static_cast<size_t>(reinterpret_cast<char*>(&case_sensitive_) -
    reinterpret_cast<char*>(&rule_)) + sizeof(case_sensitive_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
}

void GPUDeviceRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUDeviceRule_MaterialScriptObject_2eproto.base);
  device_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case_sensitive_) -
      reinterpret_cast<char*>(&rule_)) + sizeof(case_sensitive_));
}

GPUDeviceRule::~GPUDeviceRule() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  SharedDtor();
}

void GPUDeviceRule::SharedDtor() {
  device_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPUDeviceRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUDeviceRule& GPUDeviceRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUDeviceRule_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUDeviceRule::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case_sensitive_) -
      reinterpret_cast<char*>(&rule_)) + sizeof(case_sensitive_));
  _internal_metadata_.Clear();
}

const char* GPUDeviceRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_rule(static_cast<::Tiny3D::Script::MaterialSystem::GPURuleType>(val));
        } else goto handle_unusual;
        continue;
      // string device_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool case_sensitive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          case_sensitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUDeviceRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  if (this->rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rule(), target);
  }

  // string device_pattern = 2;
  if (this->device_pattern().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_pattern().data(), static_cast<int>(this->_internal_device_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_pattern(), target);
  }

  // bool case_sensitive = 3;
  if (this->case_sensitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_case_sensitive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  return target;
}

size_t GPUDeviceRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_pattern = 2;
  if (this->device_pattern().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_pattern());
  }

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rule());
  }

  // bool case_sensitive = 3;
  if (this->case_sensitive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUDeviceRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GPUDeviceRule*>(
      &from));
}

void GPUDeviceRule::MergeFrom(const GPUDeviceRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_pattern().size() > 0) {

    device_pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_pattern_);
  }
  if (from.rule() != 0) {
    _internal_set_rule(from._internal_rule());
  }
  if (from.case_sensitive() != 0) {
    _internal_set_case_sensitive(from._internal_case_sensitive());
  }
}

void GPUDeviceRule::CopyFrom(const GPUDeviceRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUDeviceRule::IsInitialized() const {
  return true;
}

void GPUDeviceRule::InternalSwap(GPUDeviceRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_pattern_.Swap(&other->device_pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rule_, other->rule_);
  swap(case_sensitive_, other->case_sensitive_);
}

std::string GPUDeviceRule::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.GPUDeviceRule";
}


// ===================================================================

void Technique::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->render_queue_ = const_cast< ::Tiny3D::Script::MaterialSystem::UInt32*>(
      ::Tiny3D::Script::MaterialSystem::UInt32::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->lod_index_ = const_cast< ::Tiny3D::Script::MaterialSystem::UInt32*>(
      ::Tiny3D::Script::MaterialSystem::UInt32::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->scheme_ = const_cast< ::Tiny3D::Script::MaterialSystem::String*>(
      ::Tiny3D::Script::MaterialSystem::String::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->shadow_caster_material_ = const_cast< ::Tiny3D::Script::MaterialSystem::String*>(
      ::Tiny3D::Script::MaterialSystem::String::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->shadow_receiver_material_ = const_cast< ::Tiny3D::Script::MaterialSystem::String*>(
      ::Tiny3D::Script::MaterialSystem::String::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->gpu_vendor_rule_ = const_cast< ::Tiny3D::Script::MaterialSystem::GPUVendorRule*>(
      ::Tiny3D::Script::MaterialSystem::GPUVendorRule::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->gpu_device_rule_ = const_cast< ::Tiny3D::Script::MaterialSystem::GPUDeviceRule*>(
      ::Tiny3D::Script::MaterialSystem::GPUDeviceRule::internal_default_instance());
}
class Technique::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::UInt32& render_queue(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::UInt32& lod_index(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::String& scheme(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::String& shadow_caster_material(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::String& shadow_receiver_material(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::GPUVendorRule& gpu_vendor_rule(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule& gpu_device_rule(const Technique* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
Technique::_Internal::header(const Technique* msg) {
  return *msg->header_;
}
const ::Tiny3D::Script::MaterialSystem::UInt32&
Technique::_Internal::render_queue(const Technique* msg) {
  return *msg->render_queue_;
}
const ::Tiny3D::Script::MaterialSystem::UInt32&
Technique::_Internal::lod_index(const Technique* msg) {
  return *msg->lod_index_;
}
const ::Tiny3D::Script::MaterialSystem::String&
Technique::_Internal::scheme(const Technique* msg) {
  return *msg->scheme_;
}
const ::Tiny3D::Script::MaterialSystem::String&
Technique::_Internal::shadow_caster_material(const Technique* msg) {
  return *msg->shadow_caster_material_;
}
const ::Tiny3D::Script::MaterialSystem::String&
Technique::_Internal::shadow_receiver_material(const Technique* msg) {
  return *msg->shadow_receiver_material_;
}
const ::Tiny3D::Script::MaterialSystem::GPUVendorRule&
Technique::_Internal::gpu_vendor_rule(const Technique* msg) {
  return *msg->gpu_vendor_rule_;
}
const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule&
Technique::_Internal::gpu_device_rule(const Technique* msg) {
  return *msg->gpu_device_rule_;
}
Technique::Technique()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Technique)
}
Technique::Technique(const Technique& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      passes_(from.passes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_render_queue()) {
    render_queue_ = new ::Tiny3D::Script::MaterialSystem::UInt32(*from.render_queue_);
  } else {
    render_queue_ = nullptr;
  }
  if (from._internal_has_lod_index()) {
    lod_index_ = new ::Tiny3D::Script::MaterialSystem::UInt32(*from.lod_index_);
  } else {
    lod_index_ = nullptr;
  }
  if (from._internal_has_scheme()) {
    scheme_ = new ::Tiny3D::Script::MaterialSystem::String(*from.scheme_);
  } else {
    scheme_ = nullptr;
  }
  if (from._internal_has_shadow_caster_material()) {
    shadow_caster_material_ = new ::Tiny3D::Script::MaterialSystem::String(*from.shadow_caster_material_);
  } else {
    shadow_caster_material_ = nullptr;
  }
  if (from._internal_has_shadow_receiver_material()) {
    shadow_receiver_material_ = new ::Tiny3D::Script::MaterialSystem::String(*from.shadow_receiver_material_);
  } else {
    shadow_receiver_material_ = nullptr;
  }
  if (from._internal_has_gpu_vendor_rule()) {
    gpu_vendor_rule_ = new ::Tiny3D::Script::MaterialSystem::GPUVendorRule(*from.gpu_vendor_rule_);
  } else {
    gpu_vendor_rule_ = nullptr;
  }
  if (from._internal_has_gpu_device_rule()) {
    gpu_device_rule_ = new ::Tiny3D::Script::MaterialSystem::GPUDeviceRule(*from.gpu_device_rule_);
  } else {
    gpu_device_rule_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Technique)
}

void Technique::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Technique_MaterialScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_device_rule_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gpu_device_rule_));
}

Technique::~Technique() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Technique)
  SharedDtor();
}

void Technique::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete render_queue_;
  if (this != internal_default_instance()) delete lod_index_;
  if (this != internal_default_instance()) delete scheme_;
  if (this != internal_default_instance()) delete shadow_caster_material_;
  if (this != internal_default_instance()) delete shadow_receiver_material_;
  if (this != internal_default_instance()) delete gpu_vendor_rule_;
  if (this != internal_default_instance()) delete gpu_device_rule_;
}

void Technique::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Technique& Technique::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Technique_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Technique::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Technique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passes_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && render_queue_ != nullptr) {
    delete render_queue_;
  }
  render_queue_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lod_index_ != nullptr) {
    delete lod_index_;
  }
  lod_index_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scheme_ != nullptr) {
    delete scheme_;
  }
  scheme_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && shadow_caster_material_ != nullptr) {
    delete shadow_caster_material_;
  }
  shadow_caster_material_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && shadow_receiver_material_ != nullptr) {
    delete shadow_receiver_material_;
  }
  shadow_receiver_material_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gpu_vendor_rule_ != nullptr) {
    delete gpu_vendor_rule_;
  }
  gpu_vendor_rule_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gpu_device_rule_ != nullptr) {
    delete gpu_device_rule_;
  }
  gpu_device_rule_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Technique::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.UInt32 render_queue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_queue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.UInt32 lod_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lod_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.String scheme = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.String shadow_caster_material = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow_caster_material(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.String shadow_receiver_material = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow_receiver_material(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.GPUVendorRule gpu_vendor_rule = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_vendor_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.GPUDeviceRule gpu_device_rule = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_device_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.Pass passes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Technique::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Technique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 render_queue = 2;
  if (this->has_render_queue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::render_queue(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 lod_index = 3;
  if (this->has_lod_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lod_index(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.String scheme = 4;
  if (this->has_scheme()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::scheme(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.String shadow_caster_material = 5;
  if (this->has_shadow_caster_material()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::shadow_caster_material(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.String shadow_receiver_material = 6;
  if (this->has_shadow_receiver_material()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::shadow_receiver_material(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.GPUVendorRule gpu_vendor_rule = 7;
  if (this->has_gpu_vendor_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gpu_vendor_rule(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.GPUDeviceRule gpu_device_rule = 8;
  if (this->has_gpu_device_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gpu_device_rule(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Pass passes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_passes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_passes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Technique)
  return target;
}

size_t Technique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Technique)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.Pass passes = 9;
  total_size += 1UL * this->_internal_passes_size();
  for (const auto& msg : this->passes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 render_queue = 2;
  if (this->has_render_queue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *render_queue_);
  }

  // .Tiny3D.Script.MaterialSystem.UInt32 lod_index = 3;
  if (this->has_lod_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lod_index_);
  }

  // .Tiny3D.Script.MaterialSystem.String scheme = 4;
  if (this->has_scheme()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scheme_);
  }

  // .Tiny3D.Script.MaterialSystem.String shadow_caster_material = 5;
  if (this->has_shadow_caster_material()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shadow_caster_material_);
  }

  // .Tiny3D.Script.MaterialSystem.String shadow_receiver_material = 6;
  if (this->has_shadow_receiver_material()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shadow_receiver_material_);
  }

  // .Tiny3D.Script.MaterialSystem.GPUVendorRule gpu_vendor_rule = 7;
  if (this->has_gpu_vendor_rule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpu_vendor_rule_);
  }

  // .Tiny3D.Script.MaterialSystem.GPUDeviceRule gpu_device_rule = 8;
  if (this->has_gpu_device_rule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpu_device_rule_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Technique::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Technique*>(
      &from));
}

void Technique::MergeFrom(const Technique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Technique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  passes_.MergeFrom(from.passes_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.has_render_queue()) {
    _internal_mutable_render_queue()->::Tiny3D::Script::MaterialSystem::UInt32::MergeFrom(from._internal_render_queue());
  }
  if (from.has_lod_index()) {
    _internal_mutable_lod_index()->::Tiny3D::Script::MaterialSystem::UInt32::MergeFrom(from._internal_lod_index());
  }
  if (from.has_scheme()) {
    _internal_mutable_scheme()->::Tiny3D::Script::MaterialSystem::String::MergeFrom(from._internal_scheme());
  }
  if (from.has_shadow_caster_material()) {
    _internal_mutable_shadow_caster_material()->::Tiny3D::Script::MaterialSystem::String::MergeFrom(from._internal_shadow_caster_material());
  }
  if (from.has_shadow_receiver_material()) {
    _internal_mutable_shadow_receiver_material()->::Tiny3D::Script::MaterialSystem::String::MergeFrom(from._internal_shadow_receiver_material());
  }
  if (from.has_gpu_vendor_rule()) {
    _internal_mutable_gpu_vendor_rule()->::Tiny3D::Script::MaterialSystem::GPUVendorRule::MergeFrom(from._internal_gpu_vendor_rule());
  }
  if (from.has_gpu_device_rule()) {
    _internal_mutable_gpu_device_rule()->::Tiny3D::Script::MaterialSystem::GPUDeviceRule::MergeFrom(from._internal_gpu_device_rule());
  }
}

void Technique::CopyFrom(const Technique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Technique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Technique::IsInitialized() const {
  return true;
}

void Technique::InternalSwap(Technique* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  passes_.InternalSwap(&other->passes_);
  swap(header_, other->header_);
  swap(render_queue_, other->render_queue_);
  swap(lod_index_, other->lod_index_);
  swap(scheme_, other->scheme_);
  swap(shadow_caster_material_, other->shadow_caster_material_);
  swap(shadow_receiver_material_, other->shadow_receiver_material_);
  swap(gpu_vendor_rule_, other->gpu_vendor_rule_);
  swap(gpu_device_rule_, other->gpu_device_rule_);
}

std::string Technique::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Technique";
}


// ===================================================================

void LODValues::InitAsDefaultInstance() {
}
class LODValues::_Internal {
 public:
};

LODValues::LODValues()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.LODValues)
}
LODValues::LODValues(const LODValues& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strategy().empty()) {
    strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.LODValues)
}

void LODValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LODValues_MaterialScriptObject_2eproto.base);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LODValues::~LODValues() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.LODValues)
  SharedDtor();
}

void LODValues::SharedDtor() {
  strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LODValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LODValues& LODValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LODValues_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void LODValues::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.LODValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  strategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LODValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LODValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.LODValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  // string strategy = 3;
  if (this->strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strategy().data(), static_cast<int>(this->_internal_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.LODValues.strategy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.LODValues)
  return target;
}

size_t LODValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.LODValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string strategy = 3;
  if (this->strategy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strategy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LODValues::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LODValues*>(
      &from));
}

void LODValues::MergeFrom(const LODValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.LODValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.strategy().size() > 0) {

    strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
}

void LODValues::CopyFrom(const LODValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.LODValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LODValues::IsInitialized() const {
  return true;
}

void LODValues::InternalSwap(LODValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  strategy_.Swap(&other->strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string LODValues::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.LODValues";
}


// ===================================================================

void TextureAlias::InitAsDefaultInstance() {
}
class TextureAlias::_Internal {
 public:
};

TextureAlias::TextureAlias()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TextureAlias)
}
TextureAlias::TextureAlias(const TextureAlias& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias_name().empty()) {
    alias_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alias_name_);
  }
  texture_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_texture_name().empty()) {
    texture_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texture_name_);
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TextureAlias)
}

void TextureAlias::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextureAlias_MaterialScriptObject_2eproto.base);
  alias_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextureAlias::~TextureAlias() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TextureAlias)
  SharedDtor();
}

void TextureAlias::SharedDtor() {
  alias_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextureAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextureAlias& TextureAlias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextureAlias_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TextureAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alias_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TextureAlias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string alias_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_alias_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string texture_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_texture_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextureAlias::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias_name = 1;
  if (this->alias_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias_name().data(), static_cast<int>(this->_internal_alias_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.TextureAlias.alias_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_alias_name(), target);
  }

  // string texture_name = 2;
  if (this->texture_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_texture_name().data(), static_cast<int>(this->_internal_texture_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.TextureAlias.texture_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_texture_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TextureAlias)
  return target;
}

size_t TextureAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alias_name = 1;
  if (this->alias_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias_name());
  }

  // string texture_name = 2;
  if (this->texture_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_texture_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextureAlias::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TextureAlias*>(
      &from));
}

void TextureAlias::MergeFrom(const TextureAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias_name().size() > 0) {

    alias_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alias_name_);
  }
  if (from.texture_name().size() > 0) {

    texture_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texture_name_);
  }
}

void TextureAlias::CopyFrom(const TextureAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureAlias::IsInitialized() const {
  return true;
}

void TextureAlias::InternalSwap(TextureAlias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  alias_name_.Swap(&other->alias_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_name_.Swap(&other->texture_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string TextureAlias::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.TextureAlias";
}


// ===================================================================

void Material::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Material_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Material_default_instance_._instance.get_mutable()->values_ = const_cast< ::Tiny3D::Script::MaterialSystem::LODValues*>(
      ::Tiny3D::Script::MaterialSystem::LODValues::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Material_default_instance_._instance.get_mutable()->receive_shadows_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Material_default_instance_._instance.get_mutable()->transparency_casts_shadows_ = const_cast< ::Tiny3D::Script::MaterialSystem::Bool*>(
      ::Tiny3D::Script::MaterialSystem::Bool::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Material_default_instance_._instance.get_mutable()->texture_alias_ = const_cast< ::Tiny3D::Script::MaterialSystem::TextureAlias*>(
      ::Tiny3D::Script::MaterialSystem::TextureAlias::internal_default_instance());
}
class Material::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const Material* msg);
  static const ::Tiny3D::Script::MaterialSystem::LODValues& values(const Material* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& receive_shadows(const Material* msg);
  static const ::Tiny3D::Script::MaterialSystem::Bool& transparency_casts_shadows(const Material* msg);
  static const ::Tiny3D::Script::MaterialSystem::TextureAlias& texture_alias(const Material* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
Material::_Internal::header(const Material* msg) {
  return *msg->header_;
}
const ::Tiny3D::Script::MaterialSystem::LODValues&
Material::_Internal::values(const Material* msg) {
  return *msg->values_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Material::_Internal::receive_shadows(const Material* msg) {
  return *msg->receive_shadows_;
}
const ::Tiny3D::Script::MaterialSystem::Bool&
Material::_Internal::transparency_casts_shadows(const Material* msg) {
  return *msg->transparency_casts_shadows_;
}
const ::Tiny3D::Script::MaterialSystem::TextureAlias&
Material::_Internal::texture_alias(const Material* msg) {
  return *msg->texture_alias_;
}
Material::Material()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Material)
}
Material::Material(const Material& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      techniques_(from.techniques_),
      cbuffers_(from.cbuffers_),
      programs_(from.programs_),
      samplers_(from.samplers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_values()) {
    values_ = new ::Tiny3D::Script::MaterialSystem::LODValues(*from.values_);
  } else {
    values_ = nullptr;
  }
  if (from._internal_has_receive_shadows()) {
    receive_shadows_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.receive_shadows_);
  } else {
    receive_shadows_ = nullptr;
  }
  if (from._internal_has_transparency_casts_shadows()) {
    transparency_casts_shadows_ = new ::Tiny3D::Script::MaterialSystem::Bool(*from.transparency_casts_shadows_);
  } else {
    transparency_casts_shadows_ = nullptr;
  }
  if (from._internal_has_texture_alias()) {
    texture_alias_ = new ::Tiny3D::Script::MaterialSystem::TextureAlias(*from.texture_alias_);
  } else {
    texture_alias_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Material)
}

void Material::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Material_MaterialScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&texture_alias_) -
      reinterpret_cast<char*>(&header_)) + sizeof(texture_alias_));
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Material)
  SharedDtor();
}

void Material::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete values_;
  if (this != internal_default_instance()) delete receive_shadows_;
  if (this != internal_default_instance()) delete transparency_casts_shadows_;
  if (this != internal_default_instance()) delete texture_alias_;
}

void Material::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Material& Material::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Material_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techniques_.Clear();
  cbuffers_.Clear();
  programs_.Clear();
  samplers_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && receive_shadows_ != nullptr) {
    delete receive_shadows_;
  }
  receive_shadows_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transparency_casts_shadows_ != nullptr) {
    delete transparency_casts_shadows_;
  }
  transparency_casts_shadows_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && texture_alias_ != nullptr) {
    delete texture_alias_;
  }
  texture_alias_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Material::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LODValues values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool receive_shadows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_receive_shadows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Bool transparency_casts_shadows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transparency_casts_shadows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TextureAlias texture_alias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture_alias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.Technique techniques = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_techniques(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBuffer cbuffers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cbuffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.GPUProgram programs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_programs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.Sampler samplers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samplers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Material::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LODValues values = 2;
  if (this->has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool receive_shadows = 3;
  if (this->has_receive_shadows()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::receive_shadows(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.Bool transparency_casts_shadows = 4;
  if (this->has_transparency_casts_shadows()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transparency_casts_shadows(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.TextureAlias texture_alias = 5;
  if (this->has_texture_alias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::texture_alias(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Technique techniques = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_techniques_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_techniques(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBuffer cbuffers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cbuffers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_cbuffers(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.GPUProgram programs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_programs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_programs(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Sampler samplers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_samplers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_samplers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Material)
  return target;
}

size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Material)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.Technique techniques = 6;
  total_size += 1UL * this->_internal_techniques_size();
  for (const auto& msg : this->techniques_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBuffer cbuffers = 7;
  total_size += 1UL * this->_internal_cbuffers_size();
  for (const auto& msg : this->cbuffers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.GPUProgram programs = 8;
  total_size += 1UL * this->_internal_programs_size();
  for (const auto& msg : this->programs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Sampler samplers = 9;
  total_size += 1UL * this->_internal_samplers_size();
  for (const auto& msg : this->samplers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Tiny3D.Script.MaterialSystem.LODValues values = 2;
  if (this->has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool receive_shadows = 3;
  if (this->has_receive_shadows()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receive_shadows_);
  }

  // .Tiny3D.Script.MaterialSystem.Bool transparency_casts_shadows = 4;
  if (this->has_transparency_casts_shadows()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transparency_casts_shadows_);
  }

  // .Tiny3D.Script.MaterialSystem.TextureAlias texture_alias = 5;
  if (this->has_texture_alias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texture_alias_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Material*>(
      &from));
}

void Material::MergeFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  techniques_.MergeFrom(from.techniques_);
  cbuffers_.MergeFrom(from.cbuffers_);
  programs_.MergeFrom(from.programs_);
  samplers_.MergeFrom(from.samplers_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.has_values()) {
    _internal_mutable_values()->::Tiny3D::Script::MaterialSystem::LODValues::MergeFrom(from._internal_values());
  }
  if (from.has_receive_shadows()) {
    _internal_mutable_receive_shadows()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_receive_shadows());
  }
  if (from.has_transparency_casts_shadows()) {
    _internal_mutable_transparency_casts_shadows()->::Tiny3D::Script::MaterialSystem::Bool::MergeFrom(from._internal_transparency_casts_shadows());
  }
  if (from.has_texture_alias()) {
    _internal_mutable_texture_alias()->::Tiny3D::Script::MaterialSystem::TextureAlias::MergeFrom(from._internal_texture_alias());
  }
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  return true;
}

void Material::InternalSwap(Material* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  techniques_.InternalSwap(&other->techniques_);
  cbuffers_.InternalSwap(&other->cbuffers_);
  programs_.InternalSwap(&other->programs_);
  samplers_.InternalSwap(&other->samplers_);
  swap(header_, other->header_);
  swap(values_, other->values_);
  swap(receive_shadows_, other->receive_shadows_);
  swap(transparency_casts_shadows_, other->transparency_casts_shadows_);
  swap(texture_alias_, other->texture_alias_);
}

std::string Material::GetTypeName() const {
  return "Tiny3D.Script.MaterialSystem.Material";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MaterialSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Header* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Header >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Color* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Color >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Matrix4* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Matrix4 >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Matrix4 >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Bool* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Bool >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Bool >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Float* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Float >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Float >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::UInt32* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::UInt32 >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::UInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Int32* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Int32 >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Int32 >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::String* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::String >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::String >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::CompareFunc* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::CompareFunc >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::CompareFunc >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Shader* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Shader >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Shader >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUProgram* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUProgram >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUProgram >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUProgramRef* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUProgramRef >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUProgramRef >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Param* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Param >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Param >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::ParamAuto* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::ParamAuto >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::ParamAuto >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TexAddressModeSimple* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TexAddressModeSimple >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TexAddressModeSimple >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TexAddressModeComplex* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TexAddressModeComplex >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TexAddressModeComplex >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TexAddressMode* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TexAddressMode >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TexAddressMode >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TexFilterSimple* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TexFilterSimple >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TexFilterSimple >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TexFilterComplex* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TexFilterComplex >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TexFilterComplex >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TexFilter* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TexFilter >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TexFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Sampler* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Sampler >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Sampler >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Texture* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Texture >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Texture >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::AnimTextureSimple* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::AnimTextureSimple >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::AnimTextureSimple >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::AnimTextureComplex* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::AnimTextureComplex >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::AnimTextureComplex >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::AnimTexture* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::AnimTexture >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::AnimTexture >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::CubicTextureSimple* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::CubicTextureSimple >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::CubicTextureSimple >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::CubicTextureComplex* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::CubicTextureComplex >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::CubicTextureComplex >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::CubicTexture* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::CubicTexture >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::CubicTexture >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Binding* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Binding >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Binding >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::ColorOp* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::ColorOp >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::ColorOp >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TextureUnit* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TextureUnit >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TextureUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::LightColor* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::LightColor >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::LightColor >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::BlendSceneFactor >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::BlendSceneFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::BlendScene* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::BlendScene >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::BlendScene >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SimpleBlendType* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SimpleBlendType >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SimpleBlendType >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SeparateBlendScene >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SeparateBlendScene >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SceneBlendOperation* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SceneBlendOperation >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SceneBlendOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::DepthBias* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::DepthBias >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::DepthBias >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::AlphaRejection* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::AlphaRejection >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::AlphaRejection >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Illumination* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Illumination >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Illumination >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SortingTransparent* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SortingTransparent >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SortingTransparent >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::CullingHardware* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::CullingHardware >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::CullingHardware >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::CullingSoftware* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::CullingSoftware >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::CullingSoftware >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Shading* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Shading >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Shading >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Polygon* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Fog* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Fog >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Fog >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::IterationOnce* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::IterationOnce >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::IterationOnce >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::IterationOncePerLight* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::IterationOncePerLight >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::IterationOncePerLight >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::IterationNumber* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::IterationNumber >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::IterationNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::IterationPerLight* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::IterationPerLight >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::IterationPerLight >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::IterationPerNLight* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::IterationPerNLight >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::IterationPerNLight >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Iteration* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Iteration >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Iteration >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Pass* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Pass >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Pass >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUVendorRule* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUVendorRule >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUVendorRule >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUDeviceRule >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUDeviceRule >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Technique* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Technique >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Technique >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::LODValues* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::LODValues >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::LODValues >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TextureAlias* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TextureAlias >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TextureAlias >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Material* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Material >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Material >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
