// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneScriptObject.proto

#include "SceneScriptObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectHeader_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SceneScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Component_SceneScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SceneScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mesh_SceneScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SceneScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transform_SceneScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_CommonScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace SceneSystem {
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class ComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Component> _instance;
  const ::Tiny3D::Script::SceneSystem::Transform* transform_;
  const ::Tiny3D::Script::SceneSystem::Mesh* mesh_;
} _Component_default_instance_;
class TransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transform> _instance;
} _Transform_default_instance_;
class MeshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mesh> _instance;
} _Mesh_default_instance_;
}  // namespace SceneSystem
}  // namespace Script
}  // namespace Tiny3D
static void InitDefaultsscc_info_Component_SceneScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::SceneSystem::_Component_default_instance_;
    new (ptr) ::Tiny3D::Script::SceneSystem::Component();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::SceneSystem::Component::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Component_SceneScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Component_SceneScriptObject_2eproto}, {
      &scc_info_Transform_SceneScriptObject_2eproto.base,
      &scc_info_Mesh_SceneScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Mesh_SceneScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::SceneSystem::_Mesh_default_instance_;
    new (ptr) ::Tiny3D::Script::SceneSystem::Mesh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::SceneSystem::Mesh::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mesh_SceneScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mesh_SceneScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Node_SceneScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::SceneSystem::_Node_default_instance_;
    new (ptr) ::Tiny3D::Script::SceneSystem::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::SceneSystem::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_SceneScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Node_SceneScriptObject_2eproto}, {
      &scc_info_ObjectHeader_CommonScriptObject_2eproto.base,
      &scc_info_Component_SceneScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Transform_SceneScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::SceneSystem::_Transform_default_instance_;
    new (ptr) ::Tiny3D::Script::SceneSystem::Transform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::SceneSystem::Transform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transform_SceneScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transform_SceneScriptObject_2eproto}, {
      &scc_info_Vector3_CommonScriptObject_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SceneScriptObject_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SceneScriptObject_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SceneScriptObject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SceneScriptObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Node, header_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Node, parent_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Node, children_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Node, components_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Component, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Component, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Component, type_),
  offsetof(::Tiny3D::Script::SceneSystem::ComponentDefaultTypeInternal, transform_),
  offsetof(::Tiny3D::Script::SceneSystem::ComponentDefaultTypeInternal, mesh_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Component, ComponentOneOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Transform, position_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Transform, rotation_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Transform, scaling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Mesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Mesh, resid_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::SceneSystem::Mesh, mesh_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Tiny3D::Script::SceneSystem::Node)},
  { 9, -1, sizeof(::Tiny3D::Script::SceneSystem::Component)},
  { 18, -1, sizeof(::Tiny3D::Script::SceneSystem::Transform)},
  { 26, -1, sizeof(::Tiny3D::Script::SceneSystem::Mesh)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::SceneSystem::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::SceneSystem::_Component_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::SceneSystem::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::SceneSystem::_Mesh_default_instance_),
};

const char descriptor_table_protodef_SceneScriptObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027SceneScriptObject.proto\022\031Tiny3D.Script"
  ".SceneSystem\032\030CommonScriptObject.proto\032\027"
  "ModelScriptObject.proto\"\217\001\n\004Node\022+\n\006head"
  "er\030\001 \001(\0132\033.Tiny3D.Script.ObjectHeader\022\016\n"
  "\006parent\030\002 \001(\r\022\020\n\010children\030\003 \003(\r\0228\n\ncompo"
  "nents\030\004 \003(\0132$.Tiny3D.Script.SceneSystem."
  "Component\"\301\001\n\tComponent\0226\n\004type\030\001 \001(\0162(."
  "Tiny3D.Script.SceneSystem.ComponentType\022"
  "9\n\ttransform\030\002 \001(\0132$.Tiny3D.Script.Scene"
  "System.TransformH\000\022/\n\004mesh\030\003 \001(\0132\037.Tiny3"
  "D.Script.SceneSystem.MeshH\000B\020\n\016Component"
  "OneOf\"\210\001\n\tTransform\022(\n\010position\030\002 \001(\0132\026."
  "Tiny3D.Script.Vector3\022(\n\010rotation\030\003 \001(\0132"
  "\026.Tiny3D.Script.Vector3\022\'\n\007scaling\030\004 \001(\013"
  "2\026.Tiny3D.Script.Vector3\"(\n\004Mesh\022\r\n\005resI"
  "D\030\001 \001(\r\022\021\n\tmesh_name\030\002 \001(\t*.\n\rComponentT"
  "ype\022\020\n\014CT_TRANSFORM\020\000\022\013\n\007CT_MESH\020\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SceneScriptObject_2eproto_deps[2] = {
  &::descriptor_table_CommonScriptObject_2eproto,
  &::descriptor_table_ModelScriptObject_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SceneScriptObject_2eproto_sccs[4] = {
  &scc_info_Component_SceneScriptObject_2eproto.base,
  &scc_info_Mesh_SceneScriptObject_2eproto.base,
  &scc_info_Node_SceneScriptObject_2eproto.base,
  &scc_info_Transform_SceneScriptObject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SceneScriptObject_2eproto_once;
static bool descriptor_table_SceneScriptObject_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SceneScriptObject_2eproto = {
  &descriptor_table_SceneScriptObject_2eproto_initialized, descriptor_table_protodef_SceneScriptObject_2eproto, "SceneScriptObject.proto", 682,
  &descriptor_table_SceneScriptObject_2eproto_once, descriptor_table_SceneScriptObject_2eproto_sccs, descriptor_table_SceneScriptObject_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_SceneScriptObject_2eproto::offsets,
  file_level_metadata_SceneScriptObject_2eproto, 4, file_level_enum_descriptors_SceneScriptObject_2eproto, file_level_service_descriptors_SceneScriptObject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SceneScriptObject_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SceneScriptObject_2eproto), true);
namespace Tiny3D {
namespace Script {
namespace SceneSystem {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SceneScriptObject_2eproto);
  return file_level_enum_descriptors_SceneScriptObject_2eproto[0];
}
bool ComponentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::Tiny3D::Script::SceneSystem::_Node_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::ObjectHeader*>(
      ::Tiny3D::Script::ObjectHeader::internal_default_instance());
}
class Node::_Internal {
 public:
  static const ::Tiny3D::Script::ObjectHeader& header(const Node* msg);
};

const ::Tiny3D::Script::ObjectHeader&
Node::_Internal::header(const Node* msg) {
  return *msg->header_;
}
void Node::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Node::Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.SceneSystem.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      children_(from.children_),
      components_(from.components_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::ObjectHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  parent_ = from.parent_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.SceneSystem.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_SceneScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&header_)) + sizeof(parent_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.SceneSystem.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_SceneScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.SceneSystem.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  components_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  parent_ = 0u;
  _internal_metadata_.Clear();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ObjectHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.SceneSystem.Component components = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.SceneSystem.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ObjectHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 parent = 2;
  if (this->parent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parent(), target);
  }

  // repeated uint32 children = 3;
  {
    int byte_size = _children_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_children(), byte_size, target);
    }
  }

  // repeated .Tiny3D.Script.SceneSystem.Component components = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.SceneSystem.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.SceneSystem.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 children = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->children_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tiny3D.Script.SceneSystem.Component components = 4;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.ObjectHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 parent = 2;
  if (this->parent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.SceneSystem.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.SceneSystem.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.SceneSystem.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.SceneSystem.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  components_.MergeFrom(from.components_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::ObjectHeader::MergeFrom(from._internal_header());
  }
  if (from.parent() != 0) {
    _internal_set_parent(from._internal_parent());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.SceneSystem.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.SceneSystem.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  components_.InternalSwap(&other->components_);
  swap(header_, other->header_);
  swap(parent_, other->parent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Component::InitAsDefaultInstance() {
  ::Tiny3D::Script::SceneSystem::_Component_default_instance_.transform_ = const_cast< ::Tiny3D::Script::SceneSystem::Transform*>(
      ::Tiny3D::Script::SceneSystem::Transform::internal_default_instance());
  ::Tiny3D::Script::SceneSystem::_Component_default_instance_.mesh_ = const_cast< ::Tiny3D::Script::SceneSystem::Mesh*>(
      ::Tiny3D::Script::SceneSystem::Mesh::internal_default_instance());
}
class Component::_Internal {
 public:
  static const ::Tiny3D::Script::SceneSystem::Transform& transform(const Component* msg);
  static const ::Tiny3D::Script::SceneSystem::Mesh& mesh(const Component* msg);
};

const ::Tiny3D::Script::SceneSystem::Transform&
Component::_Internal::transform(const Component* msg) {
  return *msg->ComponentOneOf_.transform_;
}
const ::Tiny3D::Script::SceneSystem::Mesh&
Component::_Internal::mesh(const Component* msg) {
  return *msg->ComponentOneOf_.mesh_;
}
void Component::set_allocated_transform(::Tiny3D::Script::SceneSystem::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ComponentOneOf();
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    set_has_transform();
    ComponentOneOf_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.SceneSystem.Component.transform)
}
void Component::set_allocated_mesh(::Tiny3D::Script::SceneSystem::Mesh* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ComponentOneOf();
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    set_has_mesh();
    ComponentOneOf_.mesh_ = mesh;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.SceneSystem.Component.mesh)
}
Component::Component()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.SceneSystem.Component)
}
Component::Component(const Component& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_ComponentOneOf();
  switch (from.ComponentOneOf_case()) {
    case kTransform: {
      _internal_mutable_transform()->::Tiny3D::Script::SceneSystem::Transform::MergeFrom(from._internal_transform());
      break;
    }
    case kMesh: {
      _internal_mutable_mesh()->::Tiny3D::Script::SceneSystem::Mesh::MergeFrom(from._internal_mesh());
      break;
    }
    case COMPONENTONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.SceneSystem.Component)
}

void Component::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Component_SceneScriptObject_2eproto.base);
  type_ = 0;
  clear_has_ComponentOneOf();
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.SceneSystem.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  if (has_ComponentOneOf()) {
    clear_ComponentOneOf();
  }
}

void Component::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Component& Component::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Component_SceneScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Component::clear_ComponentOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.SceneSystem.Component)
  switch (ComponentOneOf_case()) {
    case kTransform: {
      delete ComponentOneOf_.transform_;
      break;
    }
    case kMesh: {
      delete ComponentOneOf_.mesh_;
      break;
    }
    case COMPONENTONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMPONENTONEOF_NOT_SET;
}


void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.SceneSystem.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_ComponentOneOf();
  _internal_metadata_.Clear();
}

const char* Component::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.SceneSystem.ComponentType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::SceneSystem::ComponentType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.SceneSystem.Transform transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.SceneSystem.Mesh mesh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Component::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.SceneSystem.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.SceneSystem.ComponentType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .Tiny3D.Script.SceneSystem.Transform transform = 2;
  if (_internal_has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  // .Tiny3D.Script.SceneSystem.Mesh mesh = 3;
  if (_internal_has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mesh(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.SceneSystem.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.SceneSystem.Component)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.SceneSystem.ComponentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (ComponentOneOf_case()) {
    // .Tiny3D.Script.SceneSystem.Transform transform = 2;
    case kTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ComponentOneOf_.transform_);
      break;
    }
    // .Tiny3D.Script.SceneSystem.Mesh mesh = 3;
    case kMesh: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ComponentOneOf_.mesh_);
      break;
    }
    case COMPONENTONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Component::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.SceneSystem.Component)
  GOOGLE_DCHECK_NE(&from, this);
  const Component* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Component>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.SceneSystem.Component)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.SceneSystem.Component)
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.SceneSystem.Component)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.ComponentOneOf_case()) {
    case kTransform: {
      _internal_mutable_transform()->::Tiny3D::Script::SceneSystem::Transform::MergeFrom(from._internal_transform());
      break;
    }
    case kMesh: {
      _internal_mutable_mesh()->::Tiny3D::Script::SceneSystem::Mesh::MergeFrom(from._internal_mesh());
      break;
    }
    case COMPONENTONEOF_NOT_SET: {
      break;
    }
  }
}

void Component::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.SceneSystem.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.SceneSystem.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::InternalSwap(Component* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(ComponentOneOf_, other->ComponentOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Component::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transform::InitAsDefaultInstance() {
  ::Tiny3D::Script::SceneSystem::_Transform_default_instance_._instance.get_mutable()->position_ = const_cast< ::Tiny3D::Script::Vector3*>(
      ::Tiny3D::Script::Vector3::internal_default_instance());
  ::Tiny3D::Script::SceneSystem::_Transform_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::Tiny3D::Script::Vector3*>(
      ::Tiny3D::Script::Vector3::internal_default_instance());
  ::Tiny3D::Script::SceneSystem::_Transform_default_instance_._instance.get_mutable()->scaling_ = const_cast< ::Tiny3D::Script::Vector3*>(
      ::Tiny3D::Script::Vector3::internal_default_instance());
}
class Transform::_Internal {
 public:
  static const ::Tiny3D::Script::Vector3& position(const Transform* msg);
  static const ::Tiny3D::Script::Vector3& rotation(const Transform* msg);
  static const ::Tiny3D::Script::Vector3& scaling(const Transform* msg);
};

const ::Tiny3D::Script::Vector3&
Transform::_Internal::position(const Transform* msg) {
  return *msg->position_;
}
const ::Tiny3D::Script::Vector3&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->rotation_;
}
const ::Tiny3D::Script::Vector3&
Transform::_Internal::scaling(const Transform* msg) {
  return *msg->scaling_;
}
void Transform::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Transform::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
void Transform::clear_scaling() {
  if (GetArenaNoVirtual() == nullptr && scaling_ != nullptr) {
    delete scaling_;
  }
  scaling_ = nullptr;
}
Transform::Transform()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.SceneSystem.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::Tiny3D::Script::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::Tiny3D::Script::Vector3(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_scaling()) {
    scaling_ = new ::Tiny3D::Script::Vector3(*from.scaling_);
  } else {
    scaling_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.SceneSystem.Transform)
}

void Transform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transform_SceneScriptObject_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scaling_) -
      reinterpret_cast<char*>(&position_)) + sizeof(scaling_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.SceneSystem.Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete scaling_;
}

void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transform& Transform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transform_SceneScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.SceneSystem.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scaling_ != nullptr) {
    delete scaling_;
  }
  scaling_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector3 scaling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.SceneSystem.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.Vector3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .Tiny3D.Script.Vector3 rotation = 3;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  // .Tiny3D.Script.Vector3 scaling = 4;
  if (this->has_scaling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::scaling(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.SceneSystem.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.SceneSystem.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.Vector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Tiny3D.Script.Vector3 rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .Tiny3D.Script.Vector3 scaling = 4;
  if (this->has_scaling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaling_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.SceneSystem.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.SceneSystem.Transform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.SceneSystem.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.SceneSystem.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_position());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_rotation());
  }
  if (from.has_scaling()) {
    _internal_mutable_scaling()->::Tiny3D::Script::Vector3::MergeFrom(from._internal_scaling());
  }
}

void Transform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.SceneSystem.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.SceneSystem.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(scaling_, other->scaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mesh::InitAsDefaultInstance() {
}
class Mesh::_Internal {
 public:
};

Mesh::Mesh()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.SceneSystem.Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mesh_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mesh_name().empty()) {
    mesh_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mesh_name_);
  }
  resid_ = from.resid_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.SceneSystem.Mesh)
}

void Mesh::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mesh_SceneScriptObject_2eproto.base);
  mesh_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resid_ = 0u;
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.SceneSystem.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  mesh_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mesh& Mesh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mesh_SceneScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.SceneSystem.Mesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mesh_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resid_ = 0u;
  _internal_metadata_.Clear();
}

const char* Mesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 resID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mesh_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mesh_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.SceneSystem.Mesh.mesh_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.SceneSystem.Mesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resID = 1;
  if (this->resid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_resid(), target);
  }

  // string mesh_name = 2;
  if (this->mesh_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mesh_name().data(), static_cast<int>(this->_internal_mesh_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.SceneSystem.Mesh.mesh_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mesh_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.SceneSystem.Mesh)
  return target;
}

size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.SceneSystem.Mesh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mesh_name = 2;
  if (this->mesh_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mesh_name());
  }

  // uint32 resID = 1;
  if (this->resid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.SceneSystem.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.SceneSystem.Mesh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.SceneSystem.Mesh)
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.SceneSystem.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mesh_name().size() > 0) {

    mesh_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mesh_name_);
  }
  if (from.resid() != 0) {
    _internal_set_resid(from._internal_resid());
  }
}

void Mesh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.SceneSystem.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.SceneSystem.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  return true;
}

void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mesh_name_.Swap(&other->mesh_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resid_, other->resid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mesh::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SceneSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::SceneSystem::Node* Arena::CreateMaybeMessage< ::Tiny3D::Script::SceneSystem::Node >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::SceneSystem::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::SceneSystem::Component* Arena::CreateMaybeMessage< ::Tiny3D::Script::SceneSystem::Component >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::SceneSystem::Component >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::SceneSystem::Transform* Arena::CreateMaybeMessage< ::Tiny3D::Script::SceneSystem::Transform >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::SceneSystem::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::SceneSystem::Mesh* Arena::CreateMaybeMessage< ::Tiny3D::Script::SceneSystem::Mesh >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::SceneSystem::Mesh >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
