/*******************************************************************************
 * MIT License
 *
 * Copyright (c) 2024 Answer Wong
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/


#include <Tiny3D.h>


#if defined (T3D_OS_WINDOWS)

const char *SAMPLE_VERTEX_SHADER =
    "cbuffer type_Tiny3DPerDraw : register(b0)\n"
    "{\n"
    "    row_major float4x4 Tiny3DPerDraw_tiny3d_ObjectToWorld : packoffset(c0);\n"
    "    row_major float4x4 Tiny3DPerDraw_tiny3d_WorldToObject : packoffset(c4);\n"
    "};\n"
    "\n"
    "cbuffer type_Tiny3DPerFrame : register(b1)\n"
    "{\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixV : packoffset(c0);\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixP : packoffset(c4);\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixVP : packoffset(c8);\n"
    "};\n"
    "\n"
    "\n"
    "static float4 gl_Position;\n"
    "static float3 in_var_POSITION;\n"
    "static float2 in_var_TEXCOORD0;\n"
    "static float2 out_var_TEXCOORD0;\n"
    "\n"
    "struct SPIRV_Cross_Input\n"
    "{\n"
    "    float3 in_var_POSITION : POSITION;\n"
    "    float2 in_var_TEXCOORD0 : TEXCOORD0;\n"
    "};\n"
    "\n"
    "struct SPIRV_Cross_Output\n"
    "{\n"
    "    float2 out_var_TEXCOORD0 : TEXCOORD0;\n"
    "    float4 gl_Position : SV_Position;\n"
    "};\n"
    "\n"
    "void vert_main()\n"
    "{\n"
    "    gl_Position = mul(mul(Tiny3DPerFrame_tiny3d_MatrixVP, Tiny3DPerDraw_tiny3d_ObjectToWorld), float4(in_var_POSITION, 1.0f));\n"
    "    out_var_TEXCOORD0 = in_var_TEXCOORD0;\n"
    "}\n"
    "\n"
    "SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)\n"
    "{\n"
    "    in_var_POSITION = stage_input.in_var_POSITION;\n"
    "    in_var_TEXCOORD0 = stage_input.in_var_TEXCOORD0;\n"
    "    vert_main();\n"
    "    SPIRV_Cross_Output stage_output;\n"
    "    stage_output.gl_Position = gl_Position;\n"
    "    stage_output.out_var_TEXCOORD0 = out_var_TEXCOORD0;\n"
    "    return stage_output;\n"
    "}\n";

const char *SAMPLE_PIXEL_SHADER =
    "Texture2D<float4> texCube : register(t0);\n"
    "SamplerState samplertexCube : register(s1);\n"
    "\n"
    "static float2 in_var_TEXCOORD0;\n"
    "static float4 out_var_SV_Target;\n"
    "\n"
    "struct SPIRV_Cross_Input\n"
    "{\n"
    "    float2 in_var_TEXCOORD0 : TEXCOORD0;\n"
    "};\n"
    "\n"
    "struct SPIRV_Cross_Output\n"
    "{\n"
    "    float4 out_var_SV_Target : SV_Target0;\n"
    "};\n"
    "\n"
    "void frag_main()\n"
    "{\n"
    "    out_var_SV_Target = texCube.Sample(samplertexCube, in_var_TEXCOORD0);\n"
    "}\n"
    "\n"
    "SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)\n"
    "{\n"
    "    in_var_TEXCOORD0 = stage_input.in_var_TEXCOORD0;\n"
    "    frag_main();\n"
    "    SPIRV_Cross_Output stage_output;\n"
    "    stage_output.out_var_SV_Target = out_var_SV_Target;\n"
    "    return stage_output;\n"
    "}\n";

const char *SAMPLE_LIT_VERTEX_SHADER =
    "struct VertexInput\n"
    "{\n"
    "    float3 position;\n"
    "    float3 normal;\n"
    "    float2 uv;\n"
    "};\n"
    "\n"
    "struct VertexOutput\n"
    "{\n"
    "    float4 position;\n"
    "    float3 worldNormal;\n"
    "    float3 worldPos;\n"
    "    float2 uv;\n"
    "};\n"
    "\n"
    "cbuffer type_Tiny3DPerDraw : register(b0)\n"
    "{\n"
    "    row_major float4x4 Tiny3DPerDraw_tiny3d_ObjectToWorld : packoffset(c0);\n"
    "    row_major float4x4 Tiny3DPerDraw_tiny3d_WorldToObject : packoffset(c4);\n"
    "};\n"
    "\n"
    "cbuffer type_Tiny3DPerFrame : register(b1)\n"
    "{\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixV : packoffset(c0);\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixP : packoffset(c4);\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixVP : packoffset(c8);\n"
    "};\n"
    "\n"
    "\n"
    "static float4 gl_Position;\n"
    "static float3 in_var_POSITION;\n"
    "static float3 in_var_NORMAL;\n"
    "static float2 in_var_TEXCOORD0;\n"
    "static float3 out_var_NORMAL;\n"
    "static float3 out_var_COLOR0;\n"
    "static float2 out_var_TEXCOORD0;\n"
    "\n"
    "struct SPIRV_Cross_Input\n"
    "{\n"
    "    float3 in_var_POSITION : POSITION;\n"
    "    float3 in_var_NORMAL : NORMAL;\n"
    "    float2 in_var_TEXCOORD0 : TEXCOORD0;\n"
    "};\n"
    "\n"
    "struct SPIRV_Cross_Output\n"
    "{\n"
    "    float3 out_var_NORMAL : NORMAL;\n"
    "    float3 out_var_COLOR0 : COLOR0;\n"
    "    float2 out_var_TEXCOORD0 : TEXCOORD0;\n"
    "    float4 gl_Position : SV_Position;\n"
    "};\n"
    "\n"
    "static float4x4 tiny3d_MatrixMVP;\n"
    "static float4x4 tiny3d_MatrixMV;\n"
    "\n"
    "VertexOutput src_vert(VertexInput _input)\n"
    "{\n"
    "    VertexOutput _output;\n"
    "    _output.position = mul(tiny3d_MatrixMVP, float4(_input.position, 1.0f));\n"
    "    _output.worldNormal = normalize(mul(float3x3(Tiny3DPerDraw_tiny3d_ObjectToWorld[0].xyz, Tiny3DPerDraw_tiny3d_ObjectToWorld[1].xyz, Tiny3DPerDraw_tiny3d_ObjectToWorld[2].xyz), _input.normal));\n"
    "    _output.worldPos = mul(Tiny3DPerDraw_tiny3d_ObjectToWorld, float4(_input.position, 1.0f)).xyz;\n"
    "    _output.uv = _input.uv;\n"
    "    return _output;\n"
    "}\n"
    "\n"
    "void vert_main()\n"
    "{\n"
    "    tiny3d_MatrixMVP = mul(Tiny3DPerFrame_tiny3d_MatrixVP, Tiny3DPerDraw_tiny3d_ObjectToWorld);\n"
    "    tiny3d_MatrixMV = mul(Tiny3DPerFrame_tiny3d_MatrixV, Tiny3DPerDraw_tiny3d_ObjectToWorld);\n"
    "    VertexInput _55 = { in_var_POSITION, in_var_NORMAL, in_var_TEXCOORD0 };\n"
    "    VertexInput param_var_input = _55;\n"
    "    VertexOutput _57 = src_vert(param_var_input);\n"
    "    gl_Position = _57.position;\n"
    "    out_var_NORMAL = _57.worldNormal;\n"
    "    out_var_COLOR0 = _57.worldPos;\n"
    "    out_var_TEXCOORD0 = _57.uv;\n"
    "}\n"
    "\n"
    "SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)\n"
    "{\n"
    "    in_var_POSITION = stage_input.in_var_POSITION;\n"
    "    in_var_NORMAL = stage_input.in_var_NORMAL;\n"
    "    in_var_TEXCOORD0 = stage_input.in_var_TEXCOORD0;\n"
    "    vert_main();\n"
    "    SPIRV_Cross_Output stage_output;\n"
    "    stage_output.gl_Position = gl_Position;\n"
    "    stage_output.out_var_NORMAL = out_var_NORMAL;\n"
    "    stage_output.out_var_COLOR0 = out_var_COLOR0;\n"
    "    stage_output.out_var_TEXCOORD0 = out_var_TEXCOORD0;\n"
    "    return stage_output;\n"
    "}\n"
    "\n";

const char *SAMPLE_LIT_PIXEL_SHADER =
    "struct PS_INPUT\n"
    "{\n"
    "    float3 worldNormal;\n"
    "    float3 worldPos;\n"
    "    float2 uv;\n"
    "};\n"
    "\n"
    "cbuffer type_tiny3d_LightParams : register(b2)\n"
    "{\n"
    "    float4 tiny3d_LightParams_tiny3d_AmbientLight : packoffset(c0);\n"
    "    float4 tiny3d_LightParams_tiny3d_DirLightColor : packoffset(c1);\n"
    "    float4 tiny3d_LightParams_tiny3d_DirLightDir : packoffset(c2);\n"
    "    float4 tiny3d_LightParams_tiny3d_PointLightColor[4] : packoffset(c3);\n"
    "    float4 tiny3d_LightParams_tiny3d_PointLightPos[4] : packoffset(c7);\n"
    "    float4 tiny3d_LightParams_tiny3d_PointLightAttenuation[4] : packoffset(c11);\n"
    "    float4 tiny3d_LightParams_tiny3d_SpotLightColor[4] : packoffset(c15);\n"
    "    float4 tiny3d_LightParams_tiny3d_SpotLightPos[4] : packoffset(c19);\n"
    "    float4 tiny3d_LightParams_tiny3d_SpotLightDir[4] : packoffset(c23);\n"
    "    float4 tiny3d_LightParams_tiny3d_SpotLightAttenuation[4] : packoffset(c27);\n"
    "};\n"
    "\n"
    "cbuffer type_tiny3d_CameraParams : register(b3)\n"
    "{\n"
    "    float4 tiny3d_CameraParams_tiny3d_CameraWorldPos : packoffset(c0);\n"
    "};\n"
    "\n"
    "cbuffer type_tiny3d_ObjectParams : register(b4)\n"
    "{\n"
    "    float4 tiny3d_ObjectParams_tiny3d_ObjectSmoothness : packoffset(c0);\n"
    "};\n"
    "\n"
    "Texture2D<float4> texCube : register(t0);\n"
    "SamplerState samplertexCube : register(s1);\n"
    "\n"
    "static float3 in_var_NORMAL;\n"
    "static float3 in_var_COLOR0;\n"
    "static float2 in_var_TEXCOORD0;\n"
    "static float4 out_var_SV_Target;\n"
    "\n"
    "struct SPIRV_Cross_Input\n"
    "{\n"
    "    float3 in_var_NORMAL : NORMAL;\n"
    "    float3 in_var_COLOR0 : COLOR0;\n"
    "    float2 in_var_TEXCOORD0 : TEXCOORD0;\n"
    "};\n"
    "\n"
    "struct SPIRV_Cross_Output\n"
    "{\n"
    "    float4 out_var_SV_Target : SV_Target0;\n"
    "};\n"
    "\n"
    "float calculateDiffuse(float3 normal, float3 lightDir)\n"
    "{\n"
    "    return max(0.0f, dot(normal, lightDir));\n"
    "}\n"
    "\n"
    "float calculateSpecular(float3 viewDir, float3 normal, float3 lightDir, float smoothness)\n"
    "{\n"
    "    float shininess = smoothness * 128.0f;\n"
    "    float3 halfDir = normalize(lightDir + viewDir);\n"
    "    return pow(max(dot(viewDir, halfDir), 0.0f), shininess);\n"
    "}\n"
    "\n"
    "float3 calcDirectionalLight(float3 normal, float3 viewDir, float3 albedo, float3 lightDir, float3 lightColor, float diffuseIntensity, float specularIntensity, float smoothness)\n"
    "{\n"
    "    float3 param_var_normal = normal;\n"
    "    float3 param_var_lightDir = -lightDir;\n"
    "    float diffuse = calculateDiffuse(param_var_normal, param_var_lightDir);\n"
    "    float3 param_var_viewDir = viewDir;\n"
    "    float3 param_var_normal_1 = normal;\n"
    "    float3 param_var_lightDir_1 = -lightDir;\n"
    "    float param_var_smoothness = smoothness;\n"
    "    float specular = calculateSpecular(param_var_viewDir, param_var_normal_1, param_var_lightDir_1, param_var_smoothness);\n"
    "    return (lightColor * ((diffuse * diffuseIntensity) + (specular * specularIntensity))) * albedo;\n"
    "}\n"
    "\n"
    "float calcLightAttenuation(float3 lightPos, float3 pos, float attenuationConstant, float attenuationLinear, float attenuationQuadratic)\n"
    "{\n"
    "    float _distance = length(lightPos - pos);\n"
    "    float attenuation = 1.0f / ((attenuationConstant + (attenuationLinear * _distance)) + ((attenuationQuadratic * _distance) * _distance));\n"
    "    return attenuation;\n"
    "}\n"
    "\n"
    "float3 calcPointLight(float3 pos, float3 normal, float3 viewDir, float3 albedo, float3 lightPos, float3 lightColor, float diffuseIntensity, float specularIntensity, float3 attenuation, float smoothness)\n"
    "{\n"
    "    float3 param_var_lightPos = lightPos;\n"
    "    float3 param_var_pos = pos;\n"
    "    float param_var_attenuationConstant = attenuation.x;\n"
    "    float param_var_attenuationLinear = attenuation.y;\n"
    "    float param_var_attenuationQuadratic = attenuation.z;\n"
    "    float att = calcLightAttenuation(param_var_lightPos, param_var_pos, param_var_attenuationConstant, param_var_attenuationLinear, param_var_attenuationQuadratic);\n"
    "    float3 lightDir = normalize(lightPos - pos);\n"
    "    float3 param_var_normal = normal;\n"
    "    float3 param_var_lightDir = lightDir;\n"
    "    float diffuse = calculateDiffuse(param_var_normal, param_var_lightDir);\n"
    "    float3 param_var_viewDir = viewDir;\n"
    "    float3 param_var_normal_1 = normal;\n"
    "    float3 param_var_lightDir_1 = lightDir;\n"
    "    float param_var_smoothness = smoothness;\n"
    "    float specular = calculateSpecular(param_var_viewDir, param_var_normal_1, param_var_lightDir_1, param_var_smoothness);\n"
    "    return ((lightColor * ((diffuse * diffuseIntensity) + (specular * specularIntensity))) * albedo) * att;\n"
    "}\n"
    "\n"
    "float3 calcSpotLight(float3 pos, float3 normal, float3 viewDir, float3 albedo, float3 lightPos, float3 lightDir, float3 lightColor, float diffuseIntensity, float specularIntensity, float3 attenuation, float smoothness, float cutoff, float outerCutoff)\n"
    "{\n"
    "    float3 param_var_lightPos = lightPos;\n"
    "    float3 param_var_pos = pos;\n"
    "    float param_var_attenuationConstant = attenuation.x;\n"
    "    float param_var_attenuationLinear = attenuation.y;\n"
    "    float param_var_attenuationQuadratic = attenuation.z;\n"
    "    float att = calcLightAttenuation(param_var_lightPos, param_var_pos, param_var_attenuationConstant, param_var_attenuationLinear, param_var_attenuationQuadratic);\n"
    "    float3 dir = normalize(lightPos - pos);\n"
    "    float theta = dot(dir, -lightDir);\n"
    "    float epsilon = cutoff - outerCutoff;\n"
    "    float intensity = clamp((theta - outerCutoff) / epsilon, 0.0f, 1.0f);\n"
    "    float3 param_var_normal = normal;\n"
    "    float3 param_var_lightDir = dir;\n"
    "    float diffuse = calculateDiffuse(param_var_normal, param_var_lightDir) * intensity;\n"
    "    float3 param_var_viewDir = viewDir;\n"
    "    float3 param_var_normal_1 = normal;\n"
    "    float3 param_var_lightDir_1 = dir;\n"
    "    float param_var_smoothness = smoothness;\n"
    "    float specular = calculateSpecular(param_var_viewDir, param_var_normal_1, param_var_lightDir_1, param_var_smoothness) * intensity;\n"
    "    return ((lightColor * ((diffuse * diffuseIntensity) + (specular * specularIntensity))) * albedo) * att;\n"
    "}\n"
    "\n"
    "float4 src_frag(PS_INPUT _input)\n"
    "{\n"
    "    float smoothness = tiny3d_ObjectParams_tiny3d_ObjectSmoothness.x;\n"
    "    float3 ambient = tiny3d_LightParams_tiny3d_AmbientLight.xyz * tiny3d_LightParams_tiny3d_AmbientLight.w;\n"
    "    float3 viewDir = normalize(tiny3d_CameraParams_tiny3d_CameraWorldPos.xyz - _input.worldPos);\n"
    "    float4 albedo = texCube.Sample(samplertexCube, _input.uv);\n"
    "    float3 color = 0.0f.xxx;\n"
    "    float diffuseIntensity = tiny3d_LightParams_tiny3d_DirLightColor.w;\n"
    "    float specularIntensity = tiny3d_LightParams_tiny3d_DirLightDir.w;\n"
    "    float3 lightDir = tiny3d_LightParams_tiny3d_DirLightDir.xyz;\n"
    "    float3 lightColor = tiny3d_LightParams_tiny3d_DirLightColor.xyz;\n"
    "    float3 param_var_normal = _input.worldNormal;\n"
    "    float3 param_var_viewDir = viewDir;\n"
    "    float3 param_var_albedo = albedo.xyz;\n"
    "    float3 param_var_lightDir = lightDir;\n"
    "    float3 param_var_lightColor = lightColor;\n"
    "    float param_var_diffuseIntensity = diffuseIntensity;\n"
    "    float param_var_specularIntensity = specularIntensity;\n"
    "    float param_var_smoothness = smoothness;\n"
    "    float3 dirColor = calcDirectionalLight(param_var_normal, param_var_viewDir, param_var_albedo, param_var_lightDir, param_var_lightColor, param_var_diffuseIntensity, param_var_specularIntensity, param_var_smoothness);\n"
    "    color += dirColor;\n"
    "    int i = 0;\n"
    "    i = 0;\n"
    "    [unroll]\n"
    "    for (; i < 4; i++)\n"
    "    {\n"
    "        diffuseIntensity = tiny3d_LightParams_tiny3d_PointLightColor[i].w;\n"
    "        specularIntensity = tiny3d_LightParams_tiny3d_PointLightPos[i].w;\n"
    "        float3 lightPos = tiny3d_LightParams_tiny3d_PointLightPos[i].xyz;\n"
    "        lightColor = tiny3d_LightParams_tiny3d_PointLightColor[i].xyz;\n"
    "        float3 param_var_pos = _input.worldPos;\n"
    "        float3 param_var_normal_1 = _input.worldNormal;\n"
    "        float3 param_var_viewDir_1 = viewDir;\n"
    "        float3 param_var_albedo_1 = albedo.xyz;\n"
    "        float3 param_var_lightPos = lightPos;\n"
    "        float3 param_var_lightColor_1 = lightColor;\n"
    "        float param_var_diffuseIntensity_1 = diffuseIntensity;\n"
    "        float param_var_specularIntensity_1 = specularIntensity;\n"
    "        float3 param_var_attenuation = tiny3d_LightParams_tiny3d_PointLightAttenuation[i].xyz;\n"
    "        float param_var_smoothness_1 = smoothness;\n"
    "        float3 pointColor = calcPointLight(param_var_pos, param_var_normal_1, param_var_viewDir_1, param_var_albedo_1, param_var_lightPos, param_var_lightColor_1, param_var_diffuseIntensity_1, param_var_specularIntensity_1, param_var_attenuation, param_var_smoothness_1);\n"
    "        color += pointColor;\n"
    "        continue;\n"
    "    }\n"
    "    i = 0;\n"
    "    [unroll]\n"
    "    for (; i < 4; i++)\n"
    "    {\n"
    "        diffuseIntensity = tiny3d_LightParams_tiny3d_SpotLightColor[i].w;\n"
    "        specularIntensity = tiny3d_LightParams_tiny3d_SpotLightPos[i].w;\n"
    "        float3 lightPos_1 = tiny3d_LightParams_tiny3d_SpotLightPos[i].xyz;\n"
    "        float3 lightDir_1 = tiny3d_LightParams_tiny3d_SpotLightDir[i].xyz;\n"
    "        lightColor = tiny3d_LightParams_tiny3d_SpotLightColor[i].xyz;\n"
    "        float cutoff = tiny3d_LightParams_tiny3d_SpotLightDir[i].w;\n"
    "        float outerCutoff = tiny3d_LightParams_tiny3d_SpotLightAttenuation[i].w;\n"
    "        float3 param_var_pos_1 = _input.worldPos;\n"
    "        float3 param_var_normal_2 = _input.worldNormal;\n"
    "        float3 param_var_viewDir_2 = viewDir;\n"
    "        float3 param_var_albedo_2 = albedo.xyz;\n"
    "        float3 param_var_lightPos_1 = lightPos_1;\n"
    "        float3 param_var_lightDir_1 = lightDir_1;\n"
    "        float3 param_var_lightColor_2 = lightColor;\n"
    "        float param_var_diffuseIntensity_2 = diffuseIntensity;\n"
    "        float param_var_specularIntensity_2 = specularIntensity;\n"
    "        float3 param_var_attenuation_1 = tiny3d_LightParams_tiny3d_SpotLightAttenuation[i].xyz;\n"
    "        float param_var_smoothness_2 = smoothness;\n"
    "        float param_var_cutoff = cutoff;\n"
    "        float param_var_outerCutoff = outerCutoff;\n"
    "        float3 spotColor = calcSpotLight(param_var_pos_1, param_var_normal_2, param_var_viewDir_2, param_var_albedo_2, param_var_lightPos_1, param_var_lightDir_1, param_var_lightColor_2, param_var_diffuseIntensity_2, param_var_specularIntensity_2, param_var_attenuation_1, param_var_smoothness_2, param_var_cutoff, param_var_outerCutoff);\n"
    "        color += spotColor;\n"
    "        continue;\n"
    "    }\n"
    "    float4 finalColor = float4((ambient * albedo.xyz) + color, 1.0f);\n"
    "    return finalColor;\n"
    "}\n"
    "\n"
    "void frag_main()\n"
    "{\n"
    "    PS_INPUT _56 = { in_var_NORMAL, in_var_COLOR0, in_var_TEXCOORD0 };\n"
    "    PS_INPUT param_var_input = _56;\n"
    "    out_var_SV_Target = src_frag(param_var_input);\n"
    "}\n"
    "\n"
    "SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)\n"
    "{\n"
    "    in_var_NORMAL = stage_input.in_var_NORMAL;\n"
    "    in_var_COLOR0 = stage_input.in_var_COLOR0;\n"
    "    in_var_TEXCOORD0 = stage_input.in_var_TEXCOORD0;\n"
    "    frag_main();\n"
    "    SPIRV_Cross_Output stage_output;\n"
    "    stage_output.out_var_SV_Target = out_var_SV_Target;\n"
    "    return stage_output;\n"
    "}\n"
    "\n";

const char *SHADOW_VERTEX_SHADER =
    "struct VertexInput\n"
    "{\n"
    "    float3 position;\n"
    "    float3 normal;\n"
    "    float2 uv;\n"
    "};\n"
    "\n"
    "struct VertexOutput\n"
    "{\n"
    "    float4 position;\n"
    "};\n"
    "\n"
    "cbuffer type_Tiny3DPerFrame : register(b0)\n"
    "{\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixLightSpaceVP : packoffset(c0);\n"
    "};\n"
    "\n"
    "\n"
    "static float4 gl_Position;\n"
    "static float3 in_var_POSITION;\n"
    "static float3 in_var_NORMAL;\n"
    "static float2 in_var_TEXCOORD0;\n"
    "\n"
    "struct SPIRV_Cross_Input\n"
    "{\n"
    "    float3 in_var_POSITION : POSITION;\n"
    "    float3 in_var_NORMAL : NORMAL;\n"
    "    float2 in_var_TEXCOORD0 : TEXCOORD0;\n"
    "};\n"
    "\n"
    "struct SPIRV_Cross_Output\n"
    "{\n"
    "    float4 gl_Position : SV_Position;\n"
    "};\n"
    "\n"
    "VertexOutput src_vert(VertexInput _input)\n"
    "{\n"
    "    VertexOutput _output;\n"
    "    _output.position = mul(Tiny3DPerFrame_tiny3d_MatrixLightSpaceVP, float4(_input.position, 1.0f));\n"
    "    return _output;\n"
    "}\n"
    "\n"
    "void vert_main()\n"
    "{\n"
    "    VertexInput _29 = { in_var_POSITION, in_var_NORMAL, in_var_TEXCOORD0 };\n"
    "    VertexInput param_var_input = _29;\n"
    "    gl_Position = src_vert(param_var_input).position;\n"
    "}\n"
    "\n"
    "SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)\n"
    "{\n"
    "    in_var_POSITION = stage_input.in_var_POSITION;\n"
    "    in_var_NORMAL = stage_input.in_var_NORMAL;\n"
    "    in_var_TEXCOORD0 = stage_input.in_var_TEXCOORD0;\n"
    "    vert_main();\n"
    "    SPIRV_Cross_Output stage_output;\n"
    "    stage_output.gl_Position = gl_Position;\n"
    "    return stage_output;\n"
    "}\n"
    "\n";

const char *FORWARD_VERTEX_SHADER =
    "struct VertexInput\n"
    "{\n"
    "    float3 position;\n"
    "    float3 normal;\n"
    "    float2 uv;\n"
    "};\n"
    "\n"
    "struct VertexOutput\n"
    "{\n"
    "    float4 position;\n"
    "    float3 worldNormal;\n"
    "    float3 worldPos;\n"
    "    float4 lightSpacePos;\n"
    "    float2 uv;\n"
    "};\n"
    "\n"
    "cbuffer type_Tiny3DPerDraw : register(b0)\n"
    "{\n"
    "    row_major float4x4 Tiny3DPerDraw_tiny3d_ObjectToWorld : packoffset(c0);\n"
    "    row_major float4x4 Tiny3DPerDraw_tiny3d_WorldToObject : packoffset(c4);\n"
    "};\n"
    "\n"
    "cbuffer type_Tiny3DPerFrame : register(b1)\n"
    "{\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixV : packoffset(c0);\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixP : packoffset(c4);\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixVP : packoffset(c8);\n"
    "    row_major float4x4 Tiny3DPerFrame_tiny3d_MatrixLightSpaceVP : packoffset(c12);\n"
    "};\n"
    "\n"
    "\n"
    "static float4 gl_Position;\n"
    "static float3 in_var_POSITION;\n"
    "static float3 in_var_NORMAL;\n"
    "static float2 in_var_TEXCOORD0;\n"
    "static float3 out_var_NORMAL;\n"
    "static float3 out_var_COLOR0;\n"
    "static float4 out_var_COLOR1;\n"
    "static float2 out_var_TEXCOORD0;\n"
    "\n"
    "struct SPIRV_Cross_Input\n"
    "{\n"
    "    float3 in_var_POSITION : POSITION;\n"
    "    float3 in_var_NORMAL : NORMAL;\n"
    "    float2 in_var_TEXCOORD0 : TEXCOORD0;\n"
    "};\n"
    "\n"
    "struct SPIRV_Cross_Output\n"
    "{\n"
    "    float3 out_var_NORMAL : NORMAL;\n"
    "    float3 out_var_COLOR0 : COLOR0;\n"
    "    float4 out_var_COLOR1 : COLOR1;\n"
    "    float2 out_var_TEXCOORD0 : TEXCOORD0;\n"
    "    float4 gl_Position : SV_Position;\n"
    "};\n"
    "\n"
    "static float4x4 tiny3d_MatrixMVP;\n"
    "static float4x4 tiny3d_MatrixMV;\n"
    "static float4x4 tiny3d_MatrixLightSpaceMVP;\n"
    "\n"
    "VertexOutput src_vert(VertexInput _input)\n"
    "{\n"
    "    VertexOutput _output;\n"
    "    _output.position = mul(tiny3d_MatrixMVP, float4(_input.position, 1.0f));\n"
    "    _output.worldNormal = normalize(mul(float3x3(Tiny3DPerDraw_tiny3d_ObjectToWorld[0].xyz, Tiny3DPerDraw_tiny3d_ObjectToWorld[1].xyz, Tiny3DPerDraw_tiny3d_ObjectToWorld[2].xyz), _input.normal));\n"
    "    _output.worldPos = mul(Tiny3DPerDraw_tiny3d_ObjectToWorld, float4(_input.position, 1.0f)).xyz;\n"
    "    _output.lightSpacePos = mul(tiny3d_MatrixLightSpaceMVP, float4(_input.position, 1.0f));\n"
    "    _output.uv = _input.uv;\n"
    "    return _output;\n"
    "}\n"
    "\n"
    "void vert_main()\n"
    "{\n"
    "    tiny3d_MatrixMVP = mul(Tiny3DPerFrame_tiny3d_MatrixVP, Tiny3DPerDraw_tiny3d_ObjectToWorld);\n"
    "    tiny3d_MatrixMV = mul(Tiny3DPerFrame_tiny3d_MatrixV, Tiny3DPerDraw_tiny3d_ObjectToWorld);\n"
    "    tiny3d_MatrixLightSpaceMVP = mul(Tiny3DPerFrame_tiny3d_MatrixLightSpaceVP, Tiny3DPerDraw_tiny3d_ObjectToWorld);\n"
    "    VertexInput _63 = { in_var_POSITION, in_var_NORMAL, in_var_TEXCOORD0 };\n"
    "    VertexInput param_var_input = _63;\n"
    "    VertexOutput _65 = src_vert(param_var_input);\n"
    "    gl_Position = _65.position;\n"
    "    out_var_NORMAL = _65.worldNormal;\n"
    "    out_var_COLOR0 = _65.worldPos;\n"
    "    out_var_COLOR1 = _65.lightSpacePos;\n"
    "    out_var_TEXCOORD0 = _65.uv;\n"
    "}\n"
    "\n"
    "SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)\n"
    "{\n"
    "    in_var_POSITION = stage_input.in_var_POSITION;\n"
    "    in_var_NORMAL = stage_input.in_var_NORMAL;\n"
    "    in_var_TEXCOORD0 = stage_input.in_var_TEXCOORD0;\n"
    "    vert_main();\n"
    "    SPIRV_Cross_Output stage_output;\n"
    "    stage_output.gl_Position = gl_Position;\n"
    "    stage_output.out_var_NORMAL = out_var_NORMAL;\n"
    "    stage_output.out_var_COLOR0 = out_var_COLOR0;\n"
    "    stage_output.out_var_COLOR1 = out_var_COLOR1;\n"
    "    stage_output.out_var_TEXCOORD0 = out_var_TEXCOORD0;\n"
    "    return stage_output;\n"
    "}\n"
    "\n";

const char *FORWARD_PIXEL_SHADER =
    "struct PS_INPUT\n"
    "{\n"
    "    float3 worldNormal;\n"
    "    float3 worldPos;\n"
    "    float4 lightSpacePos;\n"
    "    float2 uv;\n"
    "};\n"
    "\n"
    "cbuffer type_tiny3d_LightParams : register(b0)\n"
    "{\n"
    "    float4 tiny3d_LightParams_tiny3d_AmbientLight : packoffset(c0);\n"
    "    float4 tiny3d_LightParams_tiny3d_DirLightColor : packoffset(c1);\n"
    "    float4 tiny3d_LightParams_tiny3d_DirLightDir : packoffset(c2);\n"
    "    float4 tiny3d_LightParams_tiny3d_PointLightColor[4] : packoffset(c3);\n"
    "    float4 tiny3d_LightParams_tiny3d_PointLightPos[4] : packoffset(c7);\n"
    "    float4 tiny3d_LightParams_tiny3d_PointLightAttenuation[4] : packoffset(c11);\n"
    "    float4 tiny3d_LightParams_tiny3d_SpotLightColor[4] : packoffset(c15);\n"
    "    float4 tiny3d_LightParams_tiny3d_SpotLightPos[4] : packoffset(c19);\n"
    "    float4 tiny3d_LightParams_tiny3d_SpotLightDir[4] : packoffset(c23);\n"
    "    float4 tiny3d_LightParams_tiny3d_SpotLightAttenuation[4] : packoffset(c27);\n"
    "};\n"
    "\n"
    "cbuffer type_tiny3d_CameraParams : register(b1)\n"
    "{\n"
    "    float4 tiny3d_CameraParams_tiny3d_CameraWorldPos : packoffset(c0);\n"
    "};\n"
    "\n"
    "cbuffer type_tiny3d_ObjectParams : register(b2)\n"
    "{\n"
    "    float4 tiny3d_ObjectParams_tiny3d_ObjectSmoothness : packoffset(c0);\n"
    "};\n"
    "\n"
    "Texture2D<float4> texCube : register(t3);\n"
    "SamplerState samplertexCube : register(s4);\n"
    "Texture2D<float4> shadowMap : register(t5);\n"
    "SamplerComparisonState samplershadowMap : register(s6);\n"
    "\n"
    "static float3 in_var_NORMAL;\n"
    "static float3 in_var_COLOR0;\n"
    "static float4 in_var_COLOR1;\n"
    "static float2 in_var_TEXCOORD0;\n"
    "static float4 out_var_SV_Target;\n"
    "\n"
    "struct SPIRV_Cross_Input\n"
    "{\n"
    "    float3 in_var_NORMAL : NORMAL;\n"
    "    float3 in_var_COLOR0 : COLOR0;\n"
    "    float4 in_var_COLOR1 : COLOR1;\n"
    "    float2 in_var_TEXCOORD0 : TEXCOORD0;\n"
    "};\n"
    "\n"
    "struct SPIRV_Cross_Output\n"
    "{\n"
    "    float4 out_var_SV_Target : SV_Target0;\n"
    "};\n"
    "\n"
    "float calculateDiffuse(float3 normal, float3 lightDir)\n"
    "{\n"
    "    return max(0.0f, dot(normal, lightDir));\n"
    "}\n"
    "\n"
    "float calculateSpecular(float3 viewDir, float3 normal, float3 lightDir, float smoothness)\n"
    "{\n"
    "    float shininess = smoothness * 128.0f;\n"
    "    float3 halfDir = normalize(lightDir + viewDir);\n"
    "    return pow(max(dot(viewDir, halfDir), 0.0f), shininess);\n"
    "}\n"
    "\n"
    "float3 calcDirectionalLight(float3 normal, float3 viewDir, float3 albedo, float3 lightDir, float3 lightColor, float diffuseIntensity, float specularIntensity, float smoothness)\n"
    "{\n"
    "    float3 param_var_normal = normal;\n"
    "    float3 param_var_lightDir = -lightDir;\n"
    "    float diffuse = calculateDiffuse(param_var_normal, param_var_lightDir);\n"
    "    float3 param_var_viewDir = viewDir;\n"
    "    float3 param_var_normal_1 = normal;\n"
    "    float3 param_var_lightDir_1 = -lightDir;\n"
    "    float param_var_smoothness = smoothness;\n"
    "    float specular = calculateSpecular(param_var_viewDir, param_var_normal_1, param_var_lightDir_1, param_var_smoothness);\n"
    "    return (lightColor * ((diffuse * diffuseIntensity) + (specular * specularIntensity))) * albedo;\n"
    "}\n"
    "\n"
    "float calcShadow(float4 lightSpacePos)\n"
    "{\n"
    "    float3 projCoords = lightSpacePos.xyz / lightSpacePos.w.xxx;\n"
    "    float2 _385 = (projCoords.xy * 0.5f) + 0.5f.xx;\n"
    "    projCoords = float3(_385.x, _385.y, projCoords.z);\n"
    "    projCoords.y = 1.0f - projCoords.y;\n"
    "    float shadow = 0.0f;\n"
    "    float2 texelSize = 1.0f.xx / 2048.0f.xx;\n"
    "    float2 _402[9] = { (-1.0f).xx, float2(0.0f, -1.0f), float2(1.0f, -1.0f), float2(-1.0f, 0.0f), 0.0f.xx, float2(1.0f, 0.0f), float2(-1.0f, 1.0f), float2(0.0f, 1.0f), 1.0f.xx };\n"
    "    float2 offsets[9] = _402;\n"
    "    float depth = projCoords.z;\n"
    "    [unroll]\n"
    "    for (int i = 0; i < 9; i++)\n"
    "    {\n"
    "        float2 uv = projCoords.xy + (offsets[i] * texelSize);\n"
    "        shadow += shadowMap.SampleCmpLevelZero(samplershadowMap, uv, depth);\n"
    "        continue;\n"
    "    }\n"
    "    shadow /= 9.0f;\n"
    "    return shadow;\n"
    "}\n"
    "\n"
    "float calcLightAttenuation(float3 lightPos, float3 pos, float attenuationConstant, float attenuationLinear, float attenuationQuadratic)\n"
    "{\n"
    "    float _distance = length(lightPos - pos);\n"
    "    float attenuation = 1.0f / ((attenuationConstant + (attenuationLinear * _distance)) + ((attenuationQuadratic * _distance) * _distance));\n"
    "    return attenuation;\n"
    "}\n"
    "\n"
    "float3 calcPointLight(float3 pos, float3 normal, float3 viewDir, float3 albedo, float3 lightPos, float3 lightColor, float diffuseIntensity, float specularIntensity, float3 attenuation, float smoothness)\n"
    "{\n"
    "    float3 param_var_lightPos = lightPos;\n"
    "    float3 param_var_pos = pos;\n"
    "    float param_var_attenuationConstant = attenuation.x;\n"
    "    float param_var_attenuationLinear = attenuation.y;\n"
    "    float param_var_attenuationQuadratic = attenuation.z;\n"
    "    float att = calcLightAttenuation(param_var_lightPos, param_var_pos, param_var_attenuationConstant, param_var_attenuationLinear, param_var_attenuationQuadratic);\n"
    "    float3 lightDir = normalize(lightPos - pos);\n"
    "    float3 param_var_normal = normal;\n"
    "    float3 param_var_lightDir = lightDir;\n"
    "    float diffuse = calculateDiffuse(param_var_normal, param_var_lightDir);\n"
    "    float3 param_var_viewDir = viewDir;\n"
    "    float3 param_var_normal_1 = normal;\n"
    "    float3 param_var_lightDir_1 = lightDir;\n"
    "    float param_var_smoothness = smoothness;\n"
    "    float specular = calculateSpecular(param_var_viewDir, param_var_normal_1, param_var_lightDir_1, param_var_smoothness);\n"
    "    return ((lightColor * ((diffuse * diffuseIntensity) + (specular * specularIntensity))) * albedo) * att;\n"
    "}\n"
    "\n"
    "float3 calcSpotLight(float3 pos, float3 normal, float3 viewDir, float3 albedo, float3 lightPos, float3 lightDir, float3 lightColor, float diffuseIntensity, float specularIntensity, float3 attenuation, float smoothness, float cutoff, float outerCutoff)\n"
    "{\n"
    "    float3 param_var_lightPos = lightPos;\n"
    "    float3 param_var_pos = pos;\n"
    "    float param_var_attenuationConstant = attenuation.x;\n"
    "    float param_var_attenuationLinear = attenuation.y;\n"
    "    float param_var_attenuationQuadratic = attenuation.z;\n"
    "    float att = calcLightAttenuation(param_var_lightPos, param_var_pos, param_var_attenuationConstant, param_var_attenuationLinear, param_var_attenuationQuadratic);\n"
    "    float3 dir = normalize(lightPos - pos);\n"
    "    float theta = dot(dir, -lightDir);\n"
    "    float epsilon = cutoff - outerCutoff;\n"
    "    float intensity = clamp((theta - outerCutoff) / epsilon, 0.0f, 1.0f);\n"
    "    float3 param_var_normal = normal;\n"
    "    float3 param_var_lightDir = dir;\n"
    "    float diffuse = calculateDiffuse(param_var_normal, param_var_lightDir) * intensity;\n"
    "    float3 param_var_viewDir = viewDir;\n"
    "    float3 param_var_normal_1 = normal;\n"
    "    float3 param_var_lightDir_1 = dir;\n"
    "    float param_var_smoothness = smoothness;\n"
    "    float specular = calculateSpecular(param_var_viewDir, param_var_normal_1, param_var_lightDir_1, param_var_smoothness) * intensity;\n"
    "    return ((lightColor * ((diffuse * diffuseIntensity) + (specular * specularIntensity))) * albedo) * att;\n"
    "}\n"
    "\n"
    "float4 src_frag(PS_INPUT _input)\n"
    "{\n"
    "    float smoothness = tiny3d_ObjectParams_tiny3d_ObjectSmoothness.x;\n"
    "    float3 ambient = tiny3d_LightParams_tiny3d_AmbientLight.xyz * tiny3d_LightParams_tiny3d_AmbientLight.w;\n"
    "    float3 viewDir = normalize(tiny3d_CameraParams_tiny3d_CameraWorldPos.xyz - _input.worldPos);\n"
    "    float4 albedo = texCube.Sample(samplertexCube, _input.uv);\n"
    "    float3 color = 0.0f.xxx;\n"
    "    float diffuseIntensity = tiny3d_LightParams_tiny3d_DirLightColor.w;\n"
    "    float specularIntensity = tiny3d_LightParams_tiny3d_DirLightDir.w;\n"
    "    float3 lightDir = tiny3d_LightParams_tiny3d_DirLightDir.xyz;\n"
    "    float3 lightColor = tiny3d_LightParams_tiny3d_DirLightColor.xyz;\n"
    "    float3 param_var_normal = _input.worldNormal;\n"
    "    float3 param_var_viewDir = viewDir;\n"
    "    float3 param_var_albedo = albedo.xyz;\n"
    "    float3 param_var_lightDir = lightDir;\n"
    "    float3 param_var_lightColor = lightColor;\n"
    "    float param_var_diffuseIntensity = diffuseIntensity;\n"
    "    float param_var_specularIntensity = specularIntensity;\n"
    "    float param_var_smoothness = smoothness;\n"
    "    float3 dirColor = calcDirectionalLight(param_var_normal, param_var_viewDir, param_var_albedo, param_var_lightDir, param_var_lightColor, param_var_diffuseIntensity, param_var_specularIntensity, param_var_smoothness);\n"
    "    float4 param_var_lightSpacePos = _input.lightSpacePos;\n"
    "    float shadow = calcShadow(param_var_lightSpacePos);\n"
    "    dirColor *= shadow;\n"
    "    color += dirColor;\n"
    "    int i = 0;\n"
    "    i = 0;\n"
    "    [unroll]\n"
    "    for (; i < 4; i++)\n"
    "    {\n"
    "        diffuseIntensity = tiny3d_LightParams_tiny3d_PointLightColor[i].w;\n"
    "        specularIntensity = tiny3d_LightParams_tiny3d_PointLightPos[i].w;\n"
    "        float3 lightPos = tiny3d_LightParams_tiny3d_PointLightPos[i].xyz;\n"
    "        lightColor = tiny3d_LightParams_tiny3d_PointLightColor[i].xyz;\n"
    "        float3 param_var_pos = _input.worldPos;\n"
    "        float3 param_var_normal_1 = _input.worldNormal;\n"
    "        float3 param_var_viewDir_1 = viewDir;\n"
    "        float3 param_var_albedo_1 = albedo.xyz;\n"
    "        float3 param_var_lightPos = lightPos;\n"
    "        float3 param_var_lightColor_1 = lightColor;\n"
    "        float param_var_diffuseIntensity_1 = diffuseIntensity;\n"
    "        float param_var_specularIntensity_1 = specularIntensity;\n"
    "        float3 param_var_attenuation = tiny3d_LightParams_tiny3d_PointLightAttenuation[i].xyz;\n"
    "        float param_var_smoothness_1 = smoothness;\n"
    "        float3 pointColor = calcPointLight(param_var_pos, param_var_normal_1, param_var_viewDir_1, param_var_albedo_1, param_var_lightPos, param_var_lightColor_1, param_var_diffuseIntensity_1, param_var_specularIntensity_1, param_var_attenuation, param_var_smoothness_1);\n"
    "        color += pointColor;\n"
    "        continue;\n"
    "    }\n"
    "    i = 0;\n"
    "    [unroll]\n"
    "    for (; i < 4; i++)\n"
    "    {\n"
    "        diffuseIntensity = tiny3d_LightParams_tiny3d_SpotLightColor[i].w;\n"
    "        specularIntensity = tiny3d_LightParams_tiny3d_SpotLightPos[i].w;\n"
    "        float3 lightPos_1 = tiny3d_LightParams_tiny3d_SpotLightPos[i].xyz;\n"
    "        float3 lightDir_1 = tiny3d_LightParams_tiny3d_SpotLightDir[i].xyz;\n"
    "        lightColor = tiny3d_LightParams_tiny3d_SpotLightColor[i].xyz;\n"
    "        float cutoff = tiny3d_LightParams_tiny3d_SpotLightDir[i].w;\n"
    "        float outerCutoff = tiny3d_LightParams_tiny3d_SpotLightAttenuation[i].w;\n"
    "        float3 param_var_pos_1 = _input.worldPos;\n"
    "        float3 param_var_normal_2 = _input.worldNormal;\n"
    "        float3 param_var_viewDir_2 = viewDir;\n"
    "        float3 param_var_albedo_2 = albedo.xyz;\n"
    "        float3 param_var_lightPos_1 = lightPos_1;\n"
    "        float3 param_var_lightDir_1 = lightDir_1;\n"
    "        float3 param_var_lightColor_2 = lightColor;\n"
    "        float param_var_diffuseIntensity_2 = diffuseIntensity;\n"
    "        float param_var_specularIntensity_2 = specularIntensity;\n"
    "        float3 param_var_attenuation_1 = tiny3d_LightParams_tiny3d_SpotLightAttenuation[i].xyz;\n"
    "        float param_var_smoothness_2 = smoothness;\n"
    "        float param_var_cutoff = cutoff;\n"
    "        float param_var_outerCutoff = outerCutoff;\n"
    "        float3 spotColor = calcSpotLight(param_var_pos_1, param_var_normal_2, param_var_viewDir_2, param_var_albedo_2, param_var_lightPos_1, param_var_lightDir_1, param_var_lightColor_2, param_var_diffuseIntensity_2, param_var_specularIntensity_2, param_var_attenuation_1, param_var_smoothness_2, param_var_cutoff, param_var_outerCutoff);\n"
    "        color += spotColor;\n"
    "        continue;\n"
    "    }\n"
    "    float4 finalColor = float4((ambient * albedo.xyz) + color, 1.0f);\n"
    "    return finalColor;\n"
    "}\n"
    "\n"
    "void frag_main()\n"
    "{\n"
    "    PS_INPUT _68 = { in_var_NORMAL, in_var_COLOR0, in_var_COLOR1, in_var_TEXCOORD0 };\n"
    "    PS_INPUT param_var_input = _68;\n"
    "    out_var_SV_Target = src_frag(param_var_input);\n"
    "}\n"
    "\n"
    "SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)\n"
    "{\n"
    "    in_var_NORMAL = stage_input.in_var_NORMAL;\n"
    "    in_var_COLOR0 = stage_input.in_var_COLOR0;\n"
    "    in_var_COLOR1 = stage_input.in_var_COLOR1;\n"
    "    in_var_TEXCOORD0 = stage_input.in_var_TEXCOORD0;\n"
    "    frag_main();\n"
    "    SPIRV_Cross_Output stage_output;\n"
    "    stage_output.out_var_SV_Target = out_var_SV_Target;\n"
    "    return stage_output;\n"
    "}\n"
    "\n";

#elif defined (T3D_OS_OSX)
#elif defined (T3D_OS_IOS)
#elif defined (T3D_OS_ANDROID)
#elif defined (T3D_OS_LINUX)
#endif
