// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShaderScriptObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ShaderScriptObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ShaderScriptObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonScriptObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ShaderScriptObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ShaderScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace ShaderSystem {
class Blend;
class BlendDefaultTypeInternal;
extern BlendDefaultTypeInternal _Blend_default_instance_;
class BlendState;
class BlendStateDefaultTypeInternal;
extern BlendStateDefaultTypeInternal _BlendState_default_instance_;
class BlendStateRenderTarget;
class BlendStateRenderTargetDefaultTypeInternal;
extern BlendStateRenderTargetDefaultTypeInternal _BlendStateRenderTarget_default_instance_;
class ColorMask;
class ColorMaskDefaultTypeInternal;
extern ColorMaskDefaultTypeInternal _ColorMask_default_instance_;
class ColorMaskState1;
class ColorMaskState1DefaultTypeInternal;
extern ColorMaskState1DefaultTypeInternal _ColorMaskState1_default_instance_;
class ColorMaskState2;
class ColorMaskState2DefaultTypeInternal;
extern ColorMaskState2DefaultTypeInternal _ColorMaskState2_default_instance_;
class CompiledProgram;
class CompiledProgramDefaultTypeInternal;
extern CompiledProgramDefaultTypeInternal _CompiledProgram_default_instance_;
class DepthBias;
class DepthBiasDefaultTypeInternal;
extern DepthBiasDefaultTypeInternal _DepthBias_default_instance_;
class Fallback;
class FallbackDefaultTypeInternal;
extern FallbackDefaultTypeInternal _Fallback_default_instance_;
class Pass;
class PassDefaultTypeInternal;
extern PassDefaultTypeInternal _Pass_default_instance_;
class Pass_TagsEntry_DoNotUse;
class Pass_TagsEntry_DoNotUseDefaultTypeInternal;
extern Pass_TagsEntry_DoNotUseDefaultTypeInternal _Pass_TagsEntry_DoNotUse_default_instance_;
class Program;
class ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class PropertyValue;
class PropertyValueDefaultTypeInternal;
extern PropertyValueDefaultTypeInternal _PropertyValue_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class Shader;
class ShaderDefaultTypeInternal;
extern ShaderDefaultTypeInternal _Shader_default_instance_;
class SourceProgram;
class SourceProgramDefaultTypeInternal;
extern SourceProgramDefaultTypeInternal _SourceProgram_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class Stencil;
class StencilDefaultTypeInternal;
extern StencilDefaultTypeInternal _Stencil_default_instance_;
class StencilOp;
class StencilOpDefaultTypeInternal;
extern StencilOpDefaultTypeInternal _StencilOp_default_instance_;
class SubShader;
class SubShaderDefaultTypeInternal;
extern SubShaderDefaultTypeInternal _SubShader_default_instance_;
class SubShader_TagsEntry_DoNotUse;
class SubShader_TagsEntry_DoNotUseDefaultTypeInternal;
extern SubShader_TagsEntry_DoNotUseDefaultTypeInternal _SubShader_TagsEntry_DoNotUse_default_instance_;
}  // namespace ShaderSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> ::Tiny3D::Script::ShaderSystem::Blend* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Blend>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::BlendState* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::BlendState>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::ColorMask* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::ColorMask>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::ColorMaskState1* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::ColorMaskState1>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::ColorMaskState2* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::ColorMaskState2>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::CompiledProgram* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::CompiledProgram>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::DepthBias* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::DepthBias>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::Fallback* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Fallback>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::Pass* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Pass>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::Program* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Program>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::Property* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Property>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::PropertyValue* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::PropertyValue>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::Range* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Range>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::Shader* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Shader>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::SourceProgram* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::SourceProgram>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::State* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::State>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::Stencil* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Stencil>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::StencilOp* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::StencilOp>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::SubShader* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::SubShader>(Arena*);
template<> ::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tiny3D {
namespace Script {
namespace ShaderSystem {

enum StencilOp_Op : int {
  StencilOp_Op_KEEP = 0,
  StencilOp_Op_ZERO = 1,
  StencilOp_Op_REPLACE = 2,
  StencilOp_Op_INCR_SAT = 3,
  StencilOp_Op_DECR_SAT = 4,
  StencilOp_Op_INVERT = 5,
  StencilOp_Op_INCR_WRAP = 7,
  StencilOp_Op_DECR_WRAP = 8,
  StencilOp_Op_StencilOp_Op_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StencilOp_Op_StencilOp_Op_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StencilOp_Op_IsValid(int value);
constexpr StencilOp_Op StencilOp_Op_Op_MIN = StencilOp_Op_KEEP;
constexpr StencilOp_Op StencilOp_Op_Op_MAX = StencilOp_Op_DECR_WRAP;
constexpr int StencilOp_Op_Op_ARRAYSIZE = StencilOp_Op_Op_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StencilOp_Op_descriptor();
template<typename T>
inline const std::string& StencilOp_Op_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StencilOp_Op>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StencilOp_Op_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StencilOp_Op_descriptor(), enum_t_value);
}
inline bool StencilOp_Op_Parse(
    const std::string& name, StencilOp_Op* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StencilOp_Op>(
    StencilOp_Op_descriptor(), name, value);
}
enum BlendFactor : int {
  ZERO = 0,
  ONE = 1,
  SRC_COLOR = 2,
  SRC_ALPHA = 3,
  DST_COLOR = 4,
  DST_ALPHA = 5,
  ONE_MINUS_SRC_COLOR = 6,
  ONE_MINUS_SRC_ALPHA = 7,
  ONE_MINUS_DST_COLOR = 8,
  ONE_MINUS_DST_ALPHA = 9,
  BlendFactor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlendFactor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlendFactor_IsValid(int value);
constexpr BlendFactor BlendFactor_MIN = ZERO;
constexpr BlendFactor BlendFactor_MAX = ONE_MINUS_DST_ALPHA;
constexpr int BlendFactor_ARRAYSIZE = BlendFactor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendFactor_descriptor();
template<typename T>
inline const std::string& BlendFactor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlendFactor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlendFactor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlendFactor_descriptor(), enum_t_value);
}
inline bool BlendFactor_Parse(
    const std::string& name, BlendFactor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlendFactor>(
    BlendFactor_descriptor(), name, value);
}
enum BlendOp : int {
  ADD = 0,
  SUB = 1,
  REV_SUB = 2,
  MIN = 3,
  MAX = 4,
  CLEAR = 5,
  SET = 6,
  COPY = 7,
  COPY_INVERTED = 8,
  NOOP = 9,
  INVERT = 10,
  AND = 11,
  NAND = 12,
  OR = 13,
  NOR = 14,
  XOR = 15,
  EQUIV = 16,
  AND_REVERSE = 17,
  AND_INVERTED = 18,
  OR_REVERSE = 19,
  OR_INVERTED = 20,
  MULTIPLY = 21,
  SCREEN = 22,
  OVERLAY = 23,
  DARKEN = 24,
  LIGHTEN = 25,
  COLOR_DODGE = 26,
  COLOR_BURN = 27,
  HARD_LIGHT = 28,
  SOFT_LIGHT = 29,
  DIFFERENCE = 30,
  EXCLUSION = 31,
  HSL_HUE = 32,
  HSL_SATURATION = 33,
  HSL_COLOR = 34,
  HSL_LUMINOSITY = 35,
  BlendOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlendOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlendOp_IsValid(int value);
constexpr BlendOp BlendOp_MIN = ADD;
constexpr BlendOp BlendOp_MAX = HSL_LUMINOSITY;
constexpr int BlendOp_ARRAYSIZE = BlendOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendOp_descriptor();
template<typename T>
inline const std::string& BlendOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlendOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlendOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlendOp_descriptor(), enum_t_value);
}
inline bool BlendOp_Parse(
    const std::string& name, BlendOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlendOp>(
    BlendOp_descriptor(), name, value);
}
enum Cull : int {
  OFF = 0,
  BACK = 1,
  FRONT = 2,
  Cull_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cull_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cull_IsValid(int value);
constexpr Cull Cull_MIN = OFF;
constexpr Cull Cull_MAX = FRONT;
constexpr int Cull_ARRAYSIZE = Cull_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cull_descriptor();
template<typename T>
inline const std::string& Cull_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cull>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cull_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cull_descriptor(), enum_t_value);
}
inline bool Cull_Parse(
    const std::string& name, Cull* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cull>(
    Cull_descriptor(), name, value);
}
enum Comp : int {
  DISABLED = 0,
  NEVER = 1,
  LESS = 2,
  EQUAL = 3,
  L_EQUAL = 4,
  GREATER = 5,
  NOT_EQUALT = 6,
  G_EQUAL = 7,
  ALWAYS = 8,
  Comp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Comp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Comp_IsValid(int value);
constexpr Comp Comp_MIN = DISABLED;
constexpr Comp Comp_MAX = ALWAYS;
constexpr int Comp_ARRAYSIZE = Comp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Comp_descriptor();
template<typename T>
inline const std::string& Comp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Comp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Comp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Comp_descriptor(), enum_t_value);
}
inline bool Comp_Parse(
    const std::string& name, Comp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Comp>(
    Comp_descriptor(), name, value);
}
enum ProgramType : int {
  CG = 0,
  HLSL = 1,
  GLSL = 2,
  ProgramType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProgramType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProgramType_IsValid(int value);
constexpr ProgramType ProgramType_MIN = CG;
constexpr ProgramType ProgramType_MAX = GLSL;
constexpr int ProgramType_ARRAYSIZE = ProgramType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramType_descriptor();
template<typename T>
inline const std::string& ProgramType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProgramType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProgramType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProgramType_descriptor(), enum_t_value);
}
inline bool ProgramType_Parse(
    const std::string& name, ProgramType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProgramType>(
    ProgramType_descriptor(), name, value);
}
// ===================================================================

class Shader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.Shader) */ {
 public:
  Shader();
  virtual ~Shader();

  Shader(const Shader& from);
  Shader(Shader&& from) noexcept
    : Shader() {
    *this = ::std::move(from);
  }

  inline Shader& operator=(const Shader& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shader& operator=(Shader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shader* internal_default_instance() {
    return reinterpret_cast<const Shader*>(
               &_Shader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Shader& a, Shader& b) {
    a.Swap(&b);
  }
  inline void Swap(Shader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shader* New() const final {
    return CreateMaybeMessage<Shader>(nullptr);
  }

  Shader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shader& from);
  void MergeFrom(const Shader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.Shader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kSubshadersFieldNumber = 3,
    kNameFieldNumber = 1,
    kFallbackFieldNumber = 4,
  };
  // repeated .Tiny3D.Script.ShaderSystem.Property properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::Tiny3D::Script::ShaderSystem::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Property >*
      mutable_properties();
  private:
  const ::Tiny3D::Script::ShaderSystem::Property& _internal_properties(int index) const;
  ::Tiny3D::Script::ShaderSystem::Property* _internal_add_properties();
  public:
  const ::Tiny3D::Script::ShaderSystem::Property& properties(int index) const;
  ::Tiny3D::Script::ShaderSystem::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Property >&
      properties() const;

  // repeated .Tiny3D.Script.ShaderSystem.SubShader subshaders = 3;
  int subshaders_size() const;
  private:
  int _internal_subshaders_size() const;
  public:
  void clear_subshaders();
  ::Tiny3D::Script::ShaderSystem::SubShader* mutable_subshaders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::SubShader >*
      mutable_subshaders();
  private:
  const ::Tiny3D::Script::ShaderSystem::SubShader& _internal_subshaders(int index) const;
  ::Tiny3D::Script::ShaderSystem::SubShader* _internal_add_subshaders();
  public:
  const ::Tiny3D::Script::ShaderSystem::SubShader& subshaders(int index) const;
  ::Tiny3D::Script::ShaderSystem::SubShader* add_subshaders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::SubShader >&
      subshaders() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Tiny3D.Script.ShaderSystem.Fallback fallback = 4;
  bool has_fallback() const;
  private:
  bool _internal_has_fallback() const;
  public:
  void clear_fallback();
  const ::Tiny3D::Script::ShaderSystem::Fallback& fallback() const;
  ::Tiny3D::Script::ShaderSystem::Fallback* release_fallback();
  ::Tiny3D::Script::ShaderSystem::Fallback* mutable_fallback();
  void set_allocated_fallback(::Tiny3D::Script::ShaderSystem::Fallback* fallback);
  private:
  const ::Tiny3D::Script::ShaderSystem::Fallback& _internal_fallback() const;
  ::Tiny3D::Script::ShaderSystem::Fallback* _internal_mutable_fallback();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.Shader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Property > properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::SubShader > subshaders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Tiny3D::Script::ShaderSystem::Fallback* fallback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Range :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(nullptr);
  }

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.Range";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kLowerFieldNumber = 2,
    kUpperFieldNumber = 3,
  };
  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // float lower = 2;
  void clear_lower();
  float lower() const;
  void set_lower(float value);
  private:
  float _internal_lower() const;
  void _internal_set_lower(float value);
  public:

  // float upper = 3;
  void clear_upper();
  float upper() const;
  void set_upper(float value);
  private:
  float _internal_upper() const;
  void _internal_set_upper(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.Range)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float value_;
  float lower_;
  float upper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class PropertyValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.PropertyValue) */ {
 public:
  PropertyValue();
  virtual ~PropertyValue();

  PropertyValue(const PropertyValue& from);
  PropertyValue(PropertyValue&& from) noexcept
    : PropertyValue() {
    *this = ::std::move(from);
  }

  inline PropertyValue& operator=(const PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyValue& operator=(PropertyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyValue& default_instance();

  enum PropertyValueOneofCase {
    kIval = 1,
    kFval = 2,
    kRval = 3,
    kTex2D = 4,
    kTex2DArray = 5,
    kTex3D = 6,
    kCubemap = 7,
    kCubemapArray = 8,
    kColor = 9,
    kVector = 10,
    PROPERTYVALUEONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyValue* internal_default_instance() {
    return reinterpret_cast<const PropertyValue*>(
               &_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PropertyValue& a, PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyValue* New() const final {
    return CreateMaybeMessage<PropertyValue>(nullptr);
  }

  PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyValue& from);
  void MergeFrom(const PropertyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.PropertyValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIvalFieldNumber = 1,
    kFvalFieldNumber = 2,
    kRvalFieldNumber = 3,
    kTex2DFieldNumber = 4,
    kTex2DArrayFieldNumber = 5,
    kTex3DFieldNumber = 6,
    kCubemapFieldNumber = 7,
    kCubemapArrayFieldNumber = 8,
    kColorFieldNumber = 9,
    kVectorFieldNumber = 10,
  };
  // .Tiny3D.Script.Int32 ival = 1;
  bool has_ival() const;
  private:
  bool _internal_has_ival() const;
  public:
  void clear_ival();
  const ::Tiny3D::Script::Int32& ival() const;
  ::Tiny3D::Script::Int32* release_ival();
  ::Tiny3D::Script::Int32* mutable_ival();
  void set_allocated_ival(::Tiny3D::Script::Int32* ival);
  private:
  const ::Tiny3D::Script::Int32& _internal_ival() const;
  ::Tiny3D::Script::Int32* _internal_mutable_ival();
  public:

  // .Tiny3D.Script.Float fval = 2;
  bool has_fval() const;
  private:
  bool _internal_has_fval() const;
  public:
  void clear_fval();
  const ::Tiny3D::Script::Float& fval() const;
  ::Tiny3D::Script::Float* release_fval();
  ::Tiny3D::Script::Float* mutable_fval();
  void set_allocated_fval(::Tiny3D::Script::Float* fval);
  private:
  const ::Tiny3D::Script::Float& _internal_fval() const;
  ::Tiny3D::Script::Float* _internal_mutable_fval();
  public:

  // .Tiny3D.Script.ShaderSystem.Range rval = 3;
  bool has_rval() const;
  private:
  bool _internal_has_rval() const;
  public:
  void clear_rval();
  const ::Tiny3D::Script::ShaderSystem::Range& rval() const;
  ::Tiny3D::Script::ShaderSystem::Range* release_rval();
  ::Tiny3D::Script::ShaderSystem::Range* mutable_rval();
  void set_allocated_rval(::Tiny3D::Script::ShaderSystem::Range* rval);
  private:
  const ::Tiny3D::Script::ShaderSystem::Range& _internal_rval() const;
  ::Tiny3D::Script::ShaderSystem::Range* _internal_mutable_rval();
  public:

  // .Tiny3D.Script.String tex2d = 4;
  bool has_tex2d() const;
  private:
  bool _internal_has_tex2d() const;
  public:
  void clear_tex2d();
  const ::Tiny3D::Script::String& tex2d() const;
  ::Tiny3D::Script::String* release_tex2d();
  ::Tiny3D::Script::String* mutable_tex2d();
  void set_allocated_tex2d(::Tiny3D::Script::String* tex2d);
  private:
  const ::Tiny3D::Script::String& _internal_tex2d() const;
  ::Tiny3D::Script::String* _internal_mutable_tex2d();
  public:

  // .Tiny3D.Script.String tex2d_array = 5;
  bool has_tex2d_array() const;
  private:
  bool _internal_has_tex2d_array() const;
  public:
  void clear_tex2d_array();
  const ::Tiny3D::Script::String& tex2d_array() const;
  ::Tiny3D::Script::String* release_tex2d_array();
  ::Tiny3D::Script::String* mutable_tex2d_array();
  void set_allocated_tex2d_array(::Tiny3D::Script::String* tex2d_array);
  private:
  const ::Tiny3D::Script::String& _internal_tex2d_array() const;
  ::Tiny3D::Script::String* _internal_mutable_tex2d_array();
  public:

  // .Tiny3D.Script.String tex3d = 6;
  bool has_tex3d() const;
  private:
  bool _internal_has_tex3d() const;
  public:
  void clear_tex3d();
  const ::Tiny3D::Script::String& tex3d() const;
  ::Tiny3D::Script::String* release_tex3d();
  ::Tiny3D::Script::String* mutable_tex3d();
  void set_allocated_tex3d(::Tiny3D::Script::String* tex3d);
  private:
  const ::Tiny3D::Script::String& _internal_tex3d() const;
  ::Tiny3D::Script::String* _internal_mutable_tex3d();
  public:

  // .Tiny3D.Script.String cubemap = 7;
  bool has_cubemap() const;
  private:
  bool _internal_has_cubemap() const;
  public:
  void clear_cubemap();
  const ::Tiny3D::Script::String& cubemap() const;
  ::Tiny3D::Script::String* release_cubemap();
  ::Tiny3D::Script::String* mutable_cubemap();
  void set_allocated_cubemap(::Tiny3D::Script::String* cubemap);
  private:
  const ::Tiny3D::Script::String& _internal_cubemap() const;
  ::Tiny3D::Script::String* _internal_mutable_cubemap();
  public:

  // .Tiny3D.Script.String cubemap_array = 8;
  bool has_cubemap_array() const;
  private:
  bool _internal_has_cubemap_array() const;
  public:
  void clear_cubemap_array();
  const ::Tiny3D::Script::String& cubemap_array() const;
  ::Tiny3D::Script::String* release_cubemap_array();
  ::Tiny3D::Script::String* mutable_cubemap_array();
  void set_allocated_cubemap_array(::Tiny3D::Script::String* cubemap_array);
  private:
  const ::Tiny3D::Script::String& _internal_cubemap_array() const;
  ::Tiny3D::Script::String* _internal_mutable_cubemap_array();
  public:

  // .Tiny3D.Script.Color color = 9;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Tiny3D::Script::Color& color() const;
  ::Tiny3D::Script::Color* release_color();
  ::Tiny3D::Script::Color* mutable_color();
  void set_allocated_color(::Tiny3D::Script::Color* color);
  private:
  const ::Tiny3D::Script::Color& _internal_color() const;
  ::Tiny3D::Script::Color* _internal_mutable_color();
  public:

  // .Tiny3D.Script.Vector4 vector = 10;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::Tiny3D::Script::Vector4& vector() const;
  ::Tiny3D::Script::Vector4* release_vector();
  ::Tiny3D::Script::Vector4* mutable_vector();
  void set_allocated_vector(::Tiny3D::Script::Vector4* vector);
  private:
  const ::Tiny3D::Script::Vector4& _internal_vector() const;
  ::Tiny3D::Script::Vector4* _internal_mutable_vector();
  public:

  void clear_PropertyValueOneof();
  PropertyValueOneofCase PropertyValueOneof_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.PropertyValue)
 private:
  class _Internal;
  void set_has_ival();
  void set_has_fval();
  void set_has_rval();
  void set_has_tex2d();
  void set_has_tex2d_array();
  void set_has_tex3d();
  void set_has_cubemap();
  void set_has_cubemap_array();
  void set_has_color();
  void set_has_vector();

  inline bool has_PropertyValueOneof() const;
  inline void clear_has_PropertyValueOneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyValueOneofUnion {
    PropertyValueOneofUnion() {}
    ::Tiny3D::Script::Int32* ival_;
    ::Tiny3D::Script::Float* fval_;
    ::Tiny3D::Script::ShaderSystem::Range* rval_;
    ::Tiny3D::Script::String* tex2d_;
    ::Tiny3D::Script::String* tex2d_array_;
    ::Tiny3D::Script::String* tex3d_;
    ::Tiny3D::Script::String* cubemap_;
    ::Tiny3D::Script::String* cubemap_array_;
    ::Tiny3D::Script::Color* color_;
    ::Tiny3D::Script::Vector4* vector_;
  } PropertyValueOneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Property :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(nullptr);
  }

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.Property";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kValuesFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .Tiny3D.Script.ShaderSystem.PropertyValue values = 3;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::Tiny3D::Script::ShaderSystem::PropertyValue& values() const;
  ::Tiny3D::Script::ShaderSystem::PropertyValue* release_values();
  ::Tiny3D::Script::ShaderSystem::PropertyValue* mutable_values();
  void set_allocated_values(::Tiny3D::Script::ShaderSystem::PropertyValue* values);
  private:
  const ::Tiny3D::Script::ShaderSystem::PropertyValue& _internal_values() const;
  ::Tiny3D::Script::ShaderSystem::PropertyValue* _internal_mutable_values();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.Property)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::Tiny3D::Script::ShaderSystem::PropertyValue* values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Fallback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.Fallback) */ {
 public:
  Fallback();
  virtual ~Fallback();

  Fallback(const Fallback& from);
  Fallback(Fallback&& from) noexcept
    : Fallback() {
    *this = ::std::move(from);
  }

  inline Fallback& operator=(const Fallback& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fallback& operator=(Fallback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fallback& default_instance();

  enum FallbackOneofCase {
    kEnable = 1,
    kName = 2,
    FALLBACKONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fallback* internal_default_instance() {
    return reinterpret_cast<const Fallback*>(
               &_Fallback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Fallback& a, Fallback& b) {
    a.Swap(&b);
  }
  inline void Swap(Fallback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fallback* New() const final {
    return CreateMaybeMessage<Fallback>(nullptr);
  }

  Fallback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fallback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fallback& from);
  void MergeFrom(const Fallback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fallback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.Fallback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // .Tiny3D.Script.Bool enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::Tiny3D::Script::Bool& enable() const;
  ::Tiny3D::Script::Bool* release_enable();
  ::Tiny3D::Script::Bool* mutable_enable();
  void set_allocated_enable(::Tiny3D::Script::Bool* enable);
  private:
  const ::Tiny3D::Script::Bool& _internal_enable() const;
  ::Tiny3D::Script::Bool* _internal_mutable_enable();
  public:

  // .Tiny3D.Script.String name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::Tiny3D::Script::String& name() const;
  ::Tiny3D::Script::String* release_name();
  ::Tiny3D::Script::String* mutable_name();
  void set_allocated_name(::Tiny3D::Script::String* name);
  private:
  const ::Tiny3D::Script::String& _internal_name() const;
  ::Tiny3D::Script::String* _internal_mutable_name();
  public:

  void clear_FallbackOneof();
  FallbackOneofCase FallbackOneof_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.Fallback)
 private:
  class _Internal;
  void set_has_enable();
  void set_has_name();

  inline bool has_FallbackOneof() const;
  inline void clear_has_FallbackOneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union FallbackOneofUnion {
    FallbackOneofUnion() {}
    ::Tiny3D::Script::Bool* enable_;
    ::Tiny3D::Script::String* name_;
  } FallbackOneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class SubShader_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SubShader_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SubShader_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SubShader_TagsEntry_DoNotUse();
  SubShader_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SubShader_TagsEntry_DoNotUse& other);
  static const SubShader_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SubShader_TagsEntry_DoNotUse*>(&_SubShader_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.ShaderSystem.SubShader.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.ShaderSystem.SubShader.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class SubShader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.SubShader) */ {
 public:
  SubShader();
  virtual ~SubShader();

  SubShader(const SubShader& from);
  SubShader(SubShader&& from) noexcept
    : SubShader() {
    *this = ::std::move(from);
  }

  inline SubShader& operator=(const SubShader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubShader& operator=(SubShader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubShader& default_instance();

  enum CommandCase {
    kState = 3,
    kUsePass = 4,
    kGrabPass = 5,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubShader* internal_default_instance() {
    return reinterpret_cast<const SubShader*>(
               &_SubShader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubShader& a, SubShader& b) {
    a.Swap(&b);
  }
  inline void Swap(SubShader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubShader* New() const final {
    return CreateMaybeMessage<SubShader>(nullptr);
  }

  SubShader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubShader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubShader& from);
  void MergeFrom(const SubShader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubShader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.SubShader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kPassesFieldNumber = 6,
    kLodFieldNumber = 1,
    kStateFieldNumber = 3,
    kUsePassFieldNumber = 4,
    kGrabPassFieldNumber = 5,
  };
  // map<string, string> tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // repeated .Tiny3D.Script.ShaderSystem.Pass passes = 6;
  int passes_size() const;
  private:
  int _internal_passes_size() const;
  public:
  void clear_passes();
  ::Tiny3D::Script::ShaderSystem::Pass* mutable_passes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Pass >*
      mutable_passes();
  private:
  const ::Tiny3D::Script::ShaderSystem::Pass& _internal_passes(int index) const;
  ::Tiny3D::Script::ShaderSystem::Pass* _internal_add_passes();
  public:
  const ::Tiny3D::Script::ShaderSystem::Pass& passes(int index) const;
  ::Tiny3D::Script::ShaderSystem::Pass* add_passes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Pass >&
      passes() const;

  // sint32 lod = 1;
  void clear_lod();
  ::PROTOBUF_NAMESPACE_ID::int32 lod() const;
  void set_lod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lod() const;
  void _internal_set_lod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Tiny3D.Script.ShaderSystem.State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::Tiny3D::Script::ShaderSystem::State& state() const;
  ::Tiny3D::Script::ShaderSystem::State* release_state();
  ::Tiny3D::Script::ShaderSystem::State* mutable_state();
  void set_allocated_state(::Tiny3D::Script::ShaderSystem::State* state);
  private:
  const ::Tiny3D::Script::ShaderSystem::State& _internal_state() const;
  ::Tiny3D::Script::ShaderSystem::State* _internal_mutable_state();
  public:

  // .Tiny3D.Script.String use_pass = 4;
  bool has_use_pass() const;
  private:
  bool _internal_has_use_pass() const;
  public:
  void clear_use_pass();
  const ::Tiny3D::Script::String& use_pass() const;
  ::Tiny3D::Script::String* release_use_pass();
  ::Tiny3D::Script::String* mutable_use_pass();
  void set_allocated_use_pass(::Tiny3D::Script::String* use_pass);
  private:
  const ::Tiny3D::Script::String& _internal_use_pass() const;
  ::Tiny3D::Script::String* _internal_mutable_use_pass();
  public:

  // .Tiny3D.Script.String grab_pass = 5;
  bool has_grab_pass() const;
  private:
  bool _internal_has_grab_pass() const;
  public:
  void clear_grab_pass();
  const ::Tiny3D::Script::String& grab_pass() const;
  ::Tiny3D::Script::String* release_grab_pass();
  ::Tiny3D::Script::String* mutable_grab_pass();
  void set_allocated_grab_pass(::Tiny3D::Script::String* grab_pass);
  private:
  const ::Tiny3D::Script::String& _internal_grab_pass() const;
  ::Tiny3D::Script::String* _internal_mutable_grab_pass();
  public:

  void clear_Command();
  CommandCase Command_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.SubShader)
 private:
  class _Internal;
  void set_has_state();
  void set_has_use_pass();
  void set_has_grab_pass();

  inline bool has_Command() const;
  inline void clear_has_Command();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SubShader_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Pass > passes_;
  ::PROTOBUF_NAMESPACE_ID::int32 lod_;
  union CommandUnion {
    CommandUnion() {}
    ::Tiny3D::Script::ShaderSystem::State* state_;
    ::Tiny3D::Script::String* use_pass_;
    ::Tiny3D::Script::String* grab_pass_;
  } Command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Pass_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pass_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pass_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Pass_TagsEntry_DoNotUse();
  Pass_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pass_TagsEntry_DoNotUse& other);
  static const Pass_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pass_TagsEntry_DoNotUse*>(&_Pass_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.ShaderSystem.Pass.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.ShaderSystem.Pass.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class Pass :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.Pass) */ {
 public:
  Pass();
  virtual ~Pass();

  Pass(const Pass& from);
  Pass(Pass&& from) noexcept
    : Pass() {
    *this = ::std::move(from);
  }

  inline Pass& operator=(const Pass& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pass& operator=(Pass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pass& default_instance();

  enum CommandCase {
    kState = 3,
    kUsePass = 4,
    kGrabPass = 5,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pass* internal_default_instance() {
    return reinterpret_cast<const Pass*>(
               &_Pass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Pass& a, Pass& b) {
    a.Swap(&b);
  }
  inline void Swap(Pass* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pass* New() const final {
    return CreateMaybeMessage<Pass>(nullptr);
  }

  Pass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pass>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pass& from);
  void MergeFrom(const Pass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.Pass";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kNameFieldNumber = 1,
    kProgramFieldNumber = 6,
    kStateFieldNumber = 3,
    kUsePassFieldNumber = 4,
    kGrabPassFieldNumber = 5,
  };
  // map<string, string> tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Tiny3D.Script.ShaderSystem.Program program = 6;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  const ::Tiny3D::Script::ShaderSystem::Program& program() const;
  ::Tiny3D::Script::ShaderSystem::Program* release_program();
  ::Tiny3D::Script::ShaderSystem::Program* mutable_program();
  void set_allocated_program(::Tiny3D::Script::ShaderSystem::Program* program);
  private:
  const ::Tiny3D::Script::ShaderSystem::Program& _internal_program() const;
  ::Tiny3D::Script::ShaderSystem::Program* _internal_mutable_program();
  public:

  // .Tiny3D.Script.ShaderSystem.State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::Tiny3D::Script::ShaderSystem::State& state() const;
  ::Tiny3D::Script::ShaderSystem::State* release_state();
  ::Tiny3D::Script::ShaderSystem::State* mutable_state();
  void set_allocated_state(::Tiny3D::Script::ShaderSystem::State* state);
  private:
  const ::Tiny3D::Script::ShaderSystem::State& _internal_state() const;
  ::Tiny3D::Script::ShaderSystem::State* _internal_mutable_state();
  public:

  // .Tiny3D.Script.String use_pass = 4;
  bool has_use_pass() const;
  private:
  bool _internal_has_use_pass() const;
  public:
  void clear_use_pass();
  const ::Tiny3D::Script::String& use_pass() const;
  ::Tiny3D::Script::String* release_use_pass();
  ::Tiny3D::Script::String* mutable_use_pass();
  void set_allocated_use_pass(::Tiny3D::Script::String* use_pass);
  private:
  const ::Tiny3D::Script::String& _internal_use_pass() const;
  ::Tiny3D::Script::String* _internal_mutable_use_pass();
  public:

  // .Tiny3D.Script.String grab_pass = 5;
  bool has_grab_pass() const;
  private:
  bool _internal_has_grab_pass() const;
  public:
  void clear_grab_pass();
  const ::Tiny3D::Script::String& grab_pass() const;
  ::Tiny3D::Script::String* release_grab_pass();
  ::Tiny3D::Script::String* mutable_grab_pass();
  void set_allocated_grab_pass(::Tiny3D::Script::String* grab_pass);
  private:
  const ::Tiny3D::Script::String& _internal_grab_pass() const;
  ::Tiny3D::Script::String* _internal_mutable_grab_pass();
  public:

  void clear_Command();
  CommandCase Command_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.Pass)
 private:
  class _Internal;
  void set_has_state();
  void set_has_use_pass();
  void set_has_grab_pass();

  inline bool has_Command() const;
  inline void clear_has_Command();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pass_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Tiny3D::Script::ShaderSystem::Program* program_;
  union CommandUnion {
    CommandUnion() {}
    ::Tiny3D::Script::ShaderSystem::State* state_;
    ::Tiny3D::Script::String* use_pass_;
    ::Tiny3D::Script::String* grab_pass_;
  } Command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlendFieldNumber = 2,
    kColorMaskFieldNumber = 4,
    kDepthBiasFieldNumber = 7,
    kStencilFieldNumber = 8,
    kBlendOpFieldNumber = 3,
    kCullFieldNumber = 6,
    kAlpha2MaskFieldNumber = 1,
    kConservativeFieldNumber = 5,
    kZClipFieldNumber = 9,
    kZWriteFieldNumber = 11,
    kZTestFieldNumber = 10,
  };
  // .Tiny3D.Script.ShaderSystem.Blend blend = 2;
  bool has_blend() const;
  private:
  bool _internal_has_blend() const;
  public:
  void clear_blend();
  const ::Tiny3D::Script::ShaderSystem::Blend& blend() const;
  ::Tiny3D::Script::ShaderSystem::Blend* release_blend();
  ::Tiny3D::Script::ShaderSystem::Blend* mutable_blend();
  void set_allocated_blend(::Tiny3D::Script::ShaderSystem::Blend* blend);
  private:
  const ::Tiny3D::Script::ShaderSystem::Blend& _internal_blend() const;
  ::Tiny3D::Script::ShaderSystem::Blend* _internal_mutable_blend();
  public:

  // .Tiny3D.Script.ShaderSystem.ColorMask color_mask = 4;
  bool has_color_mask() const;
  private:
  bool _internal_has_color_mask() const;
  public:
  void clear_color_mask();
  const ::Tiny3D::Script::ShaderSystem::ColorMask& color_mask() const;
  ::Tiny3D::Script::ShaderSystem::ColorMask* release_color_mask();
  ::Tiny3D::Script::ShaderSystem::ColorMask* mutable_color_mask();
  void set_allocated_color_mask(::Tiny3D::Script::ShaderSystem::ColorMask* color_mask);
  private:
  const ::Tiny3D::Script::ShaderSystem::ColorMask& _internal_color_mask() const;
  ::Tiny3D::Script::ShaderSystem::ColorMask* _internal_mutable_color_mask();
  public:

  // .Tiny3D.Script.ShaderSystem.DepthBias depth_bias = 7;
  bool has_depth_bias() const;
  private:
  bool _internal_has_depth_bias() const;
  public:
  void clear_depth_bias();
  const ::Tiny3D::Script::ShaderSystem::DepthBias& depth_bias() const;
  ::Tiny3D::Script::ShaderSystem::DepthBias* release_depth_bias();
  ::Tiny3D::Script::ShaderSystem::DepthBias* mutable_depth_bias();
  void set_allocated_depth_bias(::Tiny3D::Script::ShaderSystem::DepthBias* depth_bias);
  private:
  const ::Tiny3D::Script::ShaderSystem::DepthBias& _internal_depth_bias() const;
  ::Tiny3D::Script::ShaderSystem::DepthBias* _internal_mutable_depth_bias();
  public:

  // .Tiny3D.Script.ShaderSystem.Stencil stencil = 8;
  bool has_stencil() const;
  private:
  bool _internal_has_stencil() const;
  public:
  void clear_stencil();
  const ::Tiny3D::Script::ShaderSystem::Stencil& stencil() const;
  ::Tiny3D::Script::ShaderSystem::Stencil* release_stencil();
  ::Tiny3D::Script::ShaderSystem::Stencil* mutable_stencil();
  void set_allocated_stencil(::Tiny3D::Script::ShaderSystem::Stencil* stencil);
  private:
  const ::Tiny3D::Script::ShaderSystem::Stencil& _internal_stencil() const;
  ::Tiny3D::Script::ShaderSystem::Stencil* _internal_mutable_stencil();
  public:

  // .Tiny3D.Script.ShaderSystem.BlendOp blend_op = 3;
  void clear_blend_op();
  ::Tiny3D::Script::ShaderSystem::BlendOp blend_op() const;
  void set_blend_op(::Tiny3D::Script::ShaderSystem::BlendOp value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendOp _internal_blend_op() const;
  void _internal_set_blend_op(::Tiny3D::Script::ShaderSystem::BlendOp value);
  public:

  // .Tiny3D.Script.ShaderSystem.Cull cull = 6;
  void clear_cull();
  ::Tiny3D::Script::ShaderSystem::Cull cull() const;
  void set_cull(::Tiny3D::Script::ShaderSystem::Cull value);
  private:
  ::Tiny3D::Script::ShaderSystem::Cull _internal_cull() const;
  void _internal_set_cull(::Tiny3D::Script::ShaderSystem::Cull value);
  public:

  // bool alpha2Mask = 1;
  void clear_alpha2mask();
  bool alpha2mask() const;
  void set_alpha2mask(bool value);
  private:
  bool _internal_alpha2mask() const;
  void _internal_set_alpha2mask(bool value);
  public:

  // bool conservative = 5;
  void clear_conservative();
  bool conservative() const;
  void set_conservative(bool value);
  private:
  bool _internal_conservative() const;
  void _internal_set_conservative(bool value);
  public:

  // bool z_clip = 9;
  void clear_z_clip();
  bool z_clip() const;
  void set_z_clip(bool value);
  private:
  bool _internal_z_clip() const;
  void _internal_set_z_clip(bool value);
  public:

  // bool z_write = 11;
  void clear_z_write();
  bool z_write() const;
  void set_z_write(bool value);
  private:
  bool _internal_z_write() const;
  void _internal_set_z_write(bool value);
  public:

  // .Tiny3D.Script.ShaderSystem.Comp z_test = 10;
  void clear_z_test();
  ::Tiny3D::Script::ShaderSystem::Comp z_test() const;
  void set_z_test(::Tiny3D::Script::ShaderSystem::Comp value);
  private:
  ::Tiny3D::Script::ShaderSystem::Comp _internal_z_test() const;
  void _internal_set_z_test(::Tiny3D::Script::ShaderSystem::Comp value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::ShaderSystem::Blend* blend_;
  ::Tiny3D::Script::ShaderSystem::ColorMask* color_mask_;
  ::Tiny3D::Script::ShaderSystem::DepthBias* depth_bias_;
  ::Tiny3D::Script::ShaderSystem::Stencil* stencil_;
  int blend_op_;
  int cull_;
  bool alpha2mask_;
  bool conservative_;
  bool z_clip_;
  bool z_write_;
  int z_test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Blend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.Blend) */ {
 public:
  Blend();
  virtual ~Blend();

  Blend(const Blend& from);
  Blend(Blend&& from) noexcept
    : Blend() {
    *this = ::std::move(from);
  }

  inline Blend& operator=(const Blend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blend& operator=(Blend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Blend& default_instance();

  enum BlendOneofCase {
    kState = 1,
    kTarget = 2,
    BLENDONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Blend* internal_default_instance() {
    return reinterpret_cast<const Blend*>(
               &_Blend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Blend& a, Blend& b) {
    a.Swap(&b);
  }
  inline void Swap(Blend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blend* New() const final {
    return CreateMaybeMessage<Blend>(nullptr);
  }

  Blend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Blend& from);
  void MergeFrom(const Blend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.Blend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // .Tiny3D.Script.ShaderSystem.BlendState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::Tiny3D::Script::ShaderSystem::BlendState& state() const;
  ::Tiny3D::Script::ShaderSystem::BlendState* release_state();
  ::Tiny3D::Script::ShaderSystem::BlendState* mutable_state();
  void set_allocated_state(::Tiny3D::Script::ShaderSystem::BlendState* state);
  private:
  const ::Tiny3D::Script::ShaderSystem::BlendState& _internal_state() const;
  ::Tiny3D::Script::ShaderSystem::BlendState* _internal_mutable_state();
  public:

  // .Tiny3D.Script.ShaderSystem.BlendStateRenderTarget target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget& target() const;
  ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* release_target();
  ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* mutable_target();
  void set_allocated_target(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* target);
  private:
  const ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget& _internal_target() const;
  ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* _internal_mutable_target();
  public:

  void clear_BlendOneof();
  BlendOneofCase BlendOneof_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.Blend)
 private:
  class _Internal;
  void set_has_state();
  void set_has_target();

  inline bool has_BlendOneof() const;
  inline void clear_has_BlendOneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union BlendOneofUnion {
    BlendOneofUnion() {}
    ::Tiny3D::Script::ShaderSystem::BlendState* state_;
    ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* target_;
  } BlendOneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class BlendState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.BlendState) */ {
 public:
  BlendState();
  virtual ~BlendState();

  BlendState(const BlendState& from);
  BlendState(BlendState&& from) noexcept
    : BlendState() {
    *this = ::std::move(from);
  }

  inline BlendState& operator=(const BlendState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendState& operator=(BlendState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlendState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlendState* internal_default_instance() {
    return reinterpret_cast<const BlendState*>(
               &_BlendState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlendState& a, BlendState& b) {
    a.Swap(&b);
  }
  inline void Swap(BlendState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlendState* New() const final {
    return CreateMaybeMessage<BlendState>(nullptr);
  }

  BlendState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlendState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlendState& from);
  void MergeFrom(const BlendState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlendState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.BlendState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcRgbFieldNumber = 1,
    kDstRgbFieldNumber = 2,
    kSrcAlphaFieldNumber = 3,
    kDstAlphaFieldNumber = 4,
  };
  // .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 1;
  void clear_src_rgb();
  ::Tiny3D::Script::ShaderSystem::BlendFactor src_rgb() const;
  void set_src_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendFactor _internal_src_rgb() const;
  void _internal_set_src_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 2;
  void clear_dst_rgb();
  ::Tiny3D::Script::ShaderSystem::BlendFactor dst_rgb() const;
  void set_dst_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendFactor _internal_dst_rgb() const;
  void _internal_set_dst_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 3;
  void clear_src_alpha();
  ::Tiny3D::Script::ShaderSystem::BlendFactor src_alpha() const;
  void set_src_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendFactor _internal_src_alpha() const;
  void _internal_set_src_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 4;
  void clear_dst_alpha();
  ::Tiny3D::Script::ShaderSystem::BlendFactor dst_alpha() const;
  void set_dst_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendFactor _internal_dst_alpha() const;
  void _internal_set_dst_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.BlendState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int src_rgb_;
  int dst_rgb_;
  int src_alpha_;
  int dst_alpha_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class BlendStateRenderTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget) */ {
 public:
  BlendStateRenderTarget();
  virtual ~BlendStateRenderTarget();

  BlendStateRenderTarget(const BlendStateRenderTarget& from);
  BlendStateRenderTarget(BlendStateRenderTarget&& from) noexcept
    : BlendStateRenderTarget() {
    *this = ::std::move(from);
  }

  inline BlendStateRenderTarget& operator=(const BlendStateRenderTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendStateRenderTarget& operator=(BlendStateRenderTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlendStateRenderTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlendStateRenderTarget* internal_default_instance() {
    return reinterpret_cast<const BlendStateRenderTarget*>(
               &_BlendStateRenderTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BlendStateRenderTarget& a, BlendStateRenderTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(BlendStateRenderTarget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlendStateRenderTarget* New() const final {
    return CreateMaybeMessage<BlendStateRenderTarget>(nullptr);
  }

  BlendStateRenderTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlendStateRenderTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlendStateRenderTarget& from);
  void MergeFrom(const BlendStateRenderTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlendStateRenderTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.BlendStateRenderTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kSrcRgbFieldNumber = 2,
    kDstRgbFieldNumber = 3,
    kSrcAlphaFieldNumber = 4,
    kDstAlphaFieldNumber = 5,
  };
  // sint32 target = 1;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target() const;
  void _internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 2;
  void clear_src_rgb();
  ::Tiny3D::Script::ShaderSystem::BlendFactor src_rgb() const;
  void set_src_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendFactor _internal_src_rgb() const;
  void _internal_set_src_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 3;
  void clear_dst_rgb();
  ::Tiny3D::Script::ShaderSystem::BlendFactor dst_rgb() const;
  void set_dst_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendFactor _internal_dst_rgb() const;
  void _internal_set_dst_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 4;
  void clear_src_alpha();
  ::Tiny3D::Script::ShaderSystem::BlendFactor src_alpha() const;
  void set_src_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendFactor _internal_src_alpha() const;
  void _internal_set_src_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 5;
  void clear_dst_alpha();
  ::Tiny3D::Script::ShaderSystem::BlendFactor dst_alpha() const;
  void set_dst_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::ShaderSystem::BlendFactor _internal_dst_alpha() const;
  void _internal_set_dst_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_;
  int src_rgb_;
  int dst_rgb_;
  int src_alpha_;
  int dst_alpha_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class ColorMaskState1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.ColorMaskState1) */ {
 public:
  ColorMaskState1();
  virtual ~ColorMaskState1();

  ColorMaskState1(const ColorMaskState1& from);
  ColorMaskState1(ColorMaskState1&& from) noexcept
    : ColorMaskState1() {
    *this = ::std::move(from);
  }

  inline ColorMaskState1& operator=(const ColorMaskState1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorMaskState1& operator=(ColorMaskState1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorMaskState1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorMaskState1* internal_default_instance() {
    return reinterpret_cast<const ColorMaskState1*>(
               &_ColorMaskState1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ColorMaskState1& a, ColorMaskState1& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorMaskState1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorMaskState1* New() const final {
    return CreateMaybeMessage<ColorMaskState1>(nullptr);
  }

  ColorMaskState1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorMaskState1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorMaskState1& from);
  void MergeFrom(const ColorMaskState1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorMaskState1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.ColorMaskState1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // sint32 channels = 1;
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.ColorMaskState1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class ColorMaskState2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.ColorMaskState2) */ {
 public:
  ColorMaskState2();
  virtual ~ColorMaskState2();

  ColorMaskState2(const ColorMaskState2& from);
  ColorMaskState2(ColorMaskState2&& from) noexcept
    : ColorMaskState2() {
    *this = ::std::move(from);
  }

  inline ColorMaskState2& operator=(const ColorMaskState2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorMaskState2& operator=(ColorMaskState2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorMaskState2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorMaskState2* internal_default_instance() {
    return reinterpret_cast<const ColorMaskState2*>(
               &_ColorMaskState2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ColorMaskState2& a, ColorMaskState2& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorMaskState2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorMaskState2* New() const final {
    return CreateMaybeMessage<ColorMaskState2>(nullptr);
  }

  ColorMaskState2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorMaskState2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorMaskState2& from);
  void MergeFrom(const ColorMaskState2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorMaskState2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.ColorMaskState2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // sint32 channels = 1;
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 target = 2;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target() const;
  void _internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.ColorMaskState2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class ColorMask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.ColorMask) */ {
 public:
  ColorMask();
  virtual ~ColorMask();

  ColorMask(const ColorMask& from);
  ColorMask(ColorMask&& from) noexcept
    : ColorMask() {
    *this = ::std::move(from);
  }

  inline ColorMask& operator=(const ColorMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorMask& operator=(ColorMask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorMask& default_instance();

  enum ColorMaskOneofCase {
    kState1 = 1,
    kState2 = 2,
    COLORMASKONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorMask* internal_default_instance() {
    return reinterpret_cast<const ColorMask*>(
               &_ColorMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ColorMask& a, ColorMask& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorMask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorMask* New() const final {
    return CreateMaybeMessage<ColorMask>(nullptr);
  }

  ColorMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorMask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorMask& from);
  void MergeFrom(const ColorMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.ColorMask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kState1FieldNumber = 1,
    kState2FieldNumber = 2,
  };
  // .Tiny3D.Script.ShaderSystem.ColorMaskState1 state1 = 1;
  bool has_state1() const;
  private:
  bool _internal_has_state1() const;
  public:
  void clear_state1();
  const ::Tiny3D::Script::ShaderSystem::ColorMaskState1& state1() const;
  ::Tiny3D::Script::ShaderSystem::ColorMaskState1* release_state1();
  ::Tiny3D::Script::ShaderSystem::ColorMaskState1* mutable_state1();
  void set_allocated_state1(::Tiny3D::Script::ShaderSystem::ColorMaskState1* state1);
  private:
  const ::Tiny3D::Script::ShaderSystem::ColorMaskState1& _internal_state1() const;
  ::Tiny3D::Script::ShaderSystem::ColorMaskState1* _internal_mutable_state1();
  public:

  // .Tiny3D.Script.ShaderSystem.ColorMaskState2 state2 = 2;
  bool has_state2() const;
  private:
  bool _internal_has_state2() const;
  public:
  void clear_state2();
  const ::Tiny3D::Script::ShaderSystem::ColorMaskState2& state2() const;
  ::Tiny3D::Script::ShaderSystem::ColorMaskState2* release_state2();
  ::Tiny3D::Script::ShaderSystem::ColorMaskState2* mutable_state2();
  void set_allocated_state2(::Tiny3D::Script::ShaderSystem::ColorMaskState2* state2);
  private:
  const ::Tiny3D::Script::ShaderSystem::ColorMaskState2& _internal_state2() const;
  ::Tiny3D::Script::ShaderSystem::ColorMaskState2* _internal_mutable_state2();
  public:

  void clear_ColorMaskOneof();
  ColorMaskOneofCase ColorMaskOneof_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.ColorMask)
 private:
  class _Internal;
  void set_has_state1();
  void set_has_state2();

  inline bool has_ColorMaskOneof() const;
  inline void clear_has_ColorMaskOneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ColorMaskOneofUnion {
    ColorMaskOneofUnion() {}
    ::Tiny3D::Script::ShaderSystem::ColorMaskState1* state1_;
    ::Tiny3D::Script::ShaderSystem::ColorMaskState2* state2_;
  } ColorMaskOneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class DepthBias :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.DepthBias) */ {
 public:
  DepthBias();
  virtual ~DepthBias();

  DepthBias(const DepthBias& from);
  DepthBias(DepthBias&& from) noexcept
    : DepthBias() {
    *this = ::std::move(from);
  }

  inline DepthBias& operator=(const DepthBias& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthBias& operator=(DepthBias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthBias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthBias* internal_default_instance() {
    return reinterpret_cast<const DepthBias*>(
               &_DepthBias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DepthBias& a, DepthBias& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthBias* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthBias* New() const final {
    return CreateMaybeMessage<DepthBias>(nullptr);
  }

  DepthBias* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthBias>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthBias& from);
  void MergeFrom(const DepthBias& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthBias* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.DepthBias";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactorFieldNumber = 1,
    kUnitsFieldNumber = 2,
  };
  // float factor = 1;
  void clear_factor();
  float factor() const;
  void set_factor(float value);
  private:
  float _internal_factor() const;
  void _internal_set_factor(float value);
  public:

  // float units = 2;
  void clear_units();
  float units() const;
  void set_units(float value);
  private:
  float _internal_units() const;
  void _internal_set_units(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.DepthBias)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float factor_;
  float units_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Stencil :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.Stencil) */ {
 public:
  Stencil();
  virtual ~Stencil();

  Stencil(const Stencil& from);
  Stencil(Stencil&& from) noexcept
    : Stencil() {
    *this = ::std::move(from);
  }

  inline Stencil& operator=(const Stencil& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stencil& operator=(Stencil&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stencil& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stencil* internal_default_instance() {
    return reinterpret_cast<const Stencil*>(
               &_Stencil_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Stencil& a, Stencil& b) {
    a.Swap(&b);
  }
  inline void Swap(Stencil* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stencil* New() const final {
    return CreateMaybeMessage<Stencil>(nullptr);
  }

  Stencil* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stencil>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stencil& from);
  void MergeFrom(const Stencil& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stencil* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.Stencil";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 4,
    kOpBackFieldNumber = 5,
    kOpFrontFieldNumber = 6,
    kRefFieldNumber = 1,
    kReadMaskFieldNumber = 2,
    kWriteMaskFieldNumber = 3,
  };
  // .Tiny3D.Script.ShaderSystem.StencilOp op = 4;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::Tiny3D::Script::ShaderSystem::StencilOp& op() const;
  ::Tiny3D::Script::ShaderSystem::StencilOp* release_op();
  ::Tiny3D::Script::ShaderSystem::StencilOp* mutable_op();
  void set_allocated_op(::Tiny3D::Script::ShaderSystem::StencilOp* op);
  private:
  const ::Tiny3D::Script::ShaderSystem::StencilOp& _internal_op() const;
  ::Tiny3D::Script::ShaderSystem::StencilOp* _internal_mutable_op();
  public:

  // .Tiny3D.Script.ShaderSystem.StencilOp op_back = 5;
  bool has_op_back() const;
  private:
  bool _internal_has_op_back() const;
  public:
  void clear_op_back();
  const ::Tiny3D::Script::ShaderSystem::StencilOp& op_back() const;
  ::Tiny3D::Script::ShaderSystem::StencilOp* release_op_back();
  ::Tiny3D::Script::ShaderSystem::StencilOp* mutable_op_back();
  void set_allocated_op_back(::Tiny3D::Script::ShaderSystem::StencilOp* op_back);
  private:
  const ::Tiny3D::Script::ShaderSystem::StencilOp& _internal_op_back() const;
  ::Tiny3D::Script::ShaderSystem::StencilOp* _internal_mutable_op_back();
  public:

  // .Tiny3D.Script.ShaderSystem.StencilOp op_front = 6;
  bool has_op_front() const;
  private:
  bool _internal_has_op_front() const;
  public:
  void clear_op_front();
  const ::Tiny3D::Script::ShaderSystem::StencilOp& op_front() const;
  ::Tiny3D::Script::ShaderSystem::StencilOp* release_op_front();
  ::Tiny3D::Script::ShaderSystem::StencilOp* mutable_op_front();
  void set_allocated_op_front(::Tiny3D::Script::ShaderSystem::StencilOp* op_front);
  private:
  const ::Tiny3D::Script::ShaderSystem::StencilOp& _internal_op_front() const;
  ::Tiny3D::Script::ShaderSystem::StencilOp* _internal_mutable_op_front();
  public:

  // sint32 ref = 1;
  void clear_ref();
  ::PROTOBUF_NAMESPACE_ID::int32 ref() const;
  void set_ref(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ref() const;
  void _internal_set_ref(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 read_mask = 2;
  void clear_read_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 read_mask() const;
  void set_read_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_read_mask() const;
  void _internal_set_read_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 write_mask = 3;
  void clear_write_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 write_mask() const;
  void set_write_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_write_mask() const;
  void _internal_set_write_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.Stencil)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::ShaderSystem::StencilOp* op_;
  ::Tiny3D::Script::ShaderSystem::StencilOp* op_back_;
  ::Tiny3D::Script::ShaderSystem::StencilOp* op_front_;
  ::PROTOBUF_NAMESPACE_ID::int32 ref_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_mask_;
  ::PROTOBUF_NAMESPACE_ID::int32 write_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class StencilOp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.StencilOp) */ {
 public:
  StencilOp();
  virtual ~StencilOp();

  StencilOp(const StencilOp& from);
  StencilOp(StencilOp&& from) noexcept
    : StencilOp() {
    *this = ::std::move(from);
  }

  inline StencilOp& operator=(const StencilOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StencilOp& operator=(StencilOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StencilOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StencilOp* internal_default_instance() {
    return reinterpret_cast<const StencilOp*>(
               &_StencilOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StencilOp& a, StencilOp& b) {
    a.Swap(&b);
  }
  inline void Swap(StencilOp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StencilOp* New() const final {
    return CreateMaybeMessage<StencilOp>(nullptr);
  }

  StencilOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StencilOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StencilOp& from);
  void MergeFrom(const StencilOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StencilOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.StencilOp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StencilOp_Op Op;
  static constexpr Op KEEP =
    StencilOp_Op_KEEP;
  static constexpr Op ZERO =
    StencilOp_Op_ZERO;
  static constexpr Op REPLACE =
    StencilOp_Op_REPLACE;
  static constexpr Op INCR_SAT =
    StencilOp_Op_INCR_SAT;
  static constexpr Op DECR_SAT =
    StencilOp_Op_DECR_SAT;
  static constexpr Op INVERT =
    StencilOp_Op_INVERT;
  static constexpr Op INCR_WRAP =
    StencilOp_Op_INCR_WRAP;
  static constexpr Op DECR_WRAP =
    StencilOp_Op_DECR_WRAP;
  static inline bool Op_IsValid(int value) {
    return StencilOp_Op_IsValid(value);
  }
  static constexpr Op Op_MIN =
    StencilOp_Op_Op_MIN;
  static constexpr Op Op_MAX =
    StencilOp_Op_Op_MAX;
  static constexpr int Op_ARRAYSIZE =
    StencilOp_Op_Op_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Op_descriptor() {
    return StencilOp_Op_descriptor();
  }
  template<typename T>
  static inline const std::string& Op_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Op>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Op_Name.");
    return StencilOp_Op_Name(enum_t_value);
  }
  static inline bool Op_Parse(const std::string& name,
      Op* value) {
    return StencilOp_Op_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCompFieldNumber = 1,
    kPassFieldNumber = 2,
    kFailFieldNumber = 3,
    kZFailFieldNumber = 4,
  };
  // .Tiny3D.Script.ShaderSystem.Comp comp = 1;
  void clear_comp();
  ::Tiny3D::Script::ShaderSystem::Comp comp() const;
  void set_comp(::Tiny3D::Script::ShaderSystem::Comp value);
  private:
  ::Tiny3D::Script::ShaderSystem::Comp _internal_comp() const;
  void _internal_set_comp(::Tiny3D::Script::ShaderSystem::Comp value);
  public:

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op pass = 2;
  void clear_pass();
  ::Tiny3D::Script::ShaderSystem::StencilOp_Op pass() const;
  void set_pass(::Tiny3D::Script::ShaderSystem::StencilOp_Op value);
  private:
  ::Tiny3D::Script::ShaderSystem::StencilOp_Op _internal_pass() const;
  void _internal_set_pass(::Tiny3D::Script::ShaderSystem::StencilOp_Op value);
  public:

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op fail = 3;
  void clear_fail();
  ::Tiny3D::Script::ShaderSystem::StencilOp_Op fail() const;
  void set_fail(::Tiny3D::Script::ShaderSystem::StencilOp_Op value);
  private:
  ::Tiny3D::Script::ShaderSystem::StencilOp_Op _internal_fail() const;
  void _internal_set_fail(::Tiny3D::Script::ShaderSystem::StencilOp_Op value);
  public:

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op z_fail = 4;
  void clear_z_fail();
  ::Tiny3D::Script::ShaderSystem::StencilOp_Op z_fail() const;
  void set_z_fail(::Tiny3D::Script::ShaderSystem::StencilOp_Op value);
  private:
  ::Tiny3D::Script::ShaderSystem::StencilOp_Op _internal_z_fail() const;
  void _internal_set_z_fail(::Tiny3D::Script::ShaderSystem::StencilOp_Op value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.StencilOp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int comp_;
  int pass_;
  int fail_;
  int z_fail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Program :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.Program) */ {
 public:
  Program();
  virtual ~Program();

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Program& default_instance();

  enum ProgramOneofCase {
    kSource = 1,
    kCompiled = 2,
    PROGRAMONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }
  inline void Swap(Program* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Program* New() const final {
    return CreateMaybeMessage<Program>(nullptr);
  }

  Program* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Program& from);
  void MergeFrom(const Program& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.Program";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kCompiledFieldNumber = 2,
  };
  // .Tiny3D.Script.ShaderSystem.SourceProgram source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::Tiny3D::Script::ShaderSystem::SourceProgram& source() const;
  ::Tiny3D::Script::ShaderSystem::SourceProgram* release_source();
  ::Tiny3D::Script::ShaderSystem::SourceProgram* mutable_source();
  void set_allocated_source(::Tiny3D::Script::ShaderSystem::SourceProgram* source);
  private:
  const ::Tiny3D::Script::ShaderSystem::SourceProgram& _internal_source() const;
  ::Tiny3D::Script::ShaderSystem::SourceProgram* _internal_mutable_source();
  public:

  // .Tiny3D.Script.ShaderSystem.CompiledProgram compiled = 2;
  bool has_compiled() const;
  private:
  bool _internal_has_compiled() const;
  public:
  void clear_compiled();
  const ::Tiny3D::Script::ShaderSystem::CompiledProgram& compiled() const;
  ::Tiny3D::Script::ShaderSystem::CompiledProgram* release_compiled();
  ::Tiny3D::Script::ShaderSystem::CompiledProgram* mutable_compiled();
  void set_allocated_compiled(::Tiny3D::Script::ShaderSystem::CompiledProgram* compiled);
  private:
  const ::Tiny3D::Script::ShaderSystem::CompiledProgram& _internal_compiled() const;
  ::Tiny3D::Script::ShaderSystem::CompiledProgram* _internal_mutable_compiled();
  public:

  void clear_ProgramOneof();
  ProgramOneofCase ProgramOneof_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.Program)
 private:
  class _Internal;
  void set_has_source();
  void set_has_compiled();

  inline bool has_ProgramOneof() const;
  inline void clear_has_ProgramOneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ProgramOneofUnion {
    ProgramOneofUnion() {}
    ::Tiny3D::Script::ShaderSystem::SourceProgram* source_;
    ::Tiny3D::Script::ShaderSystem::CompiledProgram* compiled_;
  } ProgramOneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class SourceProgram :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.SourceProgram) */ {
 public:
  SourceProgram();
  virtual ~SourceProgram();

  SourceProgram(const SourceProgram& from);
  SourceProgram(SourceProgram&& from) noexcept
    : SourceProgram() {
    *this = ::std::move(from);
  }

  inline SourceProgram& operator=(const SourceProgram& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceProgram& operator=(SourceProgram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceProgram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceProgram* internal_default_instance() {
    return reinterpret_cast<const SourceProgram*>(
               &_SourceProgram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SourceProgram& a, SourceProgram& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceProgram* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceProgram* New() const final {
    return CreateMaybeMessage<SourceProgram>(nullptr);
  }

  SourceProgram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceProgram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceProgram& from);
  void MergeFrom(const SourceProgram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceProgram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.SourceProgram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .Tiny3D.Script.ShaderSystem.ProgramType type = 1;
  void clear_type();
  ::Tiny3D::Script::ShaderSystem::ProgramType type() const;
  void set_type(::Tiny3D::Script::ShaderSystem::ProgramType value);
  private:
  ::Tiny3D::Script::ShaderSystem::ProgramType _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::ShaderSystem::ProgramType value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.SourceProgram)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// -------------------------------------------------------------------

class CompiledProgram :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ShaderSystem.CompiledProgram) */ {
 public:
  CompiledProgram();
  virtual ~CompiledProgram();

  CompiledProgram(const CompiledProgram& from);
  CompiledProgram(CompiledProgram&& from) noexcept
    : CompiledProgram() {
    *this = ::std::move(from);
  }

  inline CompiledProgram& operator=(const CompiledProgram& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompiledProgram& operator=(CompiledProgram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompiledProgram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompiledProgram* internal_default_instance() {
    return reinterpret_cast<const CompiledProgram*>(
               &_CompiledProgram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CompiledProgram& a, CompiledProgram& b) {
    a.Swap(&b);
  }
  inline void Swap(CompiledProgram* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompiledProgram* New() const final {
    return CreateMaybeMessage<CompiledProgram>(nullptr);
  }

  CompiledProgram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompiledProgram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompiledProgram& from);
  void MergeFrom(const CompiledProgram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompiledProgram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ShaderSystem.CompiledProgram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ShaderScriptObject_2eproto);
    return ::descriptor_table_ShaderScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeywordsFieldNumber = 4,
    kSourceFieldNumber = 1,
    kStageFieldNumber = 2,
    kEntryFieldNumber = 3,
  };
  // repeated string keywords = 4;
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;
  public:
  void clear_keywords();
  const std::string& keywords(int index) const;
  std::string* mutable_keywords(int index);
  void set_keywords(int index, const std::string& value);
  void set_keywords(int index, std::string&& value);
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  std::string* add_keywords();
  void add_keywords(const std::string& value);
  void add_keywords(std::string&& value);
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keywords();
  private:
  const std::string& _internal_keywords(int index) const;
  std::string* _internal_add_keywords();
  public:

  // string source = 1;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string stage = 2;
  void clear_stage();
  const std::string& stage() const;
  void set_stage(const std::string& value);
  void set_stage(std::string&& value);
  void set_stage(const char* value);
  void set_stage(const char* value, size_t size);
  std::string* mutable_stage();
  std::string* release_stage();
  void set_allocated_stage(std::string* stage);
  private:
  const std::string& _internal_stage() const;
  void _internal_set_stage(const std::string& value);
  std::string* _internal_mutable_stage();
  public:

  // string entry = 3;
  void clear_entry();
  const std::string& entry() const;
  void set_entry(const std::string& value);
  void set_entry(std::string&& value);
  void set_entry(const char* value);
  void set_entry(const char* value, size_t size);
  std::string* mutable_entry();
  std::string* release_entry();
  void set_allocated_entry(std::string* entry);
  private:
  const std::string& _internal_entry() const;
  void _internal_set_entry(const std::string& value);
  std::string* _internal_mutable_entry();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ShaderSystem.CompiledProgram)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keywords_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ShaderScriptObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shader

// string name = 1;
inline void Shader::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Shader::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Shader.name)
  return _internal_name();
}
inline void Shader::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Shader.name)
}
inline std::string* Shader::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Shader.name)
  return _internal_mutable_name();
}
inline const std::string& Shader::_internal_name() const {
  return name_.GetNoArena();
}
inline void Shader::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Shader::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ShaderSystem.Shader.name)
}
inline void Shader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.Shader.name)
}
inline void Shader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.Shader.name)
}
inline std::string* Shader::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Shader::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Shader.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Shader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Shader.name)
}

// repeated .Tiny3D.Script.ShaderSystem.Property properties = 2;
inline int Shader::_internal_properties_size() const {
  return properties_.size();
}
inline int Shader::properties_size() const {
  return _internal_properties_size();
}
inline void Shader::clear_properties() {
  properties_.Clear();
}
inline ::Tiny3D::Script::ShaderSystem::Property* Shader::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Shader.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Property >*
Shader::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ShaderSystem.Shader.properties)
  return &properties_;
}
inline const ::Tiny3D::Script::ShaderSystem::Property& Shader::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::Tiny3D::Script::ShaderSystem::Property& Shader::properties(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Shader.properties)
  return _internal_properties(index);
}
inline ::Tiny3D::Script::ShaderSystem::Property* Shader::_internal_add_properties() {
  return properties_.Add();
}
inline ::Tiny3D::Script::ShaderSystem::Property* Shader::add_properties() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ShaderSystem.Shader.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Property >&
Shader::properties() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ShaderSystem.Shader.properties)
  return properties_;
}

// repeated .Tiny3D.Script.ShaderSystem.SubShader subshaders = 3;
inline int Shader::_internal_subshaders_size() const {
  return subshaders_.size();
}
inline int Shader::subshaders_size() const {
  return _internal_subshaders_size();
}
inline void Shader::clear_subshaders() {
  subshaders_.Clear();
}
inline ::Tiny3D::Script::ShaderSystem::SubShader* Shader::mutable_subshaders(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Shader.subshaders)
  return subshaders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::SubShader >*
Shader::mutable_subshaders() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ShaderSystem.Shader.subshaders)
  return &subshaders_;
}
inline const ::Tiny3D::Script::ShaderSystem::SubShader& Shader::_internal_subshaders(int index) const {
  return subshaders_.Get(index);
}
inline const ::Tiny3D::Script::ShaderSystem::SubShader& Shader::subshaders(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Shader.subshaders)
  return _internal_subshaders(index);
}
inline ::Tiny3D::Script::ShaderSystem::SubShader* Shader::_internal_add_subshaders() {
  return subshaders_.Add();
}
inline ::Tiny3D::Script::ShaderSystem::SubShader* Shader::add_subshaders() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ShaderSystem.Shader.subshaders)
  return _internal_add_subshaders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::SubShader >&
Shader::subshaders() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ShaderSystem.Shader.subshaders)
  return subshaders_;
}

// .Tiny3D.Script.ShaderSystem.Fallback fallback = 4;
inline bool Shader::_internal_has_fallback() const {
  return this != internal_default_instance() && fallback_ != nullptr;
}
inline bool Shader::has_fallback() const {
  return _internal_has_fallback();
}
inline void Shader::clear_fallback() {
  if (GetArenaNoVirtual() == nullptr && fallback_ != nullptr) {
    delete fallback_;
  }
  fallback_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::Fallback& Shader::_internal_fallback() const {
  const ::Tiny3D::Script::ShaderSystem::Fallback* p = fallback_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::Fallback*>(
      &::Tiny3D::Script::ShaderSystem::_Fallback_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::Fallback& Shader::fallback() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Shader.fallback)
  return _internal_fallback();
}
inline ::Tiny3D::Script::ShaderSystem::Fallback* Shader::release_fallback() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Shader.fallback)
  
  ::Tiny3D::Script::ShaderSystem::Fallback* temp = fallback_;
  fallback_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::Fallback* Shader::_internal_mutable_fallback() {
  
  if (fallback_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Fallback>(GetArenaNoVirtual());
    fallback_ = p;
  }
  return fallback_;
}
inline ::Tiny3D::Script::ShaderSystem::Fallback* Shader::mutable_fallback() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Shader.fallback)
  return _internal_mutable_fallback();
}
inline void Shader::set_allocated_fallback(::Tiny3D::Script::ShaderSystem::Fallback* fallback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fallback_;
  }
  if (fallback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fallback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fallback, submessage_arena);
    }
    
  } else {
    
  }
  fallback_ = fallback;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Shader.fallback)
}

// -------------------------------------------------------------------

// Range

// float value = 1;
inline void Range::clear_value() {
  value_ = 0;
}
inline float Range::_internal_value() const {
  return value_;
}
inline float Range::value() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Range.value)
  return _internal_value();
}
inline void Range::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Range::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Range.value)
}

// float lower = 2;
inline void Range::clear_lower() {
  lower_ = 0;
}
inline float Range::_internal_lower() const {
  return lower_;
}
inline float Range::lower() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Range.lower)
  return _internal_lower();
}
inline void Range::_internal_set_lower(float value) {
  
  lower_ = value;
}
inline void Range::set_lower(float value) {
  _internal_set_lower(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Range.lower)
}

// float upper = 3;
inline void Range::clear_upper() {
  upper_ = 0;
}
inline float Range::_internal_upper() const {
  return upper_;
}
inline float Range::upper() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Range.upper)
  return _internal_upper();
}
inline void Range::_internal_set_upper(float value) {
  
  upper_ = value;
}
inline void Range::set_upper(float value) {
  _internal_set_upper(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Range.upper)
}

// -------------------------------------------------------------------

// PropertyValue

// .Tiny3D.Script.Int32 ival = 1;
inline bool PropertyValue::_internal_has_ival() const {
  return PropertyValueOneof_case() == kIval;
}
inline bool PropertyValue::has_ival() const {
  return _internal_has_ival();
}
inline void PropertyValue::set_has_ival() {
  _oneof_case_[0] = kIval;
}
inline ::Tiny3D::Script::Int32* PropertyValue::release_ival() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.ival)
  if (_internal_has_ival()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::Int32* temp = PropertyValueOneof_.ival_;
    PropertyValueOneof_.ival_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Int32& PropertyValue::_internal_ival() const {
  return _internal_has_ival()
      ? *PropertyValueOneof_.ival_
      : *reinterpret_cast< ::Tiny3D::Script::Int32*>(&::Tiny3D::Script::_Int32_default_instance_);
}
inline const ::Tiny3D::Script::Int32& PropertyValue::ival() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.ival)
  return _internal_ival();
}
inline ::Tiny3D::Script::Int32* PropertyValue::_internal_mutable_ival() {
  if (!_internal_has_ival()) {
    clear_PropertyValueOneof();
    set_has_ival();
    PropertyValueOneof_.ival_ = CreateMaybeMessage< ::Tiny3D::Script::Int32 >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.ival_;
}
inline ::Tiny3D::Script::Int32* PropertyValue::mutable_ival() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.ival)
  return _internal_mutable_ival();
}

// .Tiny3D.Script.Float fval = 2;
inline bool PropertyValue::_internal_has_fval() const {
  return PropertyValueOneof_case() == kFval;
}
inline bool PropertyValue::has_fval() const {
  return _internal_has_fval();
}
inline void PropertyValue::set_has_fval() {
  _oneof_case_[0] = kFval;
}
inline ::Tiny3D::Script::Float* PropertyValue::release_fval() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.fval)
  if (_internal_has_fval()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::Float* temp = PropertyValueOneof_.fval_;
    PropertyValueOneof_.fval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Float& PropertyValue::_internal_fval() const {
  return _internal_has_fval()
      ? *PropertyValueOneof_.fval_
      : *reinterpret_cast< ::Tiny3D::Script::Float*>(&::Tiny3D::Script::_Float_default_instance_);
}
inline const ::Tiny3D::Script::Float& PropertyValue::fval() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.fval)
  return _internal_fval();
}
inline ::Tiny3D::Script::Float* PropertyValue::_internal_mutable_fval() {
  if (!_internal_has_fval()) {
    clear_PropertyValueOneof();
    set_has_fval();
    PropertyValueOneof_.fval_ = CreateMaybeMessage< ::Tiny3D::Script::Float >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.fval_;
}
inline ::Tiny3D::Script::Float* PropertyValue::mutable_fval() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.fval)
  return _internal_mutable_fval();
}

// .Tiny3D.Script.ShaderSystem.Range rval = 3;
inline bool PropertyValue::_internal_has_rval() const {
  return PropertyValueOneof_case() == kRval;
}
inline bool PropertyValue::has_rval() const {
  return _internal_has_rval();
}
inline void PropertyValue::set_has_rval() {
  _oneof_case_[0] = kRval;
}
inline void PropertyValue::clear_rval() {
  if (_internal_has_rval()) {
    delete PropertyValueOneof_.rval_;
    clear_has_PropertyValueOneof();
  }
}
inline ::Tiny3D::Script::ShaderSystem::Range* PropertyValue::release_rval() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.rval)
  if (_internal_has_rval()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::ShaderSystem::Range* temp = PropertyValueOneof_.rval_;
    PropertyValueOneof_.rval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::Range& PropertyValue::_internal_rval() const {
  return _internal_has_rval()
      ? *PropertyValueOneof_.rval_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::Range*>(&::Tiny3D::Script::ShaderSystem::_Range_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::Range& PropertyValue::rval() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.rval)
  return _internal_rval();
}
inline ::Tiny3D::Script::ShaderSystem::Range* PropertyValue::_internal_mutable_rval() {
  if (!_internal_has_rval()) {
    clear_PropertyValueOneof();
    set_has_rval();
    PropertyValueOneof_.rval_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Range >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.rval_;
}
inline ::Tiny3D::Script::ShaderSystem::Range* PropertyValue::mutable_rval() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.rval)
  return _internal_mutable_rval();
}

// .Tiny3D.Script.String tex2d = 4;
inline bool PropertyValue::_internal_has_tex2d() const {
  return PropertyValueOneof_case() == kTex2D;
}
inline bool PropertyValue::has_tex2d() const {
  return _internal_has_tex2d();
}
inline void PropertyValue::set_has_tex2d() {
  _oneof_case_[0] = kTex2D;
}
inline ::Tiny3D::Script::String* PropertyValue::release_tex2d() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.tex2d)
  if (_internal_has_tex2d()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::String* temp = PropertyValueOneof_.tex2d_;
    PropertyValueOneof_.tex2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& PropertyValue::_internal_tex2d() const {
  return _internal_has_tex2d()
      ? *PropertyValueOneof_.tex2d_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& PropertyValue::tex2d() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.tex2d)
  return _internal_tex2d();
}
inline ::Tiny3D::Script::String* PropertyValue::_internal_mutable_tex2d() {
  if (!_internal_has_tex2d()) {
    clear_PropertyValueOneof();
    set_has_tex2d();
    PropertyValueOneof_.tex2d_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.tex2d_;
}
inline ::Tiny3D::Script::String* PropertyValue::mutable_tex2d() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.tex2d)
  return _internal_mutable_tex2d();
}

// .Tiny3D.Script.String tex2d_array = 5;
inline bool PropertyValue::_internal_has_tex2d_array() const {
  return PropertyValueOneof_case() == kTex2DArray;
}
inline bool PropertyValue::has_tex2d_array() const {
  return _internal_has_tex2d_array();
}
inline void PropertyValue::set_has_tex2d_array() {
  _oneof_case_[0] = kTex2DArray;
}
inline ::Tiny3D::Script::String* PropertyValue::release_tex2d_array() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.tex2d_array)
  if (_internal_has_tex2d_array()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::String* temp = PropertyValueOneof_.tex2d_array_;
    PropertyValueOneof_.tex2d_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& PropertyValue::_internal_tex2d_array() const {
  return _internal_has_tex2d_array()
      ? *PropertyValueOneof_.tex2d_array_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& PropertyValue::tex2d_array() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.tex2d_array)
  return _internal_tex2d_array();
}
inline ::Tiny3D::Script::String* PropertyValue::_internal_mutable_tex2d_array() {
  if (!_internal_has_tex2d_array()) {
    clear_PropertyValueOneof();
    set_has_tex2d_array();
    PropertyValueOneof_.tex2d_array_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.tex2d_array_;
}
inline ::Tiny3D::Script::String* PropertyValue::mutable_tex2d_array() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.tex2d_array)
  return _internal_mutable_tex2d_array();
}

// .Tiny3D.Script.String tex3d = 6;
inline bool PropertyValue::_internal_has_tex3d() const {
  return PropertyValueOneof_case() == kTex3D;
}
inline bool PropertyValue::has_tex3d() const {
  return _internal_has_tex3d();
}
inline void PropertyValue::set_has_tex3d() {
  _oneof_case_[0] = kTex3D;
}
inline ::Tiny3D::Script::String* PropertyValue::release_tex3d() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.tex3d)
  if (_internal_has_tex3d()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::String* temp = PropertyValueOneof_.tex3d_;
    PropertyValueOneof_.tex3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& PropertyValue::_internal_tex3d() const {
  return _internal_has_tex3d()
      ? *PropertyValueOneof_.tex3d_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& PropertyValue::tex3d() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.tex3d)
  return _internal_tex3d();
}
inline ::Tiny3D::Script::String* PropertyValue::_internal_mutable_tex3d() {
  if (!_internal_has_tex3d()) {
    clear_PropertyValueOneof();
    set_has_tex3d();
    PropertyValueOneof_.tex3d_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.tex3d_;
}
inline ::Tiny3D::Script::String* PropertyValue::mutable_tex3d() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.tex3d)
  return _internal_mutable_tex3d();
}

// .Tiny3D.Script.String cubemap = 7;
inline bool PropertyValue::_internal_has_cubemap() const {
  return PropertyValueOneof_case() == kCubemap;
}
inline bool PropertyValue::has_cubemap() const {
  return _internal_has_cubemap();
}
inline void PropertyValue::set_has_cubemap() {
  _oneof_case_[0] = kCubemap;
}
inline ::Tiny3D::Script::String* PropertyValue::release_cubemap() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.cubemap)
  if (_internal_has_cubemap()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::String* temp = PropertyValueOneof_.cubemap_;
    PropertyValueOneof_.cubemap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& PropertyValue::_internal_cubemap() const {
  return _internal_has_cubemap()
      ? *PropertyValueOneof_.cubemap_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& PropertyValue::cubemap() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.cubemap)
  return _internal_cubemap();
}
inline ::Tiny3D::Script::String* PropertyValue::_internal_mutable_cubemap() {
  if (!_internal_has_cubemap()) {
    clear_PropertyValueOneof();
    set_has_cubemap();
    PropertyValueOneof_.cubemap_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.cubemap_;
}
inline ::Tiny3D::Script::String* PropertyValue::mutable_cubemap() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.cubemap)
  return _internal_mutable_cubemap();
}

// .Tiny3D.Script.String cubemap_array = 8;
inline bool PropertyValue::_internal_has_cubemap_array() const {
  return PropertyValueOneof_case() == kCubemapArray;
}
inline bool PropertyValue::has_cubemap_array() const {
  return _internal_has_cubemap_array();
}
inline void PropertyValue::set_has_cubemap_array() {
  _oneof_case_[0] = kCubemapArray;
}
inline ::Tiny3D::Script::String* PropertyValue::release_cubemap_array() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.cubemap_array)
  if (_internal_has_cubemap_array()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::String* temp = PropertyValueOneof_.cubemap_array_;
    PropertyValueOneof_.cubemap_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& PropertyValue::_internal_cubemap_array() const {
  return _internal_has_cubemap_array()
      ? *PropertyValueOneof_.cubemap_array_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& PropertyValue::cubemap_array() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.cubemap_array)
  return _internal_cubemap_array();
}
inline ::Tiny3D::Script::String* PropertyValue::_internal_mutable_cubemap_array() {
  if (!_internal_has_cubemap_array()) {
    clear_PropertyValueOneof();
    set_has_cubemap_array();
    PropertyValueOneof_.cubemap_array_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.cubemap_array_;
}
inline ::Tiny3D::Script::String* PropertyValue::mutable_cubemap_array() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.cubemap_array)
  return _internal_mutable_cubemap_array();
}

// .Tiny3D.Script.Color color = 9;
inline bool PropertyValue::_internal_has_color() const {
  return PropertyValueOneof_case() == kColor;
}
inline bool PropertyValue::has_color() const {
  return _internal_has_color();
}
inline void PropertyValue::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline ::Tiny3D::Script::Color* PropertyValue::release_color() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.color)
  if (_internal_has_color()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::Color* temp = PropertyValueOneof_.color_;
    PropertyValueOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Color& PropertyValue::_internal_color() const {
  return _internal_has_color()
      ? *PropertyValueOneof_.color_
      : *reinterpret_cast< ::Tiny3D::Script::Color*>(&::Tiny3D::Script::_Color_default_instance_);
}
inline const ::Tiny3D::Script::Color& PropertyValue::color() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.color)
  return _internal_color();
}
inline ::Tiny3D::Script::Color* PropertyValue::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_PropertyValueOneof();
    set_has_color();
    PropertyValueOneof_.color_ = CreateMaybeMessage< ::Tiny3D::Script::Color >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.color_;
}
inline ::Tiny3D::Script::Color* PropertyValue::mutable_color() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.color)
  return _internal_mutable_color();
}

// .Tiny3D.Script.Vector4 vector = 10;
inline bool PropertyValue::_internal_has_vector() const {
  return PropertyValueOneof_case() == kVector;
}
inline bool PropertyValue::has_vector() const {
  return _internal_has_vector();
}
inline void PropertyValue::set_has_vector() {
  _oneof_case_[0] = kVector;
}
inline ::Tiny3D::Script::Vector4* PropertyValue::release_vector() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.PropertyValue.vector)
  if (_internal_has_vector()) {
    clear_has_PropertyValueOneof();
      ::Tiny3D::Script::Vector4* temp = PropertyValueOneof_.vector_;
    PropertyValueOneof_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector4& PropertyValue::_internal_vector() const {
  return _internal_has_vector()
      ? *PropertyValueOneof_.vector_
      : *reinterpret_cast< ::Tiny3D::Script::Vector4*>(&::Tiny3D::Script::_Vector4_default_instance_);
}
inline const ::Tiny3D::Script::Vector4& PropertyValue::vector() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.PropertyValue.vector)
  return _internal_vector();
}
inline ::Tiny3D::Script::Vector4* PropertyValue::_internal_mutable_vector() {
  if (!_internal_has_vector()) {
    clear_PropertyValueOneof();
    set_has_vector();
    PropertyValueOneof_.vector_ = CreateMaybeMessage< ::Tiny3D::Script::Vector4 >(
        GetArenaNoVirtual());
  }
  return PropertyValueOneof_.vector_;
}
inline ::Tiny3D::Script::Vector4* PropertyValue::mutable_vector() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.PropertyValue.vector)
  return _internal_mutable_vector();
}

inline bool PropertyValue::has_PropertyValueOneof() const {
  return PropertyValueOneof_case() != PROPERTYVALUEONEOF_NOT_SET;
}
inline void PropertyValue::clear_has_PropertyValueOneof() {
  _oneof_case_[0] = PROPERTYVALUEONEOF_NOT_SET;
}
inline PropertyValue::PropertyValueOneofCase PropertyValue::PropertyValueOneof_case() const {
  return PropertyValue::PropertyValueOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Property

// string name = 1;
inline void Property::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Property.name)
  return _internal_name();
}
inline void Property::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Property.name)
}
inline std::string* Property::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Property.name)
  return _internal_mutable_name();
}
inline const std::string& Property::_internal_name() const {
  return name_.GetNoArena();
}
inline void Property::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Property::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ShaderSystem.Property.name)
}
inline void Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.Property.name)
}
inline void Property::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.Property.name)
}
inline std::string* Property::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Property.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Property.name)
}

// string display_name = 2;
inline void Property::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Property::display_name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Property.display_name)
  return _internal_display_name();
}
inline void Property::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Property.display_name)
}
inline std::string* Property::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Property.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Property::_internal_display_name() const {
  return display_name_.GetNoArena();
}
inline void Property::_internal_set_display_name(const std::string& value) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Property::set_display_name(std::string&& value) {
  
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ShaderSystem.Property.display_name)
}
inline void Property::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.Property.display_name)
}
inline void Property::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.Property.display_name)
}
inline std::string* Property::_internal_mutable_display_name() {
  
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Property::release_display_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Property.display_name)
  
  return display_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Property.display_name)
}

// .Tiny3D.Script.ShaderSystem.PropertyValue values = 3;
inline bool Property::_internal_has_values() const {
  return this != internal_default_instance() && values_ != nullptr;
}
inline bool Property::has_values() const {
  return _internal_has_values();
}
inline void Property::clear_values() {
  if (GetArenaNoVirtual() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::PropertyValue& Property::_internal_values() const {
  const ::Tiny3D::Script::ShaderSystem::PropertyValue* p = values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::PropertyValue*>(
      &::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::PropertyValue& Property::values() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Property.values)
  return _internal_values();
}
inline ::Tiny3D::Script::ShaderSystem::PropertyValue* Property::release_values() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Property.values)
  
  ::Tiny3D::Script::ShaderSystem::PropertyValue* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::PropertyValue* Property::_internal_mutable_values() {
  
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::PropertyValue>(GetArenaNoVirtual());
    values_ = p;
  }
  return values_;
}
inline ::Tiny3D::Script::ShaderSystem::PropertyValue* Property::mutable_values() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Property.values)
  return _internal_mutable_values();
}
inline void Property::set_allocated_values(::Tiny3D::Script::ShaderSystem::PropertyValue* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    
  } else {
    
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Property.values)
}

// -------------------------------------------------------------------

// Fallback

// .Tiny3D.Script.Bool enable = 1;
inline bool Fallback::_internal_has_enable() const {
  return FallbackOneof_case() == kEnable;
}
inline bool Fallback::has_enable() const {
  return _internal_has_enable();
}
inline void Fallback::set_has_enable() {
  _oneof_case_[0] = kEnable;
}
inline ::Tiny3D::Script::Bool* Fallback::release_enable() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Fallback.enable)
  if (_internal_has_enable()) {
    clear_has_FallbackOneof();
      ::Tiny3D::Script::Bool* temp = FallbackOneof_.enable_;
    FallbackOneof_.enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Bool& Fallback::_internal_enable() const {
  return _internal_has_enable()
      ? *FallbackOneof_.enable_
      : *reinterpret_cast< ::Tiny3D::Script::Bool*>(&::Tiny3D::Script::_Bool_default_instance_);
}
inline const ::Tiny3D::Script::Bool& Fallback::enable() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Fallback.enable)
  return _internal_enable();
}
inline ::Tiny3D::Script::Bool* Fallback::_internal_mutable_enable() {
  if (!_internal_has_enable()) {
    clear_FallbackOneof();
    set_has_enable();
    FallbackOneof_.enable_ = CreateMaybeMessage< ::Tiny3D::Script::Bool >(
        GetArenaNoVirtual());
  }
  return FallbackOneof_.enable_;
}
inline ::Tiny3D::Script::Bool* Fallback::mutable_enable() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Fallback.enable)
  return _internal_mutable_enable();
}

// .Tiny3D.Script.String name = 2;
inline bool Fallback::_internal_has_name() const {
  return FallbackOneof_case() == kName;
}
inline bool Fallback::has_name() const {
  return _internal_has_name();
}
inline void Fallback::set_has_name() {
  _oneof_case_[0] = kName;
}
inline ::Tiny3D::Script::String* Fallback::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Fallback.name)
  if (_internal_has_name()) {
    clear_has_FallbackOneof();
      ::Tiny3D::Script::String* temp = FallbackOneof_.name_;
    FallbackOneof_.name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& Fallback::_internal_name() const {
  return _internal_has_name()
      ? *FallbackOneof_.name_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& Fallback::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Fallback.name)
  return _internal_name();
}
inline ::Tiny3D::Script::String* Fallback::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_FallbackOneof();
    set_has_name();
    FallbackOneof_.name_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return FallbackOneof_.name_;
}
inline ::Tiny3D::Script::String* Fallback::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Fallback.name)
  return _internal_mutable_name();
}

inline bool Fallback::has_FallbackOneof() const {
  return FallbackOneof_case() != FALLBACKONEOF_NOT_SET;
}
inline void Fallback::clear_has_FallbackOneof() {
  _oneof_case_[0] = FALLBACKONEOF_NOT_SET;
}
inline Fallback::FallbackOneofCase Fallback::FallbackOneof_case() const {
  return Fallback::FallbackOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SubShader

// sint32 lod = 1;
inline void SubShader::clear_lod() {
  lod_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubShader::_internal_lod() const {
  return lod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubShader::lod() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.SubShader.lod)
  return _internal_lod();
}
inline void SubShader::_internal_set_lod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lod_ = value;
}
inline void SubShader::set_lod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lod(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.SubShader.lod)
}

// map<string, string> tags = 2;
inline int SubShader::_internal_tags_size() const {
  return tags_.size();
}
inline int SubShader::tags_size() const {
  return _internal_tags_size();
}
inline void SubShader::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SubShader::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SubShader::tags() const {
  // @@protoc_insertion_point(field_map:Tiny3D.Script.ShaderSystem.SubShader.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SubShader::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SubShader::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:Tiny3D.Script.ShaderSystem.SubShader.tags)
  return _internal_mutable_tags();
}

// .Tiny3D.Script.ShaderSystem.State state = 3;
inline bool SubShader::_internal_has_state() const {
  return Command_case() == kState;
}
inline bool SubShader::has_state() const {
  return _internal_has_state();
}
inline void SubShader::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void SubShader::clear_state() {
  if (_internal_has_state()) {
    delete Command_.state_;
    clear_has_Command();
  }
}
inline ::Tiny3D::Script::ShaderSystem::State* SubShader::release_state() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.SubShader.state)
  if (_internal_has_state()) {
    clear_has_Command();
      ::Tiny3D::Script::ShaderSystem::State* temp = Command_.state_;
    Command_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::State& SubShader::_internal_state() const {
  return _internal_has_state()
      ? *Command_.state_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::State*>(&::Tiny3D::Script::ShaderSystem::_State_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::State& SubShader::state() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.SubShader.state)
  return _internal_state();
}
inline ::Tiny3D::Script::ShaderSystem::State* SubShader::_internal_mutable_state() {
  if (!_internal_has_state()) {
    clear_Command();
    set_has_state();
    Command_.state_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::State >(
        GetArenaNoVirtual());
  }
  return Command_.state_;
}
inline ::Tiny3D::Script::ShaderSystem::State* SubShader::mutable_state() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.SubShader.state)
  return _internal_mutable_state();
}

// .Tiny3D.Script.String use_pass = 4;
inline bool SubShader::_internal_has_use_pass() const {
  return Command_case() == kUsePass;
}
inline bool SubShader::has_use_pass() const {
  return _internal_has_use_pass();
}
inline void SubShader::set_has_use_pass() {
  _oneof_case_[0] = kUsePass;
}
inline ::Tiny3D::Script::String* SubShader::release_use_pass() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.SubShader.use_pass)
  if (_internal_has_use_pass()) {
    clear_has_Command();
      ::Tiny3D::Script::String* temp = Command_.use_pass_;
    Command_.use_pass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& SubShader::_internal_use_pass() const {
  return _internal_has_use_pass()
      ? *Command_.use_pass_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& SubShader::use_pass() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.SubShader.use_pass)
  return _internal_use_pass();
}
inline ::Tiny3D::Script::String* SubShader::_internal_mutable_use_pass() {
  if (!_internal_has_use_pass()) {
    clear_Command();
    set_has_use_pass();
    Command_.use_pass_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return Command_.use_pass_;
}
inline ::Tiny3D::Script::String* SubShader::mutable_use_pass() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.SubShader.use_pass)
  return _internal_mutable_use_pass();
}

// .Tiny3D.Script.String grab_pass = 5;
inline bool SubShader::_internal_has_grab_pass() const {
  return Command_case() == kGrabPass;
}
inline bool SubShader::has_grab_pass() const {
  return _internal_has_grab_pass();
}
inline void SubShader::set_has_grab_pass() {
  _oneof_case_[0] = kGrabPass;
}
inline ::Tiny3D::Script::String* SubShader::release_grab_pass() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.SubShader.grab_pass)
  if (_internal_has_grab_pass()) {
    clear_has_Command();
      ::Tiny3D::Script::String* temp = Command_.grab_pass_;
    Command_.grab_pass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& SubShader::_internal_grab_pass() const {
  return _internal_has_grab_pass()
      ? *Command_.grab_pass_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& SubShader::grab_pass() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.SubShader.grab_pass)
  return _internal_grab_pass();
}
inline ::Tiny3D::Script::String* SubShader::_internal_mutable_grab_pass() {
  if (!_internal_has_grab_pass()) {
    clear_Command();
    set_has_grab_pass();
    Command_.grab_pass_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return Command_.grab_pass_;
}
inline ::Tiny3D::Script::String* SubShader::mutable_grab_pass() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.SubShader.grab_pass)
  return _internal_mutable_grab_pass();
}

// repeated .Tiny3D.Script.ShaderSystem.Pass passes = 6;
inline int SubShader::_internal_passes_size() const {
  return passes_.size();
}
inline int SubShader::passes_size() const {
  return _internal_passes_size();
}
inline void SubShader::clear_passes() {
  passes_.Clear();
}
inline ::Tiny3D::Script::ShaderSystem::Pass* SubShader::mutable_passes(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.SubShader.passes)
  return passes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Pass >*
SubShader::mutable_passes() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ShaderSystem.SubShader.passes)
  return &passes_;
}
inline const ::Tiny3D::Script::ShaderSystem::Pass& SubShader::_internal_passes(int index) const {
  return passes_.Get(index);
}
inline const ::Tiny3D::Script::ShaderSystem::Pass& SubShader::passes(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.SubShader.passes)
  return _internal_passes(index);
}
inline ::Tiny3D::Script::ShaderSystem::Pass* SubShader::_internal_add_passes() {
  return passes_.Add();
}
inline ::Tiny3D::Script::ShaderSystem::Pass* SubShader::add_passes() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ShaderSystem.SubShader.passes)
  return _internal_add_passes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ShaderSystem::Pass >&
SubShader::passes() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ShaderSystem.SubShader.passes)
  return passes_;
}

inline bool SubShader::has_Command() const {
  return Command_case() != COMMAND_NOT_SET;
}
inline void SubShader::clear_has_Command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline SubShader::CommandCase SubShader::Command_case() const {
  return SubShader::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Pass

// string name = 1;
inline void Pass::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Pass::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Pass.name)
  return _internal_name();
}
inline void Pass::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Pass.name)
}
inline std::string* Pass::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Pass.name)
  return _internal_mutable_name();
}
inline const std::string& Pass::_internal_name() const {
  return name_.GetNoArena();
}
inline void Pass::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Pass::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ShaderSystem.Pass.name)
}
inline void Pass::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.Pass.name)
}
inline void Pass::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.Pass.name)
}
inline std::string* Pass::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Pass::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Pass.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Pass::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Pass.name)
}

// map<string, string> tags = 2;
inline int Pass::_internal_tags_size() const {
  return tags_.size();
}
inline int Pass::tags_size() const {
  return _internal_tags_size();
}
inline void Pass::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pass::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pass::tags() const {
  // @@protoc_insertion_point(field_map:Tiny3D.Script.ShaderSystem.Pass.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pass::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pass::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:Tiny3D.Script.ShaderSystem.Pass.tags)
  return _internal_mutable_tags();
}

// .Tiny3D.Script.ShaderSystem.State state = 3;
inline bool Pass::_internal_has_state() const {
  return Command_case() == kState;
}
inline bool Pass::has_state() const {
  return _internal_has_state();
}
inline void Pass::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void Pass::clear_state() {
  if (_internal_has_state()) {
    delete Command_.state_;
    clear_has_Command();
  }
}
inline ::Tiny3D::Script::ShaderSystem::State* Pass::release_state() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Pass.state)
  if (_internal_has_state()) {
    clear_has_Command();
      ::Tiny3D::Script::ShaderSystem::State* temp = Command_.state_;
    Command_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::State& Pass::_internal_state() const {
  return _internal_has_state()
      ? *Command_.state_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::State*>(&::Tiny3D::Script::ShaderSystem::_State_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::State& Pass::state() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Pass.state)
  return _internal_state();
}
inline ::Tiny3D::Script::ShaderSystem::State* Pass::_internal_mutable_state() {
  if (!_internal_has_state()) {
    clear_Command();
    set_has_state();
    Command_.state_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::State >(
        GetArenaNoVirtual());
  }
  return Command_.state_;
}
inline ::Tiny3D::Script::ShaderSystem::State* Pass::mutable_state() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Pass.state)
  return _internal_mutable_state();
}

// .Tiny3D.Script.String use_pass = 4;
inline bool Pass::_internal_has_use_pass() const {
  return Command_case() == kUsePass;
}
inline bool Pass::has_use_pass() const {
  return _internal_has_use_pass();
}
inline void Pass::set_has_use_pass() {
  _oneof_case_[0] = kUsePass;
}
inline ::Tiny3D::Script::String* Pass::release_use_pass() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Pass.use_pass)
  if (_internal_has_use_pass()) {
    clear_has_Command();
      ::Tiny3D::Script::String* temp = Command_.use_pass_;
    Command_.use_pass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& Pass::_internal_use_pass() const {
  return _internal_has_use_pass()
      ? *Command_.use_pass_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& Pass::use_pass() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Pass.use_pass)
  return _internal_use_pass();
}
inline ::Tiny3D::Script::String* Pass::_internal_mutable_use_pass() {
  if (!_internal_has_use_pass()) {
    clear_Command();
    set_has_use_pass();
    Command_.use_pass_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return Command_.use_pass_;
}
inline ::Tiny3D::Script::String* Pass::mutable_use_pass() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Pass.use_pass)
  return _internal_mutable_use_pass();
}

// .Tiny3D.Script.String grab_pass = 5;
inline bool Pass::_internal_has_grab_pass() const {
  return Command_case() == kGrabPass;
}
inline bool Pass::has_grab_pass() const {
  return _internal_has_grab_pass();
}
inline void Pass::set_has_grab_pass() {
  _oneof_case_[0] = kGrabPass;
}
inline ::Tiny3D::Script::String* Pass::release_grab_pass() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Pass.grab_pass)
  if (_internal_has_grab_pass()) {
    clear_has_Command();
      ::Tiny3D::Script::String* temp = Command_.grab_pass_;
    Command_.grab_pass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::String& Pass::_internal_grab_pass() const {
  return _internal_has_grab_pass()
      ? *Command_.grab_pass_
      : *reinterpret_cast< ::Tiny3D::Script::String*>(&::Tiny3D::Script::_String_default_instance_);
}
inline const ::Tiny3D::Script::String& Pass::grab_pass() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Pass.grab_pass)
  return _internal_grab_pass();
}
inline ::Tiny3D::Script::String* Pass::_internal_mutable_grab_pass() {
  if (!_internal_has_grab_pass()) {
    clear_Command();
    set_has_grab_pass();
    Command_.grab_pass_ = CreateMaybeMessage< ::Tiny3D::Script::String >(
        GetArenaNoVirtual());
  }
  return Command_.grab_pass_;
}
inline ::Tiny3D::Script::String* Pass::mutable_grab_pass() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Pass.grab_pass)
  return _internal_mutable_grab_pass();
}

// .Tiny3D.Script.ShaderSystem.Program program = 6;
inline bool Pass::_internal_has_program() const {
  return this != internal_default_instance() && program_ != nullptr;
}
inline bool Pass::has_program() const {
  return _internal_has_program();
}
inline void Pass::clear_program() {
  if (GetArenaNoVirtual() == nullptr && program_ != nullptr) {
    delete program_;
  }
  program_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::Program& Pass::_internal_program() const {
  const ::Tiny3D::Script::ShaderSystem::Program* p = program_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::Program*>(
      &::Tiny3D::Script::ShaderSystem::_Program_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::Program& Pass::program() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Pass.program)
  return _internal_program();
}
inline ::Tiny3D::Script::ShaderSystem::Program* Pass::release_program() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Pass.program)
  
  ::Tiny3D::Script::ShaderSystem::Program* temp = program_;
  program_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::Program* Pass::_internal_mutable_program() {
  
  if (program_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Program>(GetArenaNoVirtual());
    program_ = p;
  }
  return program_;
}
inline ::Tiny3D::Script::ShaderSystem::Program* Pass::mutable_program() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Pass.program)
  return _internal_mutable_program();
}
inline void Pass::set_allocated_program(::Tiny3D::Script::ShaderSystem::Program* program) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete program_;
  }
  if (program) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      program = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, program, submessage_arena);
    }
    
  } else {
    
  }
  program_ = program;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Pass.program)
}

inline bool Pass::has_Command() const {
  return Command_case() != COMMAND_NOT_SET;
}
inline void Pass::clear_has_Command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline Pass::CommandCase Pass::Command_case() const {
  return Pass::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// State

// bool alpha2Mask = 1;
inline void State::clear_alpha2mask() {
  alpha2mask_ = false;
}
inline bool State::_internal_alpha2mask() const {
  return alpha2mask_;
}
inline bool State::alpha2mask() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.alpha2Mask)
  return _internal_alpha2mask();
}
inline void State::_internal_set_alpha2mask(bool value) {
  
  alpha2mask_ = value;
}
inline void State::set_alpha2mask(bool value) {
  _internal_set_alpha2mask(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.State.alpha2Mask)
}

// .Tiny3D.Script.ShaderSystem.Blend blend = 2;
inline bool State::_internal_has_blend() const {
  return this != internal_default_instance() && blend_ != nullptr;
}
inline bool State::has_blend() const {
  return _internal_has_blend();
}
inline void State::clear_blend() {
  if (GetArenaNoVirtual() == nullptr && blend_ != nullptr) {
    delete blend_;
  }
  blend_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::Blend& State::_internal_blend() const {
  const ::Tiny3D::Script::ShaderSystem::Blend* p = blend_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::Blend*>(
      &::Tiny3D::Script::ShaderSystem::_Blend_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::Blend& State::blend() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.blend)
  return _internal_blend();
}
inline ::Tiny3D::Script::ShaderSystem::Blend* State::release_blend() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.State.blend)
  
  ::Tiny3D::Script::ShaderSystem::Blend* temp = blend_;
  blend_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::Blend* State::_internal_mutable_blend() {
  
  if (blend_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Blend>(GetArenaNoVirtual());
    blend_ = p;
  }
  return blend_;
}
inline ::Tiny3D::Script::ShaderSystem::Blend* State::mutable_blend() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.State.blend)
  return _internal_mutable_blend();
}
inline void State::set_allocated_blend(::Tiny3D::Script::ShaderSystem::Blend* blend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blend_;
  }
  if (blend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend, submessage_arena);
    }
    
  } else {
    
  }
  blend_ = blend;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.State.blend)
}

// .Tiny3D.Script.ShaderSystem.BlendOp blend_op = 3;
inline void State::clear_blend_op() {
  blend_op_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendOp State::_internal_blend_op() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendOp >(blend_op_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendOp State::blend_op() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.blend_op)
  return _internal_blend_op();
}
inline void State::_internal_set_blend_op(::Tiny3D::Script::ShaderSystem::BlendOp value) {
  
  blend_op_ = value;
}
inline void State::set_blend_op(::Tiny3D::Script::ShaderSystem::BlendOp value) {
  _internal_set_blend_op(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.State.blend_op)
}

// .Tiny3D.Script.ShaderSystem.ColorMask color_mask = 4;
inline bool State::_internal_has_color_mask() const {
  return this != internal_default_instance() && color_mask_ != nullptr;
}
inline bool State::has_color_mask() const {
  return _internal_has_color_mask();
}
inline void State::clear_color_mask() {
  if (GetArenaNoVirtual() == nullptr && color_mask_ != nullptr) {
    delete color_mask_;
  }
  color_mask_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::ColorMask& State::_internal_color_mask() const {
  const ::Tiny3D::Script::ShaderSystem::ColorMask* p = color_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::ColorMask*>(
      &::Tiny3D::Script::ShaderSystem::_ColorMask_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::ColorMask& State::color_mask() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.color_mask)
  return _internal_color_mask();
}
inline ::Tiny3D::Script::ShaderSystem::ColorMask* State::release_color_mask() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.State.color_mask)
  
  ::Tiny3D::Script::ShaderSystem::ColorMask* temp = color_mask_;
  color_mask_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::ColorMask* State::_internal_mutable_color_mask() {
  
  if (color_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::ColorMask>(GetArenaNoVirtual());
    color_mask_ = p;
  }
  return color_mask_;
}
inline ::Tiny3D::Script::ShaderSystem::ColorMask* State::mutable_color_mask() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.State.color_mask)
  return _internal_mutable_color_mask();
}
inline void State::set_allocated_color_mask(::Tiny3D::Script::ShaderSystem::ColorMask* color_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_mask_;
  }
  if (color_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_mask, submessage_arena);
    }
    
  } else {
    
  }
  color_mask_ = color_mask;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.State.color_mask)
}

// bool conservative = 5;
inline void State::clear_conservative() {
  conservative_ = false;
}
inline bool State::_internal_conservative() const {
  return conservative_;
}
inline bool State::conservative() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.conservative)
  return _internal_conservative();
}
inline void State::_internal_set_conservative(bool value) {
  
  conservative_ = value;
}
inline void State::set_conservative(bool value) {
  _internal_set_conservative(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.State.conservative)
}

// .Tiny3D.Script.ShaderSystem.Cull cull = 6;
inline void State::clear_cull() {
  cull_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::Cull State::_internal_cull() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::Cull >(cull_);
}
inline ::Tiny3D::Script::ShaderSystem::Cull State::cull() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.cull)
  return _internal_cull();
}
inline void State::_internal_set_cull(::Tiny3D::Script::ShaderSystem::Cull value) {
  
  cull_ = value;
}
inline void State::set_cull(::Tiny3D::Script::ShaderSystem::Cull value) {
  _internal_set_cull(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.State.cull)
}

// .Tiny3D.Script.ShaderSystem.DepthBias depth_bias = 7;
inline bool State::_internal_has_depth_bias() const {
  return this != internal_default_instance() && depth_bias_ != nullptr;
}
inline bool State::has_depth_bias() const {
  return _internal_has_depth_bias();
}
inline void State::clear_depth_bias() {
  if (GetArenaNoVirtual() == nullptr && depth_bias_ != nullptr) {
    delete depth_bias_;
  }
  depth_bias_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::DepthBias& State::_internal_depth_bias() const {
  const ::Tiny3D::Script::ShaderSystem::DepthBias* p = depth_bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::DepthBias*>(
      &::Tiny3D::Script::ShaderSystem::_DepthBias_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::DepthBias& State::depth_bias() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.depth_bias)
  return _internal_depth_bias();
}
inline ::Tiny3D::Script::ShaderSystem::DepthBias* State::release_depth_bias() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.State.depth_bias)
  
  ::Tiny3D::Script::ShaderSystem::DepthBias* temp = depth_bias_;
  depth_bias_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::DepthBias* State::_internal_mutable_depth_bias() {
  
  if (depth_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::DepthBias>(GetArenaNoVirtual());
    depth_bias_ = p;
  }
  return depth_bias_;
}
inline ::Tiny3D::Script::ShaderSystem::DepthBias* State::mutable_depth_bias() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.State.depth_bias)
  return _internal_mutable_depth_bias();
}
inline void State::set_allocated_depth_bias(::Tiny3D::Script::ShaderSystem::DepthBias* depth_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete depth_bias_;
  }
  if (depth_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      depth_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depth_bias, submessage_arena);
    }
    
  } else {
    
  }
  depth_bias_ = depth_bias;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.State.depth_bias)
}

// .Tiny3D.Script.ShaderSystem.Stencil stencil = 8;
inline bool State::_internal_has_stencil() const {
  return this != internal_default_instance() && stencil_ != nullptr;
}
inline bool State::has_stencil() const {
  return _internal_has_stencil();
}
inline void State::clear_stencil() {
  if (GetArenaNoVirtual() == nullptr && stencil_ != nullptr) {
    delete stencil_;
  }
  stencil_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::Stencil& State::_internal_stencil() const {
  const ::Tiny3D::Script::ShaderSystem::Stencil* p = stencil_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::Stencil*>(
      &::Tiny3D::Script::ShaderSystem::_Stencil_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::Stencil& State::stencil() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.stencil)
  return _internal_stencil();
}
inline ::Tiny3D::Script::ShaderSystem::Stencil* State::release_stencil() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.State.stencil)
  
  ::Tiny3D::Script::ShaderSystem::Stencil* temp = stencil_;
  stencil_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::Stencil* State::_internal_mutable_stencil() {
  
  if (stencil_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::Stencil>(GetArenaNoVirtual());
    stencil_ = p;
  }
  return stencil_;
}
inline ::Tiny3D::Script::ShaderSystem::Stencil* State::mutable_stencil() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.State.stencil)
  return _internal_mutable_stencil();
}
inline void State::set_allocated_stencil(::Tiny3D::Script::ShaderSystem::Stencil* stencil) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stencil_;
  }
  if (stencil) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stencil = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stencil, submessage_arena);
    }
    
  } else {
    
  }
  stencil_ = stencil;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.State.stencil)
}

// bool z_clip = 9;
inline void State::clear_z_clip() {
  z_clip_ = false;
}
inline bool State::_internal_z_clip() const {
  return z_clip_;
}
inline bool State::z_clip() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.z_clip)
  return _internal_z_clip();
}
inline void State::_internal_set_z_clip(bool value) {
  
  z_clip_ = value;
}
inline void State::set_z_clip(bool value) {
  _internal_set_z_clip(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.State.z_clip)
}

// .Tiny3D.Script.ShaderSystem.Comp z_test = 10;
inline void State::clear_z_test() {
  z_test_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::Comp State::_internal_z_test() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::Comp >(z_test_);
}
inline ::Tiny3D::Script::ShaderSystem::Comp State::z_test() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.z_test)
  return _internal_z_test();
}
inline void State::_internal_set_z_test(::Tiny3D::Script::ShaderSystem::Comp value) {
  
  z_test_ = value;
}
inline void State::set_z_test(::Tiny3D::Script::ShaderSystem::Comp value) {
  _internal_set_z_test(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.State.z_test)
}

// bool z_write = 11;
inline void State::clear_z_write() {
  z_write_ = false;
}
inline bool State::_internal_z_write() const {
  return z_write_;
}
inline bool State::z_write() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.State.z_write)
  return _internal_z_write();
}
inline void State::_internal_set_z_write(bool value) {
  
  z_write_ = value;
}
inline void State::set_z_write(bool value) {
  _internal_set_z_write(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.State.z_write)
}

// -------------------------------------------------------------------

// Blend

// .Tiny3D.Script.ShaderSystem.BlendState state = 1;
inline bool Blend::_internal_has_state() const {
  return BlendOneof_case() == kState;
}
inline bool Blend::has_state() const {
  return _internal_has_state();
}
inline void Blend::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void Blend::clear_state() {
  if (_internal_has_state()) {
    delete BlendOneof_.state_;
    clear_has_BlendOneof();
  }
}
inline ::Tiny3D::Script::ShaderSystem::BlendState* Blend::release_state() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Blend.state)
  if (_internal_has_state()) {
    clear_has_BlendOneof();
      ::Tiny3D::Script::ShaderSystem::BlendState* temp = BlendOneof_.state_;
    BlendOneof_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::BlendState& Blend::_internal_state() const {
  return _internal_has_state()
      ? *BlendOneof_.state_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::BlendState*>(&::Tiny3D::Script::ShaderSystem::_BlendState_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::BlendState& Blend::state() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Blend.state)
  return _internal_state();
}
inline ::Tiny3D::Script::ShaderSystem::BlendState* Blend::_internal_mutable_state() {
  if (!_internal_has_state()) {
    clear_BlendOneof();
    set_has_state();
    BlendOneof_.state_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::BlendState >(
        GetArenaNoVirtual());
  }
  return BlendOneof_.state_;
}
inline ::Tiny3D::Script::ShaderSystem::BlendState* Blend::mutable_state() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Blend.state)
  return _internal_mutable_state();
}

// .Tiny3D.Script.ShaderSystem.BlendStateRenderTarget target = 2;
inline bool Blend::_internal_has_target() const {
  return BlendOneof_case() == kTarget;
}
inline bool Blend::has_target() const {
  return _internal_has_target();
}
inline void Blend::set_has_target() {
  _oneof_case_[0] = kTarget;
}
inline void Blend::clear_target() {
  if (_internal_has_target()) {
    delete BlendOneof_.target_;
    clear_has_BlendOneof();
  }
}
inline ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* Blend::release_target() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Blend.target)
  if (_internal_has_target()) {
    clear_has_BlendOneof();
      ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* temp = BlendOneof_.target_;
    BlendOneof_.target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget& Blend::_internal_target() const {
  return _internal_has_target()
      ? *BlendOneof_.target_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget*>(&::Tiny3D::Script::ShaderSystem::_BlendStateRenderTarget_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget& Blend::target() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Blend.target)
  return _internal_target();
}
inline ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* Blend::_internal_mutable_target() {
  if (!_internal_has_target()) {
    clear_BlendOneof();
    set_has_target();
    BlendOneof_.target_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget >(
        GetArenaNoVirtual());
  }
  return BlendOneof_.target_;
}
inline ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* Blend::mutable_target() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Blend.target)
  return _internal_mutable_target();
}

inline bool Blend::has_BlendOneof() const {
  return BlendOneof_case() != BLENDONEOF_NOT_SET;
}
inline void Blend::clear_has_BlendOneof() {
  _oneof_case_[0] = BLENDONEOF_NOT_SET;
}
inline Blend::BlendOneofCase Blend::BlendOneof_case() const {
  return Blend::BlendOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BlendState

// .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 1;
inline void BlendState::clear_src_rgb() {
  src_rgb_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendState::_internal_src_rgb() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendFactor >(src_rgb_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendState::src_rgb() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendState.src_rgb)
  return _internal_src_rgb();
}
inline void BlendState::_internal_set_src_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  
  src_rgb_ = value;
}
inline void BlendState::set_src_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  _internal_set_src_rgb(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendState.src_rgb)
}

// .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 2;
inline void BlendState::clear_dst_rgb() {
  dst_rgb_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendState::_internal_dst_rgb() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendFactor >(dst_rgb_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendState::dst_rgb() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendState.dst_rgb)
  return _internal_dst_rgb();
}
inline void BlendState::_internal_set_dst_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  
  dst_rgb_ = value;
}
inline void BlendState::set_dst_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  _internal_set_dst_rgb(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendState.dst_rgb)
}

// .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 3;
inline void BlendState::clear_src_alpha() {
  src_alpha_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendState::_internal_src_alpha() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendFactor >(src_alpha_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendState::src_alpha() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendState.src_alpha)
  return _internal_src_alpha();
}
inline void BlendState::_internal_set_src_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  
  src_alpha_ = value;
}
inline void BlendState::set_src_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  _internal_set_src_alpha(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendState.src_alpha)
}

// .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 4;
inline void BlendState::clear_dst_alpha() {
  dst_alpha_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendState::_internal_dst_alpha() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendFactor >(dst_alpha_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendState::dst_alpha() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendState.dst_alpha)
  return _internal_dst_alpha();
}
inline void BlendState::_internal_set_dst_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  
  dst_alpha_ = value;
}
inline void BlendState::set_dst_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  _internal_set_dst_alpha(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendState.dst_alpha)
}

// -------------------------------------------------------------------

// BlendStateRenderTarget

// sint32 target = 1;
inline void BlendStateRenderTarget::clear_target() {
  target_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlendStateRenderTarget::_internal_target() const {
  return target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlendStateRenderTarget::target() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.target)
  return _internal_target();
}
inline void BlendStateRenderTarget::_internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_ = value;
}
inline void BlendStateRenderTarget::set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.target)
}

// .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 2;
inline void BlendStateRenderTarget::clear_src_rgb() {
  src_rgb_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendStateRenderTarget::_internal_src_rgb() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendFactor >(src_rgb_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendStateRenderTarget::src_rgb() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.src_rgb)
  return _internal_src_rgb();
}
inline void BlendStateRenderTarget::_internal_set_src_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  
  src_rgb_ = value;
}
inline void BlendStateRenderTarget::set_src_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  _internal_set_src_rgb(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.src_rgb)
}

// .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 3;
inline void BlendStateRenderTarget::clear_dst_rgb() {
  dst_rgb_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendStateRenderTarget::_internal_dst_rgb() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendFactor >(dst_rgb_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendStateRenderTarget::dst_rgb() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.dst_rgb)
  return _internal_dst_rgb();
}
inline void BlendStateRenderTarget::_internal_set_dst_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  
  dst_rgb_ = value;
}
inline void BlendStateRenderTarget::set_dst_rgb(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  _internal_set_dst_rgb(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.dst_rgb)
}

// .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 4;
inline void BlendStateRenderTarget::clear_src_alpha() {
  src_alpha_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendStateRenderTarget::_internal_src_alpha() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendFactor >(src_alpha_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendStateRenderTarget::src_alpha() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.src_alpha)
  return _internal_src_alpha();
}
inline void BlendStateRenderTarget::_internal_set_src_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  
  src_alpha_ = value;
}
inline void BlendStateRenderTarget::set_src_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  _internal_set_src_alpha(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.src_alpha)
}

// .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 5;
inline void BlendStateRenderTarget::clear_dst_alpha() {
  dst_alpha_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendStateRenderTarget::_internal_dst_alpha() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::BlendFactor >(dst_alpha_);
}
inline ::Tiny3D::Script::ShaderSystem::BlendFactor BlendStateRenderTarget::dst_alpha() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.dst_alpha)
  return _internal_dst_alpha();
}
inline void BlendStateRenderTarget::_internal_set_dst_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  
  dst_alpha_ = value;
}
inline void BlendStateRenderTarget::set_dst_alpha(::Tiny3D::Script::ShaderSystem::BlendFactor value) {
  _internal_set_dst_alpha(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget.dst_alpha)
}

// -------------------------------------------------------------------

// ColorMaskState1

// sint32 channels = 1;
inline void ColorMaskState1::clear_channels() {
  channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorMaskState1::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorMaskState1::channels() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.ColorMaskState1.channels)
  return _internal_channels();
}
inline void ColorMaskState1::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channels_ = value;
}
inline void ColorMaskState1::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.ColorMaskState1.channels)
}

// -------------------------------------------------------------------

// ColorMaskState2

// sint32 channels = 1;
inline void ColorMaskState2::clear_channels() {
  channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorMaskState2::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorMaskState2::channels() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.ColorMaskState2.channels)
  return _internal_channels();
}
inline void ColorMaskState2::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channels_ = value;
}
inline void ColorMaskState2::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.ColorMaskState2.channels)
}

// sint32 target = 2;
inline void ColorMaskState2::clear_target() {
  target_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorMaskState2::_internal_target() const {
  return target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorMaskState2::target() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.ColorMaskState2.target)
  return _internal_target();
}
inline void ColorMaskState2::_internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_ = value;
}
inline void ColorMaskState2::set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.ColorMaskState2.target)
}

// -------------------------------------------------------------------

// ColorMask

// .Tiny3D.Script.ShaderSystem.ColorMaskState1 state1 = 1;
inline bool ColorMask::_internal_has_state1() const {
  return ColorMaskOneof_case() == kState1;
}
inline bool ColorMask::has_state1() const {
  return _internal_has_state1();
}
inline void ColorMask::set_has_state1() {
  _oneof_case_[0] = kState1;
}
inline void ColorMask::clear_state1() {
  if (_internal_has_state1()) {
    delete ColorMaskOneof_.state1_;
    clear_has_ColorMaskOneof();
  }
}
inline ::Tiny3D::Script::ShaderSystem::ColorMaskState1* ColorMask::release_state1() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.ColorMask.state1)
  if (_internal_has_state1()) {
    clear_has_ColorMaskOneof();
      ::Tiny3D::Script::ShaderSystem::ColorMaskState1* temp = ColorMaskOneof_.state1_;
    ColorMaskOneof_.state1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::ColorMaskState1& ColorMask::_internal_state1() const {
  return _internal_has_state1()
      ? *ColorMaskOneof_.state1_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::ColorMaskState1*>(&::Tiny3D::Script::ShaderSystem::_ColorMaskState1_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::ColorMaskState1& ColorMask::state1() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.ColorMask.state1)
  return _internal_state1();
}
inline ::Tiny3D::Script::ShaderSystem::ColorMaskState1* ColorMask::_internal_mutable_state1() {
  if (!_internal_has_state1()) {
    clear_ColorMaskOneof();
    set_has_state1();
    ColorMaskOneof_.state1_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::ColorMaskState1 >(
        GetArenaNoVirtual());
  }
  return ColorMaskOneof_.state1_;
}
inline ::Tiny3D::Script::ShaderSystem::ColorMaskState1* ColorMask::mutable_state1() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.ColorMask.state1)
  return _internal_mutable_state1();
}

// .Tiny3D.Script.ShaderSystem.ColorMaskState2 state2 = 2;
inline bool ColorMask::_internal_has_state2() const {
  return ColorMaskOneof_case() == kState2;
}
inline bool ColorMask::has_state2() const {
  return _internal_has_state2();
}
inline void ColorMask::set_has_state2() {
  _oneof_case_[0] = kState2;
}
inline void ColorMask::clear_state2() {
  if (_internal_has_state2()) {
    delete ColorMaskOneof_.state2_;
    clear_has_ColorMaskOneof();
  }
}
inline ::Tiny3D::Script::ShaderSystem::ColorMaskState2* ColorMask::release_state2() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.ColorMask.state2)
  if (_internal_has_state2()) {
    clear_has_ColorMaskOneof();
      ::Tiny3D::Script::ShaderSystem::ColorMaskState2* temp = ColorMaskOneof_.state2_;
    ColorMaskOneof_.state2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::ColorMaskState2& ColorMask::_internal_state2() const {
  return _internal_has_state2()
      ? *ColorMaskOneof_.state2_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::ColorMaskState2*>(&::Tiny3D::Script::ShaderSystem::_ColorMaskState2_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::ColorMaskState2& ColorMask::state2() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.ColorMask.state2)
  return _internal_state2();
}
inline ::Tiny3D::Script::ShaderSystem::ColorMaskState2* ColorMask::_internal_mutable_state2() {
  if (!_internal_has_state2()) {
    clear_ColorMaskOneof();
    set_has_state2();
    ColorMaskOneof_.state2_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::ColorMaskState2 >(
        GetArenaNoVirtual());
  }
  return ColorMaskOneof_.state2_;
}
inline ::Tiny3D::Script::ShaderSystem::ColorMaskState2* ColorMask::mutable_state2() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.ColorMask.state2)
  return _internal_mutable_state2();
}

inline bool ColorMask::has_ColorMaskOneof() const {
  return ColorMaskOneof_case() != COLORMASKONEOF_NOT_SET;
}
inline void ColorMask::clear_has_ColorMaskOneof() {
  _oneof_case_[0] = COLORMASKONEOF_NOT_SET;
}
inline ColorMask::ColorMaskOneofCase ColorMask::ColorMaskOneof_case() const {
  return ColorMask::ColorMaskOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DepthBias

// float factor = 1;
inline void DepthBias::clear_factor() {
  factor_ = 0;
}
inline float DepthBias::_internal_factor() const {
  return factor_;
}
inline float DepthBias::factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.DepthBias.factor)
  return _internal_factor();
}
inline void DepthBias::_internal_set_factor(float value) {
  
  factor_ = value;
}
inline void DepthBias::set_factor(float value) {
  _internal_set_factor(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.DepthBias.factor)
}

// float units = 2;
inline void DepthBias::clear_units() {
  units_ = 0;
}
inline float DepthBias::_internal_units() const {
  return units_;
}
inline float DepthBias::units() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.DepthBias.units)
  return _internal_units();
}
inline void DepthBias::_internal_set_units(float value) {
  
  units_ = value;
}
inline void DepthBias::set_units(float value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.DepthBias.units)
}

// -------------------------------------------------------------------

// Stencil

// sint32 ref = 1;
inline void Stencil::clear_ref() {
  ref_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stencil::_internal_ref() const {
  return ref_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stencil::ref() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Stencil.ref)
  return _internal_ref();
}
inline void Stencil::_internal_set_ref(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ref_ = value;
}
inline void Stencil::set_ref(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Stencil.ref)
}

// sint32 read_mask = 2;
inline void Stencil::clear_read_mask() {
  read_mask_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stencil::_internal_read_mask() const {
  return read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stencil::read_mask() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Stencil.read_mask)
  return _internal_read_mask();
}
inline void Stencil::_internal_set_read_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_mask_ = value;
}
inline void Stencil::set_read_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_read_mask(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Stencil.read_mask)
}

// sint32 write_mask = 3;
inline void Stencil::clear_write_mask() {
  write_mask_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stencil::_internal_write_mask() const {
  return write_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stencil::write_mask() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Stencil.write_mask)
  return _internal_write_mask();
}
inline void Stencil::_internal_set_write_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  write_mask_ = value;
}
inline void Stencil::set_write_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_write_mask(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.Stencil.write_mask)
}

// .Tiny3D.Script.ShaderSystem.StencilOp op = 4;
inline bool Stencil::_internal_has_op() const {
  return this != internal_default_instance() && op_ != nullptr;
}
inline bool Stencil::has_op() const {
  return _internal_has_op();
}
inline void Stencil::clear_op() {
  if (GetArenaNoVirtual() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::StencilOp& Stencil::_internal_op() const {
  const ::Tiny3D::Script::ShaderSystem::StencilOp* p = op_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::StencilOp*>(
      &::Tiny3D::Script::ShaderSystem::_StencilOp_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::StencilOp& Stencil::op() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Stencil.op)
  return _internal_op();
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::release_op() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Stencil.op)
  
  ::Tiny3D::Script::ShaderSystem::StencilOp* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::_internal_mutable_op() {
  
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::StencilOp>(GetArenaNoVirtual());
    op_ = p;
  }
  return op_;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::mutable_op() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Stencil.op)
  return _internal_mutable_op();
}
inline void Stencil::set_allocated_op(::Tiny3D::Script::ShaderSystem::StencilOp* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete op_;
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    
  } else {
    
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Stencil.op)
}

// .Tiny3D.Script.ShaderSystem.StencilOp op_back = 5;
inline bool Stencil::_internal_has_op_back() const {
  return this != internal_default_instance() && op_back_ != nullptr;
}
inline bool Stencil::has_op_back() const {
  return _internal_has_op_back();
}
inline void Stencil::clear_op_back() {
  if (GetArenaNoVirtual() == nullptr && op_back_ != nullptr) {
    delete op_back_;
  }
  op_back_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::StencilOp& Stencil::_internal_op_back() const {
  const ::Tiny3D::Script::ShaderSystem::StencilOp* p = op_back_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::StencilOp*>(
      &::Tiny3D::Script::ShaderSystem::_StencilOp_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::StencilOp& Stencil::op_back() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Stencil.op_back)
  return _internal_op_back();
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::release_op_back() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Stencil.op_back)
  
  ::Tiny3D::Script::ShaderSystem::StencilOp* temp = op_back_;
  op_back_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::_internal_mutable_op_back() {
  
  if (op_back_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::StencilOp>(GetArenaNoVirtual());
    op_back_ = p;
  }
  return op_back_;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::mutable_op_back() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Stencil.op_back)
  return _internal_mutable_op_back();
}
inline void Stencil::set_allocated_op_back(::Tiny3D::Script::ShaderSystem::StencilOp* op_back) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete op_back_;
  }
  if (op_back) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op_back = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_back, submessage_arena);
    }
    
  } else {
    
  }
  op_back_ = op_back;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Stencil.op_back)
}

// .Tiny3D.Script.ShaderSystem.StencilOp op_front = 6;
inline bool Stencil::_internal_has_op_front() const {
  return this != internal_default_instance() && op_front_ != nullptr;
}
inline bool Stencil::has_op_front() const {
  return _internal_has_op_front();
}
inline void Stencil::clear_op_front() {
  if (GetArenaNoVirtual() == nullptr && op_front_ != nullptr) {
    delete op_front_;
  }
  op_front_ = nullptr;
}
inline const ::Tiny3D::Script::ShaderSystem::StencilOp& Stencil::_internal_op_front() const {
  const ::Tiny3D::Script::ShaderSystem::StencilOp* p = op_front_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ShaderSystem::StencilOp*>(
      &::Tiny3D::Script::ShaderSystem::_StencilOp_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::StencilOp& Stencil::op_front() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Stencil.op_front)
  return _internal_op_front();
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::release_op_front() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Stencil.op_front)
  
  ::Tiny3D::Script::ShaderSystem::StencilOp* temp = op_front_;
  op_front_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::_internal_mutable_op_front() {
  
  if (op_front_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ShaderSystem::StencilOp>(GetArenaNoVirtual());
    op_front_ = p;
  }
  return op_front_;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp* Stencil::mutable_op_front() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Stencil.op_front)
  return _internal_mutable_op_front();
}
inline void Stencil::set_allocated_op_front(::Tiny3D::Script::ShaderSystem::StencilOp* op_front) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete op_front_;
  }
  if (op_front) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op_front = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_front, submessage_arena);
    }
    
  } else {
    
  }
  op_front_ = op_front;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Stencil.op_front)
}

// -------------------------------------------------------------------

// StencilOp

// .Tiny3D.Script.ShaderSystem.Comp comp = 1;
inline void StencilOp::clear_comp() {
  comp_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::Comp StencilOp::_internal_comp() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::Comp >(comp_);
}
inline ::Tiny3D::Script::ShaderSystem::Comp StencilOp::comp() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.StencilOp.comp)
  return _internal_comp();
}
inline void StencilOp::_internal_set_comp(::Tiny3D::Script::ShaderSystem::Comp value) {
  
  comp_ = value;
}
inline void StencilOp::set_comp(::Tiny3D::Script::ShaderSystem::Comp value) {
  _internal_set_comp(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.StencilOp.comp)
}

// .Tiny3D.Script.ShaderSystem.StencilOp.Op pass = 2;
inline void StencilOp::clear_pass() {
  pass_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp_Op StencilOp::_internal_pass() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::StencilOp_Op >(pass_);
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp_Op StencilOp::pass() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.StencilOp.pass)
  return _internal_pass();
}
inline void StencilOp::_internal_set_pass(::Tiny3D::Script::ShaderSystem::StencilOp_Op value) {
  
  pass_ = value;
}
inline void StencilOp::set_pass(::Tiny3D::Script::ShaderSystem::StencilOp_Op value) {
  _internal_set_pass(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.StencilOp.pass)
}

// .Tiny3D.Script.ShaderSystem.StencilOp.Op fail = 3;
inline void StencilOp::clear_fail() {
  fail_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp_Op StencilOp::_internal_fail() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::StencilOp_Op >(fail_);
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp_Op StencilOp::fail() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.StencilOp.fail)
  return _internal_fail();
}
inline void StencilOp::_internal_set_fail(::Tiny3D::Script::ShaderSystem::StencilOp_Op value) {
  
  fail_ = value;
}
inline void StencilOp::set_fail(::Tiny3D::Script::ShaderSystem::StencilOp_Op value) {
  _internal_set_fail(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.StencilOp.fail)
}

// .Tiny3D.Script.ShaderSystem.StencilOp.Op z_fail = 4;
inline void StencilOp::clear_z_fail() {
  z_fail_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp_Op StencilOp::_internal_z_fail() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::StencilOp_Op >(z_fail_);
}
inline ::Tiny3D::Script::ShaderSystem::StencilOp_Op StencilOp::z_fail() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.StencilOp.z_fail)
  return _internal_z_fail();
}
inline void StencilOp::_internal_set_z_fail(::Tiny3D::Script::ShaderSystem::StencilOp_Op value) {
  
  z_fail_ = value;
}
inline void StencilOp::set_z_fail(::Tiny3D::Script::ShaderSystem::StencilOp_Op value) {
  _internal_set_z_fail(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.StencilOp.z_fail)
}

// -------------------------------------------------------------------

// Program

// .Tiny3D.Script.ShaderSystem.SourceProgram source = 1;
inline bool Program::_internal_has_source() const {
  return ProgramOneof_case() == kSource;
}
inline bool Program::has_source() const {
  return _internal_has_source();
}
inline void Program::set_has_source() {
  _oneof_case_[0] = kSource;
}
inline void Program::clear_source() {
  if (_internal_has_source()) {
    delete ProgramOneof_.source_;
    clear_has_ProgramOneof();
  }
}
inline ::Tiny3D::Script::ShaderSystem::SourceProgram* Program::release_source() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Program.source)
  if (_internal_has_source()) {
    clear_has_ProgramOneof();
      ::Tiny3D::Script::ShaderSystem::SourceProgram* temp = ProgramOneof_.source_;
    ProgramOneof_.source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::SourceProgram& Program::_internal_source() const {
  return _internal_has_source()
      ? *ProgramOneof_.source_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::SourceProgram*>(&::Tiny3D::Script::ShaderSystem::_SourceProgram_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::SourceProgram& Program::source() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Program.source)
  return _internal_source();
}
inline ::Tiny3D::Script::ShaderSystem::SourceProgram* Program::_internal_mutable_source() {
  if (!_internal_has_source()) {
    clear_ProgramOneof();
    set_has_source();
    ProgramOneof_.source_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::SourceProgram >(
        GetArenaNoVirtual());
  }
  return ProgramOneof_.source_;
}
inline ::Tiny3D::Script::ShaderSystem::SourceProgram* Program::mutable_source() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Program.source)
  return _internal_mutable_source();
}

// .Tiny3D.Script.ShaderSystem.CompiledProgram compiled = 2;
inline bool Program::_internal_has_compiled() const {
  return ProgramOneof_case() == kCompiled;
}
inline bool Program::has_compiled() const {
  return _internal_has_compiled();
}
inline void Program::set_has_compiled() {
  _oneof_case_[0] = kCompiled;
}
inline void Program::clear_compiled() {
  if (_internal_has_compiled()) {
    delete ProgramOneof_.compiled_;
    clear_has_ProgramOneof();
  }
}
inline ::Tiny3D::Script::ShaderSystem::CompiledProgram* Program::release_compiled() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.Program.compiled)
  if (_internal_has_compiled()) {
    clear_has_ProgramOneof();
      ::Tiny3D::Script::ShaderSystem::CompiledProgram* temp = ProgramOneof_.compiled_;
    ProgramOneof_.compiled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ShaderSystem::CompiledProgram& Program::_internal_compiled() const {
  return _internal_has_compiled()
      ? *ProgramOneof_.compiled_
      : *reinterpret_cast< ::Tiny3D::Script::ShaderSystem::CompiledProgram*>(&::Tiny3D::Script::ShaderSystem::_CompiledProgram_default_instance_);
}
inline const ::Tiny3D::Script::ShaderSystem::CompiledProgram& Program::compiled() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.Program.compiled)
  return _internal_compiled();
}
inline ::Tiny3D::Script::ShaderSystem::CompiledProgram* Program::_internal_mutable_compiled() {
  if (!_internal_has_compiled()) {
    clear_ProgramOneof();
    set_has_compiled();
    ProgramOneof_.compiled_ = CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::CompiledProgram >(
        GetArenaNoVirtual());
  }
  return ProgramOneof_.compiled_;
}
inline ::Tiny3D::Script::ShaderSystem::CompiledProgram* Program::mutable_compiled() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.Program.compiled)
  return _internal_mutable_compiled();
}

inline bool Program::has_ProgramOneof() const {
  return ProgramOneof_case() != PROGRAMONEOF_NOT_SET;
}
inline void Program::clear_has_ProgramOneof() {
  _oneof_case_[0] = PROGRAMONEOF_NOT_SET;
}
inline Program::ProgramOneofCase Program::ProgramOneof_case() const {
  return Program::ProgramOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SourceProgram

// .Tiny3D.Script.ShaderSystem.ProgramType type = 1;
inline void SourceProgram::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::ShaderSystem::ProgramType SourceProgram::_internal_type() const {
  return static_cast< ::Tiny3D::Script::ShaderSystem::ProgramType >(type_);
}
inline ::Tiny3D::Script::ShaderSystem::ProgramType SourceProgram::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.SourceProgram.type)
  return _internal_type();
}
inline void SourceProgram::_internal_set_type(::Tiny3D::Script::ShaderSystem::ProgramType value) {
  
  type_ = value;
}
inline void SourceProgram::set_type(::Tiny3D::Script::ShaderSystem::ProgramType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.SourceProgram.type)
}

// string code = 2;
inline void SourceProgram::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SourceProgram::code() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.SourceProgram.code)
  return _internal_code();
}
inline void SourceProgram::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.SourceProgram.code)
}
inline std::string* SourceProgram::mutable_code() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.SourceProgram.code)
  return _internal_mutable_code();
}
inline const std::string& SourceProgram::_internal_code() const {
  return code_.GetNoArena();
}
inline void SourceProgram::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SourceProgram::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ShaderSystem.SourceProgram.code)
}
inline void SourceProgram::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.SourceProgram.code)
}
inline void SourceProgram::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.SourceProgram.code)
}
inline std::string* SourceProgram::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SourceProgram::release_code() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.SourceProgram.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SourceProgram::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.SourceProgram.code)
}

// -------------------------------------------------------------------

// CompiledProgram

// string source = 1;
inline void CompiledProgram::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompiledProgram::source() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.CompiledProgram.source)
  return _internal_source();
}
inline void CompiledProgram::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.CompiledProgram.source)
}
inline std::string* CompiledProgram::mutable_source() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.CompiledProgram.source)
  return _internal_mutable_source();
}
inline const std::string& CompiledProgram::_internal_source() const {
  return source_.GetNoArena();
}
inline void CompiledProgram::_internal_set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompiledProgram::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ShaderSystem.CompiledProgram.source)
}
inline void CompiledProgram::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.CompiledProgram.source)
}
inline void CompiledProgram::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.CompiledProgram.source)
}
inline std::string* CompiledProgram::_internal_mutable_source() {
  
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompiledProgram::release_source() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.CompiledProgram.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompiledProgram::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.CompiledProgram.source)
}

// string stage = 2;
inline void CompiledProgram::clear_stage() {
  stage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompiledProgram::stage() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.CompiledProgram.stage)
  return _internal_stage();
}
inline void CompiledProgram::set_stage(const std::string& value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.CompiledProgram.stage)
}
inline std::string* CompiledProgram::mutable_stage() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.CompiledProgram.stage)
  return _internal_mutable_stage();
}
inline const std::string& CompiledProgram::_internal_stage() const {
  return stage_.GetNoArena();
}
inline void CompiledProgram::_internal_set_stage(const std::string& value) {
  
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompiledProgram::set_stage(std::string&& value) {
  
  stage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ShaderSystem.CompiledProgram.stage)
}
inline void CompiledProgram::set_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.CompiledProgram.stage)
}
inline void CompiledProgram::set_stage(const char* value, size_t size) {
  
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.CompiledProgram.stage)
}
inline std::string* CompiledProgram::_internal_mutable_stage() {
  
  return stage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompiledProgram::release_stage() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.CompiledProgram.stage)
  
  return stage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompiledProgram::set_allocated_stage(std::string* stage) {
  if (stage != nullptr) {
    
  } else {
    
  }
  stage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stage);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.CompiledProgram.stage)
}

// string entry = 3;
inline void CompiledProgram::clear_entry() {
  entry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompiledProgram::entry() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.CompiledProgram.entry)
  return _internal_entry();
}
inline void CompiledProgram::set_entry(const std::string& value) {
  _internal_set_entry(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.CompiledProgram.entry)
}
inline std::string* CompiledProgram::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.CompiledProgram.entry)
  return _internal_mutable_entry();
}
inline const std::string& CompiledProgram::_internal_entry() const {
  return entry_.GetNoArena();
}
inline void CompiledProgram::_internal_set_entry(const std::string& value) {
  
  entry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompiledProgram::set_entry(std::string&& value) {
  
  entry_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ShaderSystem.CompiledProgram.entry)
}
inline void CompiledProgram::set_entry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.CompiledProgram.entry)
}
inline void CompiledProgram::set_entry(const char* value, size_t size) {
  
  entry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.CompiledProgram.entry)
}
inline std::string* CompiledProgram::_internal_mutable_entry() {
  
  return entry_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompiledProgram::release_entry() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ShaderSystem.CompiledProgram.entry)
  
  return entry_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompiledProgram::set_allocated_entry(std::string* entry) {
  if (entry != nullptr) {
    
  } else {
    
  }
  entry_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.CompiledProgram.entry)
}

// repeated string keywords = 4;
inline int CompiledProgram::_internal_keywords_size() const {
  return keywords_.size();
}
inline int CompiledProgram::keywords_size() const {
  return _internal_keywords_size();
}
inline void CompiledProgram::clear_keywords() {
  keywords_.Clear();
}
inline std::string* CompiledProgram::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
  return _internal_add_keywords();
}
inline const std::string& CompiledProgram::_internal_keywords(int index) const {
  return keywords_.Get(index);
}
inline const std::string& CompiledProgram::keywords(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
  return _internal_keywords(index);
}
inline std::string* CompiledProgram::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
  return keywords_.Mutable(index);
}
inline void CompiledProgram::set_keywords(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
  keywords_.Mutable(index)->assign(value);
}
inline void CompiledProgram::set_keywords(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
inline void CompiledProgram::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
}
inline void CompiledProgram::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
}
inline std::string* CompiledProgram::_internal_add_keywords() {
  return keywords_.Add();
}
inline void CompiledProgram::add_keywords(const std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
}
inline void CompiledProgram::add_keywords(std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
}
inline void CompiledProgram::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
}
inline void CompiledProgram::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompiledProgram::keywords() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
  return keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompiledProgram::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ShaderSystem.CompiledProgram.keywords)
  return &keywords_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ShaderSystem
}  // namespace Script
}  // namespace Tiny3D

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Tiny3D::Script::ShaderSystem::StencilOp_Op> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ShaderSystem::StencilOp_Op>() {
  return ::Tiny3D::Script::ShaderSystem::StencilOp_Op_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ShaderSystem::BlendFactor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ShaderSystem::BlendFactor>() {
  return ::Tiny3D::Script::ShaderSystem::BlendFactor_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ShaderSystem::BlendOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ShaderSystem::BlendOp>() {
  return ::Tiny3D::Script::ShaderSystem::BlendOp_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ShaderSystem::Cull> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ShaderSystem::Cull>() {
  return ::Tiny3D::Script::ShaderSystem::Cull_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ShaderSystem::Comp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ShaderSystem::Comp>() {
  return ::Tiny3D::Script::ShaderSystem::Comp_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ShaderSystem::ProgramType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ShaderSystem::ProgramType>() {
  return ::Tiny3D::Script::ShaderSystem::ProgramType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ShaderScriptObject_2eproto
