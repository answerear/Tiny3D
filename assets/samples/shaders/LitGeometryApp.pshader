#pragma fragment frag
#pragma target 4.0

#define CONCATENATE(a, b) a##b
#define TEX2D(name) Texture2D name; SamplerState CONCATENATE(sampler, name);
#define TEX2D_R(name, r) Texture2D name : register(CONCATENATE(t, r)); SamplerState CONCATENATE(sampler, name) : register(CONCATENATE(s, r));
#define SAMPLE(tex, uv) tex.Sample(CONCATENATE(sampler, tex), uv);


TEX2D(texCube);

float4 tiny3d_AmbientLight;
float4 tiny3d_LightDir;
float4 tiny3d_LightColor;

struct PS_INPUT
{
    float4 position : SV_POSITION;
	float4 worldNormal : COLOR0;
    float2 uv : TEXCOORD0;
};

float4 frag(PS_INPUT input) : SV_Target
{
	float4 ambient = float4(tiny3d_AmbientLight.rgb * tiny3d_AmbientLight.a, 1.0);
    float4 worldLightDir = normalize(tiny3d_LightDir);
	float4 diffuse = max(0, dot(input.worldNormal, worldLightDir)) * tiny3d_LightColor;
	float4 color = SAMPLE(texCube, input.uv);
	color = ambient * diffuse * color;
    
    return color;
}