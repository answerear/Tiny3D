// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModelScriptObject.proto

#include "ModelScriptObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileHeader_CommonScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace ModelSystem {
class ModelFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelFile> _instance;
} _ModelFile_default_instance_;
}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D
static void InitDefaultsscc_info_ModelFile_ModelScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ModelSystem::_ModelFile_default_instance_;
    new (ptr) ::Tiny3D::Script::ModelSystem::ModelFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ModelSystem::ModelFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelFile_ModelScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelFile_ModelScriptObject_2eproto}, {
      &scc_info_FileHeader_CommonScriptObject_2eproto.base,}};

namespace Tiny3D {
namespace Script {
namespace ModelSystem {

// ===================================================================

void ModelFile::InitAsDefaultInstance() {
  ::Tiny3D::Script::ModelSystem::_ModelFile_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::FileHeader*>(
      ::Tiny3D::Script::FileHeader::internal_default_instance());
}
class ModelFile::_Internal {
 public:
  static const ::Tiny3D::Script::FileHeader& header(const ModelFile* msg);
};

const ::Tiny3D::Script::FileHeader&
ModelFile::_Internal::header(const ModelFile* msg) {
  return *msg->header_;
}
void ModelFile::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ModelFile::ModelFile()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ModelSystem.ModelFile)
}
ModelFile::ModelFile(const ModelFile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::FileHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ModelSystem.ModelFile)
}

void ModelFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelFile_ModelScriptObject_2eproto.base);
  header_ = nullptr;
}

ModelFile::~ModelFile() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ModelSystem.ModelFile)
  SharedDtor();
}

void ModelFile::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ModelFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelFile& ModelFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelFile_ModelScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ModelFile::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ModelSystem.ModelFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ModelFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.FileHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ModelSystem.ModelFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.FileHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ModelSystem.ModelFile)
  return target;
}

size_t ModelFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ModelSystem.ModelFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.FileHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelFile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ModelFile*>(
      &from));
}

void ModelFile::MergeFrom(const ModelFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ModelSystem.ModelFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::FileHeader::MergeFrom(from._internal_header());
  }
}

void ModelFile::CopyFrom(const ModelFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ModelSystem.ModelFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelFile::IsInitialized() const {
  return true;
}

void ModelFile::InternalSwap(ModelFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

std::string ModelFile::GetTypeName() const {
  return "Tiny3D.Script.ModelSystem.ModelFile";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ModelSystem::ModelFile* Arena::CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::ModelFile >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ModelSystem::ModelFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
