// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MaterialScriptObject.proto

#include "MaterialScriptObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlphaRejection_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlendScene_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendSceneFactor_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthBias_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fog_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUDeviceRule_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GPUProgramRef_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUVendorRule_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Iteration_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LODValues_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightColor_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamIndexed_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParamIndexedAuto_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamNamed_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParamNamedAuto_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SeparateBlendScene_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Shader_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleBlendType_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Technique_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextureAlias_MaterialScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace Tiny3D {
namespace Script {
namespace MaterialSystem {
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class ShaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shader> _instance;
} _Shader_default_instance_;
class GPUProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUProgram> _instance;
} _GPUProgram_default_instance_;
class GPUConstantBufferRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUConstantBufferRef> _instance;
} _GPUConstantBufferRef_default_instance_;
class GPUProgramRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUProgramRef> _instance;
} _GPUProgramRef_default_instance_;
class ParamIndexedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParamIndexed> _instance;
} _ParamIndexed_default_instance_;
class ParamIndexedAutoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParamIndexedAuto> _instance;
} _ParamIndexedAuto_default_instance_;
class ParamNamedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParamNamed> _instance;
} _ParamNamed_default_instance_;
class ParamNamedAutoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParamNamedAuto> _instance;
} _ParamNamedAuto_default_instance_;
class GPUConstantBufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUConstantBuffer> _instance;
} _GPUConstantBuffer_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class LightColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightColor> _instance;
} _LightColor_default_instance_;
class BlendSceneFactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendSceneFactor> _instance;
} _BlendSceneFactor_default_instance_;
class BlendSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendScene> _instance;
  int blend_type_;
  const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* blend_factor_;
} _BlendScene_default_instance_;
class SimpleBlendTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleBlendType> _instance;
} _SimpleBlendType_default_instance_;
class SimpleBlendSceneFactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleBlendSceneFactor> _instance;
} _SimpleBlendSceneFactor_default_instance_;
class SeparateBlendSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeparateBlendScene> _instance;
  const ::Tiny3D::Script::MaterialSystem::SimpleBlendType* blend_type_;
  const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* blend_factor_;
} _SeparateBlendScene_default_instance_;
class SeparateSceneBlendOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeparateSceneBlendOperation> _instance;
} _SeparateSceneBlendOperation_default_instance_;
class DepthBiasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthBias> _instance;
} _DepthBias_default_instance_;
class AlphaRejectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlphaRejection> _instance;
} _AlphaRejection_default_instance_;
class FogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fog> _instance;
} _Fog_default_instance_;
class IterationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Iteration> _instance;
} _Iteration_default_instance_;
class PointSizeAttenuationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointSizeAttenuation> _instance;
} _PointSizeAttenuation_default_instance_;
class PassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pass> _instance;
} _Pass_default_instance_;
class GPUVendorRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUVendorRule> _instance;
} _GPUVendorRule_default_instance_;
class GPUDeviceRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUDeviceRule> _instance;
} _GPUDeviceRule_default_instance_;
class TechniqueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Technique> _instance;
} _Technique_default_instance_;
class LODValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LODValues> _instance;
} _LODValues_default_instance_;
class TextureAliasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextureAlias> _instance;
} _TextureAlias_default_instance_;
class MaterialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Material> _instance;
} _Material_default_instance_;
}  // namespace MaterialSystem
}  // namespace Script
}  // namespace Tiny3D
static void InitDefaultsscc_info_AlphaRejection_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_AlphaRejection_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::AlphaRejection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::AlphaRejection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlphaRejection_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlphaRejection_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_BlendScene_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_BlendScene_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::BlendScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::BlendScene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlendScene_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlendScene_MaterialScriptObject_2eproto}, {
      &scc_info_BlendSceneFactor_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_BlendSceneFactor_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_BlendSceneFactor_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::BlendSceneFactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::BlendSceneFactor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendSceneFactor_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlendSceneFactor_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Color_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Color_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Color_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_DepthBias_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_DepthBias_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::DepthBias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::DepthBias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthBias_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepthBias_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Fog_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Fog_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Fog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Fog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fog_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Fog_MaterialScriptObject_2eproto}, {
      &scc_info_Color_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUConstantBuffer_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUConstantBuffer_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_GPUConstantBuffer_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_ParamIndexed_MaterialScriptObject_2eproto.base,
      &scc_info_ParamIndexedAuto_MaterialScriptObject_2eproto.base,
      &scc_info_ParamNamed_MaterialScriptObject_2eproto.base,
      &scc_info_ParamNamedAuto_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUConstantBufferRef_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUDeviceRule_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUDeviceRule_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUDeviceRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUDeviceRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUDeviceRule_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPUDeviceRule_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_GPUProgram_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUProgram_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUProgram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUProgram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GPUProgram_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GPUProgram_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_Shader_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUProgramRef_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUProgramRef_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUProgramRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUProgramRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GPUProgramRef_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GPUProgramRef_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_GPUVendorRule_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_GPUVendorRule_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::GPUVendorRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::GPUVendorRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUVendorRule_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPUVendorRule_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Header_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Header_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Header_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Iteration_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Iteration_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Iteration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Iteration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Iteration_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Iteration_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_LODValues_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_LODValues_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::LODValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::LODValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LODValues_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LODValues_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_LightColor_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::LightColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::LightColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightColor_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LightColor_MaterialScriptObject_2eproto}, {
      &scc_info_Color_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Material_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Material_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Material();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Material::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Material_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Material_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_LODValues_MaterialScriptObject_2eproto.base,
      &scc_info_TextureAlias_MaterialScriptObject_2eproto.base,
      &scc_info_Technique_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_ParamIndexed_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_ParamIndexed_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::ParamIndexed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::ParamIndexed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamIndexed_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParamIndexed_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_ParamIndexedAuto_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_ParamIndexedAuto_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParamIndexedAuto_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParamIndexedAuto_MaterialScriptObject_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ParamNamed_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_ParamNamed_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::ParamNamed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::ParamNamed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamNamed_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParamNamed_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_ParamNamedAuto_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_ParamNamedAuto_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::ParamNamedAuto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::ParamNamedAuto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParamNamedAuto_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParamNamedAuto_MaterialScriptObject_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Pass_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Pass_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Pass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Pass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Pass_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Pass_MaterialScriptObject_2eproto}, {
      &scc_info_LightColor_MaterialScriptObject_2eproto.base,
      &scc_info_BlendScene_MaterialScriptObject_2eproto.base,
      &scc_info_SeparateBlendScene_MaterialScriptObject_2eproto.base,
      &scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto.base,
      &scc_info_DepthBias_MaterialScriptObject_2eproto.base,
      &scc_info_AlphaRejection_MaterialScriptObject_2eproto.base,
      &scc_info_Fog_MaterialScriptObject_2eproto.base,
      &scc_info_Iteration_MaterialScriptObject_2eproto.base,
      &scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto.base,
      &scc_info_GPUProgramRef_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_PointSizeAttenuation_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_PointSizeAttenuation_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointSizeAttenuation_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_SeparateBlendScene_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SeparateBlendScene_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SeparateBlendScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SeparateBlendScene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SeparateBlendScene_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SeparateBlendScene_MaterialScriptObject_2eproto}, {
      &scc_info_SimpleBlendType_MaterialScriptObject_2eproto.base,
      &scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SeparateSceneBlendOperation_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Shader_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Shader_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Shader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Shader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Shader_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Shader_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SimpleBlendSceneFactor_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_SimpleBlendType_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_SimpleBlendType_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::SimpleBlendType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::SimpleBlendType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleBlendType_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleBlendType_MaterialScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Technique_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_Technique_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::Technique();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::Technique::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Technique_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Technique_MaterialScriptObject_2eproto}, {
      &scc_info_Header_MaterialScriptObject_2eproto.base,
      &scc_info_GPUVendorRule_MaterialScriptObject_2eproto.base,
      &scc_info_GPUDeviceRule_MaterialScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_TextureAlias_MaterialScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::MaterialSystem::_TextureAlias_default_instance_;
    new (ptr) ::Tiny3D::Script::MaterialSystem::TextureAlias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::MaterialSystem::TextureAlias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextureAlias_MaterialScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextureAlias_MaterialScriptObject_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MaterialScriptObject_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MaterialScriptObject_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MaterialScriptObject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MaterialScriptObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Header, id_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Header, numofchildren_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Header, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Header, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Shader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Shader, header_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Shader, source_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Shader, target_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Shader, entry_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Shader, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUProgram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUProgram, header_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUProgram, shaders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef, header_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef, slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUProgramRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUProgramRef, header_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUProgramRef, gpu_cbuffer_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexed, index_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexed, type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexed, num_values_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexed, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexedAuto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexedAuto, index_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexedAuto, value_code_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamIndexedAuto, extra_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamed, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamed, type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamed, num_values_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamed, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamedAuto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamedAuto, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamedAuto, value_code_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::ParamNamedAuto, extra_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBuffer, header_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBuffer, param_indexed_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBuffer, param_indexed_auto_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBuffer, param_named_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUConstantBuffer, param_named_auto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Color, r_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Color, g_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Color, b_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Color, a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::LightColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::LightColor, color_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::LightColor, vertex_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::BlendSceneFactor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::BlendSceneFactor, src_factor_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::BlendSceneFactor, dest_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::BlendScene, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::BlendScene, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Tiny3D::Script::MaterialSystem::BlendSceneDefaultTypeInternal, blend_type_),
  offsetof(::Tiny3D::Script::MaterialSystem::BlendSceneDefaultTypeInternal, blend_factor_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::BlendScene, BlendSceneOneOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SimpleBlendType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SimpleBlendType, color_blend_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SimpleBlendType, alpha_blend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor, color_src_factor_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor, color_dest_factor_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor, alpha_src_factor_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor, alpha_dest_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SeparateBlendScene, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SeparateBlendScene, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Tiny3D::Script::MaterialSystem::SeparateBlendSceneDefaultTypeInternal, blend_type_),
  offsetof(::Tiny3D::Script::MaterialSystem::SeparateBlendSceneDefaultTypeInternal, blend_factor_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SeparateBlendScene, SeparateBlendSceneOneOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation, color_op_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation, alpha_op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::DepthBias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::DepthBias, constant_bias_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::DepthBias, slopescale_bias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::AlphaRejection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::AlphaRejection, function_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::AlphaRejection, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Fog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Fog, overridable_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Fog, type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Fog, color_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Fog, density_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Fog, start_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Fog, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Iteration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Iteration, type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Iteration, number_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Iteration, light_type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Iteration, num_lights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::PointSizeAttenuation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::PointSizeAttenuation, enable_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::PointSizeAttenuation, constant_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::PointSizeAttenuation, linear_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::PointSizeAttenuation, quadratic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, ambient_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, diffuse_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, specular_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, emissive_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, shininess_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, scene_blend_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, separate_blend_scene_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, scene_blend_op_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, separate_scene_blend_op_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, depth_check_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, depth_write_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, depth_func_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, depth_bias_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, iteration_depth_bias_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, alpha_rejection_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, alpha_to_coverage_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, light_scissor_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, light_clip_planes_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, illumination_stage_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, normailize_normals_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, transparent_sorting_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, cull_hardware_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, cull_software_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, lighting_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, shading_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, polygon_mode_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, polygon_mode_overrideable_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, fog_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, color_write_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, max_lights_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, start_light_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, iteration_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, point_size_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, point_sprites_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, point_size_attenuation_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, point_size_min_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, point_size_max_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Pass, gpu_program_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUVendorRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUVendorRule, rule_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUVendorRule, vendor_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUDeviceRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUDeviceRule, rule_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUDeviceRule, device_pattern_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::GPUDeviceRule, case_sensitive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, header_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, render_queue_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, lod_index_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, scheme_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, shadow_caster_material_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, shadow_receiver_material_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, gpu_vendor_rule_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Technique, gpu_device_rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::LODValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::LODValues, number_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::LODValues, values_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::LODValues, strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::TextureAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::TextureAlias, aliasname_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::TextureAlias, texturename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Material, header_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Material, values_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Material, receive_shadows_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Material, transparency_casts_shadows_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Material, texture_alias_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::MaterialSystem::Material, techniques_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Tiny3D::Script::MaterialSystem::Header)},
  { 9, -1, sizeof(::Tiny3D::Script::MaterialSystem::Shader)},
  { 19, -1, sizeof(::Tiny3D::Script::MaterialSystem::GPUProgram)},
  { 26, -1, sizeof(::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef)},
  { 33, -1, sizeof(::Tiny3D::Script::MaterialSystem::GPUProgramRef)},
  { 40, -1, sizeof(::Tiny3D::Script::MaterialSystem::ParamIndexed)},
  { 49, -1, sizeof(::Tiny3D::Script::MaterialSystem::ParamIndexedAuto)},
  { 57, -1, sizeof(::Tiny3D::Script::MaterialSystem::ParamNamed)},
  { 66, -1, sizeof(::Tiny3D::Script::MaterialSystem::ParamNamedAuto)},
  { 74, -1, sizeof(::Tiny3D::Script::MaterialSystem::GPUConstantBuffer)},
  { 84, -1, sizeof(::Tiny3D::Script::MaterialSystem::Color)},
  { 93, -1, sizeof(::Tiny3D::Script::MaterialSystem::LightColor)},
  { 100, -1, sizeof(::Tiny3D::Script::MaterialSystem::BlendSceneFactor)},
  { 107, -1, sizeof(::Tiny3D::Script::MaterialSystem::BlendScene)},
  { 115, -1, sizeof(::Tiny3D::Script::MaterialSystem::SimpleBlendType)},
  { 122, -1, sizeof(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor)},
  { 131, -1, sizeof(::Tiny3D::Script::MaterialSystem::SeparateBlendScene)},
  { 139, -1, sizeof(::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation)},
  { 146, -1, sizeof(::Tiny3D::Script::MaterialSystem::DepthBias)},
  { 153, -1, sizeof(::Tiny3D::Script::MaterialSystem::AlphaRejection)},
  { 160, -1, sizeof(::Tiny3D::Script::MaterialSystem::Fog)},
  { 171, -1, sizeof(::Tiny3D::Script::MaterialSystem::Iteration)},
  { 180, -1, sizeof(::Tiny3D::Script::MaterialSystem::PointSizeAttenuation)},
  { 189, -1, sizeof(::Tiny3D::Script::MaterialSystem::Pass)},
  { 232, -1, sizeof(::Tiny3D::Script::MaterialSystem::GPUVendorRule)},
  { 239, -1, sizeof(::Tiny3D::Script::MaterialSystem::GPUDeviceRule)},
  { 247, -1, sizeof(::Tiny3D::Script::MaterialSystem::Technique)},
  { 260, -1, sizeof(::Tiny3D::Script::MaterialSystem::LODValues)},
  { 268, -1, sizeof(::Tiny3D::Script::MaterialSystem::TextureAlias)},
  { 275, -1, sizeof(::Tiny3D::Script::MaterialSystem::Material)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_Shader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_GPUProgram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_GPUConstantBufferRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_GPUProgramRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_ParamIndexed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_ParamIndexedAuto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_ParamNamed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_ParamNamedAuto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_GPUConstantBuffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_BlendSceneFactor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_BlendScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_SimpleBlendType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_SimpleBlendSceneFactor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_SeparateBlendScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_SeparateSceneBlendOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_DepthBias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_AlphaRejection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_Fog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_Iteration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_PointSizeAttenuation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_Pass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_GPUVendorRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_GPUDeviceRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_Technique_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_LODValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_TextureAlias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::MaterialSystem::_Material_default_instance_),
};

const char descriptor_table_protodef_MaterialScriptObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032MaterialScriptObject.proto\022\034Tiny3D.Scr"
  "ipt.MaterialSystem\032\031google/protobuf/any."
  "proto\"G\n\006Header\022\n\n\002ID\030\001 \001(\r\022\025\n\rnumOfChil"
  "dren\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004uuid\030\004 \001(\014\"|"
  "\n\006Shader\0224\n\006header\030\001 \001(\0132$.Tiny3D.Script"
  ".MaterialSystem.Header\022\016\n\006source\030\002 \001(\t\022\016"
  "\n\006target\030\003 \001(\t\022\r\n\005entry\030\004 \001(\t\022\r\n\005stage\030\005"
  " \001(\t\"y\n\nGPUProgram\0224\n\006header\030\001 \001(\0132$.Tin"
  "y3D.Script.MaterialSystem.Header\0225\n\007shad"
  "ers\030\002 \003(\0132$.Tiny3D.Script.MaterialSystem"
  ".Shader\"Z\n\024GPUConstantBufferRef\0224\n\006heade"
  "r\030\001 \001(\0132$.Tiny3D.Script.MaterialSystem.H"
  "eader\022\014\n\004slot\030\002 \001(\r\"\222\001\n\rGPUProgramRef\0224\n"
  "\006header\030\001 \001(\0132$.Tiny3D.Script.MaterialSy"
  "stem.Header\022K\n\017gpu_cbuffer_ref\030\002 \003(\01322.T"
  "iny3D.Script.MaterialSystem.GPUConstantB"
  "ufferRef\"z\n\014ParamIndexed\022\r\n\005index\030\001 \001(\r\022"
  "7\n\004type\030\002 \001(\0162).Tiny3D.Script.MaterialSy"
  "stem.BuiltInType\022\022\n\nnum_values\030\003 \001(\r\022\016\n\006"
  "values\030\004 \003(\002\"a\n\020ParamIndexedAuto\022\r\n\005inde"
  "x\030\001 \001(\r\022\022\n\nvalue_code\030\002 \001(\r\022*\n\014extra_par"
  "ams\030\003 \001(\0132\024.google.protobuf.Any\"w\n\nParam"
  "Named\022\014\n\004name\030\001 \001(\t\0227\n\004type\030\002 \001(\0162).Tiny"
  "3D.Script.MaterialSystem.BuiltInType\022\022\n\n"
  "num_values\030\003 \001(\r\022\016\n\006values\030\004 \003(\002\"^\n\016Para"
  "mNamedAuto\022\014\n\004name\030\001 \001(\t\022\022\n\nvalue_code\030\002"
  " \001(\r\022*\n\014extra_params\030\003 \001(\0132\024.google.prot"
  "obuf.Any\"\337\002\n\021GPUConstantBuffer\0224\n\006header"
  "\030\001 \001(\0132$.Tiny3D.Script.MaterialSystem.He"
  "ader\022A\n\rparam_indexed\030\002 \003(\0132*.Tiny3D.Scr"
  "ipt.MaterialSystem.ParamIndexed\022J\n\022param"
  "_indexed_auto\030\003 \003(\0132..Tiny3D.Script.Mate"
  "rialSystem.ParamIndexedAuto\022=\n\013param_nam"
  "ed\030\004 \003(\0132(.Tiny3D.Script.MaterialSystem."
  "ParamNamed\022F\n\020param_named_auto\030\005 \003(\0132,.T"
  "iny3D.Script.MaterialSystem.ParamNamedAu"
  "to\"3\n\005Color\022\t\n\001r\030\001 \001(\002\022\t\n\001g\030\002 \001(\002\022\t\n\001b\030\003"
  " \001(\002\022\t\n\001a\030\004 \001(\002\"V\n\nLightColor\0222\n\005color\030\001"
  " \001(\0132#.Tiny3D.Script.MaterialSystem.Colo"
  "r\022\024\n\014vertex_color\030\002 \001(\010\"\221\001\n\020BlendSceneFa"
  "ctor\022=\n\nsrc_factor\030\001 \001(\0162).Tiny3D.Script"
  ".MaterialSystem.BlendFactor\022>\n\013dest_fact"
  "or\030\002 \001(\0162).Tiny3D.Script.MaterialSystem."
  "BlendFactor\"\246\001\n\nBlendScene\022=\n\nblend_type"
  "\030\001 \001(\0162\'.Tiny3D.Script.MaterialSystem.Bl"
  "endTypeH\000\022F\n\014blend_factor\030\002 \001(\0132..Tiny3D"
  ".Script.MaterialSystem.BlendSceneFactorH"
  "\000B\021\n\017BlendSceneOneOf\"\215\001\n\017SimpleBlendType"
  "\022<\n\013color_blend\030\001 \001(\0162\'.Tiny3D.Script.Ma"
  "terialSystem.BlendType\022<\n\013alpha_blend\030\002 "
  "\001(\0162\'.Tiny3D.Script.MaterialSystem.Blend"
  "Type\"\256\002\n\026SimpleBlendSceneFactor\022C\n\020color"
  "_src_factor\030\001 \001(\0162).Tiny3D.Script.Materi"
  "alSystem.BlendFactor\022D\n\021color_dest_facto"
  "r\030\002 \001(\0162).Tiny3D.Script.MaterialSystem.B"
  "lendFactor\022C\n\020alpha_src_factor\030\003 \001(\0162).T"
  "iny3D.Script.MaterialSystem.BlendFactor\022"
  "D\n\021alpha_dest_factor\030\004 \001(\0162).Tiny3D.Scri"
  "pt.MaterialSystem.BlendFactor\"\302\001\n\022Separa"
  "teBlendScene\022C\n\nblend_type\030\001 \001(\0132-.Tiny3"
  "D.Script.MaterialSystem.SimpleBlendTypeH"
  "\000\022L\n\014blend_factor\030\002 \001(\01324.Tiny3D.Script."
  "MaterialSystem.SimpleBlendSceneFactorH\000B"
  "\031\n\027SeparateBlendSceneOneOf\"\235\001\n\033SeparateS"
  "ceneBlendOperation\022>\n\010color_op\030\001 \001(\0162,.T"
  "iny3D.Script.MaterialSystem.BlendOperati"
  "on\022>\n\010alpha_op\030\002 \001(\0162,.Tiny3D.Script.Mat"
  "erialSystem.BlendOperation\";\n\tDepthBias\022"
  "\025\n\rconstant_bias\030\001 \001(\002\022\027\n\017slopescale_bia"
  "s\030\002 \001(\002\"`\n\016AlphaRejection\022\?\n\010function\030\001 "
  "\001(\0162-.Tiny3D.Script.MaterialSystem.Compa"
  "reFunction\022\r\n\005value\030\002 \001(\r\"\260\001\n\003Fog\022\023\n\013ove"
  "rridable\030\001 \001(\010\0223\n\004type\030\002 \001(\0162%.Tiny3D.Sc"
  "ript.MaterialSystem.FogType\0222\n\005color\030\003 \001"
  "(\0132#.Tiny3D.Script.MaterialSystem.Color\022"
  "\017\n\007density\030\004 \001(\002\022\r\n\005start\030\005 \001(\002\022\013\n\003end\030\006"
  " \001(\002\"\247\001\n\tIteration\0229\n\004type\030\001 \001(\0162+.Tiny3"
  "D.Script.MaterialSystem.IterationType\022\016\n"
  "\006number\030\002 \001(\r\022;\n\nlight_type\030\003 \001(\0162\'.Tiny"
  "3D.Script.MaterialSystem.LightType\022\022\n\nnu"
  "m_lights\030\004 \001(\r\"[\n\024PointSizeAttenuation\022\016"
  "\n\006enable\030\001 \001(\010\022\020\n\010constant\030\002 \001(\002\022\016\n\006line"
  "ar\030\003 \001(\002\022\021\n\tquadratic\030\004 \001(\002\"\243\016\n\004Pass\0229\n\007"
  "ambient\030\001 \001(\0132(.Tiny3D.Script.MaterialSy"
  "stem.LightColor\0229\n\007diffuse\030\002 \001(\0132(.Tiny3"
  "D.Script.MaterialSystem.LightColor\022:\n\010sp"
  "ecular\030\003 \001(\0132(.Tiny3D.Script.MaterialSys"
  "tem.LightColor\022:\n\010emissive\030\004 \001(\0132(.Tiny3"
  "D.Script.MaterialSystem.LightColor\022\021\n\tsh"
  "ininess\030\005 \001(\002\022=\n\013scene_blend\030\006 \001(\0132(.Tin"
  "y3D.Script.MaterialSystem.BlendScene\022N\n\024"
  "separate_blend_scene\030\007 \001(\01320.Tiny3D.Scri"
  "pt.MaterialSystem.SeparateBlendScene\022D\n\016"
  "scene_blend_op\030\010 \001(\0162,.Tiny3D.Script.Mat"
  "erialSystem.BlendOperation\022Z\n\027separate_s"
  "cene_blend_op\030\t \001(\01329.Tiny3D.Script.Mate"
  "rialSystem.SeparateSceneBlendOperation\022\023"
  "\n\013depth_check\030\n \001(\010\022\023\n\013depth_write\030\013 \001(\010"
  "\022A\n\ndepth_func\030\014 \001(\0162-.Tiny3D.Script.Mat"
  "erialSystem.CompareFunction\022;\n\ndepth_bia"
  "s\030\r \001(\0132\'.Tiny3D.Script.MaterialSystem.D"
  "epthBias\022\034\n\024iteration_depth_bias\030\016 \001(\002\022E"
  "\n\017alpha_rejection\030\017 \001(\0132,.Tiny3D.Script."
  "MaterialSystem.AlphaRejection\022\031\n\021alpha_t"
  "o_coverage\030\020 \001(\010\022\025\n\rlight_scissor\030\021 \001(\010\022"
  "\031\n\021light_clip_planes\030\022 \001(\010\022K\n\022illuminati"
  "on_stage\030\023 \001(\0162/.Tiny3D.Script.MaterialS"
  "ystem.IlluminationStage\022\032\n\022normailize_no"
  "rmals\030\024 \001(\010\022M\n\023transparent_sorting\030\025 \001(\016"
  "20.Tiny3D.Script.MaterialSystem.Transpar"
  "entSorting\022A\n\rcull_hardware\030\026 \001(\0162*.Tiny"
  "3D.Script.MaterialSystem.CullHardware\022A\n"
  "\rcull_software\030\027 \001(\0162*.Tiny3D.Script.Mat"
  "erialSystem.CullSoftware\022\020\n\010lighting\030\030 \001"
  "(\010\022:\n\007shading\030\031 \001(\0162).Tiny3D.Script.Mate"
  "rialSystem.ShadingMode\022\?\n\014polygon_mode\030\032"
  " \001(\0162).Tiny3D.Script.MaterialSystem.Poly"
  "gonMode\022!\n\031polygon_mode_overrideable\030\033 \001"
  "(\010\022.\n\003fog\030\034 \001(\0132!.Tiny3D.Script.Material"
  "System.Fog\022\023\n\013color_write\030\035 \001(\010\022\022\n\nmax_l"
  "ights\030\036 \001(\r\022\023\n\013start_light\030\037 \001(\r\022:\n\titer"
  "ation\030  \001(\0132\'.Tiny3D.Script.MaterialSyst"
  "em.Iteration\022\022\n\npoint_size\030! \001(\002\022\025\n\rpoin"
  "t_sprites\030\" \001(\010\022R\n\026point_size_attenuatio"
  "n\030# \001(\01322.Tiny3D.Script.MaterialSystem.P"
  "ointSizeAttenuation\022\026\n\016point_size_min\030$ "
  "\001(\002\022\026\n\016point_size_max\030% \001(\002\022D\n\017gpu_progr"
  "am_ref\030& \001(\0132+.Tiny3D.Script.MaterialSys"
  "tem.GPUProgramRef\"]\n\rGPUVendorRule\0227\n\004ru"
  "le\030\001 \001(\0162).Tiny3D.Script.MaterialSystem."
  "GPURuleType\022\023\n\013vendor_name\030\002 \001(\t\"x\n\rGPUD"
  "eviceRule\0227\n\004rule\030\001 \001(\0162).Tiny3D.Script."
  "MaterialSystem.GPURuleType\022\026\n\016device_pat"
  "tern\030\002 \001(\t\022\026\n\016case_sensitive\030\003 \001(\010\"\310\002\n\tT"
  "echnique\0224\n\006header\030\001 \001(\0132$.Tiny3D.Script"
  ".MaterialSystem.Header\022\024\n\014render_queue\030\002"
  " \001(\r\022\021\n\tlod_index\030\003 \001(\r\022\016\n\006scheme\030\004 \001(\t\022"
  "\036\n\026shadow_caster_material\030\005 \001(\t\022 \n\030shado"
  "w_receiver_material\030\006 \001(\t\022D\n\017gpu_vendor_"
  "rule\030\007 \001(\0132+.Tiny3D.Script.MaterialSyste"
  "m.GPUVendorRule\022D\n\017gpu_device_rule\030\010 \001(\013"
  "2+.Tiny3D.Script.MaterialSystem.GPUDevic"
  "eRule\"=\n\tLODValues\022\016\n\006number\030\001 \001(\r\022\016\n\006va"
  "lues\030\002 \003(\002\022\020\n\010strategy\030\003 \001(\t\"6\n\014TextureA"
  "lias\022\021\n\taliasName\030\001 \001(\t\022\023\n\013textureName\030\002"
  " \001(\t\"\266\002\n\010Material\0224\n\006header\030\001 \001(\0132$.Tiny"
  "3D.Script.MaterialSystem.Header\0227\n\006value"
  "s\030\002 \001(\0132\'.Tiny3D.Script.MaterialSystem.L"
  "ODValues\022\027\n\017receive_shadows\030\003 \001(\010\022\"\n\032tra"
  "nsparency_casts_shadows\030\004 \001(\010\022A\n\rtexture"
  "_alias\030\005 \001(\0132*.Tiny3D.Script.MaterialSys"
  "tem.TextureAlias\022;\n\ntechniques\030\006 \003(\0132\'.T"
  "iny3D.Script.MaterialSystem.Technique*3\n"
  "\013BuiltInType\022\013\n\007BT_NONE\020\000\022\013\n\007BT_REAL\020\001\022\n"
  "\n\006BT_INT\020\002*`\n\tBlendType\022\n\n\006BT_ADD\020\000\022\017\n\013B"
  "T_MODULATE\020\001\022\022\n\016BT_ALPHA_BLEND\020\002\022\022\n\016BT_C"
  "OLOR_BLEND\020\003\022\016\n\nBT_REPLACE\020\004*\342\001\n\013BlendFa"
  "ctor\022\n\n\006BF_ONE\020\000\022\013\n\007BF_ZERO\020\001\022\021\n\rBF_DEST"
  "_COLOR\020\002\022\020\n\014BF_SRC_COLOR\020\003\022\033\n\027BF_ONE_MIN"
  "US_DEST_COLOR\020\004\022\032\n\026BF_ONE_MINUS_SRC_COLO"
  "R\020\005\022\021\n\rBF_DEST_ALPHA\020\006\022\020\n\014BF_SRC_ALPHA\020\007"
  "\022\033\n\027BF_ONE_MINUS_DEST_ALPHA\020\010\022\032\n\026BF_ONE_"
  "MINUS_SRC_ALPHA\020\t*^\n\016BlendOperation\022\n\n\006B"
  "O_ADD\020\000\022\017\n\013BO_SUBTRACT\020\001\022\027\n\023BO_REVERSE_S"
  "UBTRACT\020\002\022\n\n\006BO_MIN\020\003\022\n\n\006BO_MAX\020\004*\237\001\n\017Co"
  "mpareFunction\022\022\n\016CF_ALWAYS_FAIL\020\000\022\022\n\016CF_"
  "ALWAYS_PASS\020\001\022\013\n\007CF_LESS\020\002\022\021\n\rCF_LESS_EQ"
  "UAL\020\003\022\014\n\010CF_EQUAL\020\004\022\020\n\014CF_NOT_EQUAL\020\005\022\024\n"
  "\020CF_GREATER_EQUAL\020\006\022\016\n\nCF_GREATER\020\007*C\n\021I"
  "lluminationStage\022\016\n\nIS_AMBIENT\020\000\022\020\n\014IS_P"
  "ER_LIGHT\020\001\022\014\n\010IS_DECAL\020\002*9\n\022TransparentS"
  "orting\022\n\n\006TS_OFF\020\000\022\t\n\005TS_ON\020\001\022\014\n\010TS_FORC"
  "E\020\002*C\n\014CullHardware\022\013\n\007CH_NONE\020\000\022\020\n\014CH_C"
  "LOCKWISE\020\001\022\024\n\020CH_ANTICLOCKWISE\020\002*6\n\014Cull"
  "Software\022\013\n\007CS_NONE\020\000\022\013\n\007CS_BACK\020\001\022\014\n\010CS"
  "_FRONT\020\002*8\n\013ShadingMode\022\013\n\007SM_FLAT\020\000\022\016\n\n"
  "SM_GOURAUD\020\001\022\014\n\010SM_PHONG\020\002*I\n\013PolygonMod"
  "e\022\013\n\007PM_NONE\020\000\022\r\n\tPM_POINTS\020\001\022\020\n\014PM_WIRE"
  "FRAME\020\002\022\014\n\010PM_SOLID\020\003*>\n\007FogType\022\013\n\007FT_N"
  "ONE\020\000\022\n\n\006FT_EXP\020\001\022\013\n\007FT_EXP2\020\002\022\r\n\tFT_LIN"
  "EAR\020\003*Z\n\rIterationType\022\013\n\007IT_ONCE\020\000\022\025\n\021I"
  "T_ONCE_PER_LIGHT\020\001\022\020\n\014IT_PER_LIGHT\020\002\022\023\n\017"
  "IT_PER_N_LIGHTS\020\003*:\n\tLightType\022\014\n\010LT_POI"
  "NT\020\000\022\022\n\016LT_DIRECTIONAL\020\001\022\013\n\007LT_SPOT\020\002*\'\n"
  "\013GPURuleType\022\013\n\007INCLUDE\020\000\022\013\n\007EXCLUDE\020\001b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MaterialScriptObject_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MaterialScriptObject_2eproto_sccs[30] = {
  &scc_info_AlphaRejection_MaterialScriptObject_2eproto.base,
  &scc_info_BlendScene_MaterialScriptObject_2eproto.base,
  &scc_info_BlendSceneFactor_MaterialScriptObject_2eproto.base,
  &scc_info_Color_MaterialScriptObject_2eproto.base,
  &scc_info_DepthBias_MaterialScriptObject_2eproto.base,
  &scc_info_Fog_MaterialScriptObject_2eproto.base,
  &scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto.base,
  &scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto.base,
  &scc_info_GPUDeviceRule_MaterialScriptObject_2eproto.base,
  &scc_info_GPUProgram_MaterialScriptObject_2eproto.base,
  &scc_info_GPUProgramRef_MaterialScriptObject_2eproto.base,
  &scc_info_GPUVendorRule_MaterialScriptObject_2eproto.base,
  &scc_info_Header_MaterialScriptObject_2eproto.base,
  &scc_info_Iteration_MaterialScriptObject_2eproto.base,
  &scc_info_LODValues_MaterialScriptObject_2eproto.base,
  &scc_info_LightColor_MaterialScriptObject_2eproto.base,
  &scc_info_Material_MaterialScriptObject_2eproto.base,
  &scc_info_ParamIndexed_MaterialScriptObject_2eproto.base,
  &scc_info_ParamIndexedAuto_MaterialScriptObject_2eproto.base,
  &scc_info_ParamNamed_MaterialScriptObject_2eproto.base,
  &scc_info_ParamNamedAuto_MaterialScriptObject_2eproto.base,
  &scc_info_Pass_MaterialScriptObject_2eproto.base,
  &scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto.base,
  &scc_info_SeparateBlendScene_MaterialScriptObject_2eproto.base,
  &scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto.base,
  &scc_info_Shader_MaterialScriptObject_2eproto.base,
  &scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto.base,
  &scc_info_SimpleBlendType_MaterialScriptObject_2eproto.base,
  &scc_info_Technique_MaterialScriptObject_2eproto.base,
  &scc_info_TextureAlias_MaterialScriptObject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MaterialScriptObject_2eproto_once;
static bool descriptor_table_MaterialScriptObject_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MaterialScriptObject_2eproto = {
  &descriptor_table_MaterialScriptObject_2eproto_initialized, descriptor_table_protodef_MaterialScriptObject_2eproto, "MaterialScriptObject.proto", 7406,
  &descriptor_table_MaterialScriptObject_2eproto_once, descriptor_table_MaterialScriptObject_2eproto_sccs, descriptor_table_MaterialScriptObject_2eproto_deps, 30, 1,
  schemas, file_default_instances, TableStruct_MaterialScriptObject_2eproto::offsets,
  file_level_metadata_MaterialScriptObject_2eproto, 30, file_level_enum_descriptors_MaterialScriptObject_2eproto, file_level_service_descriptors_MaterialScriptObject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MaterialScriptObject_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MaterialScriptObject_2eproto), true);
namespace Tiny3D {
namespace Script {
namespace MaterialSystem {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuiltInType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[0];
}
bool BuiltInType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[1];
}
bool BlendType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendFactor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[2];
}
bool BlendFactor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[3];
}
bool BlendOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompareFunction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[4];
}
bool CompareFunction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IlluminationStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[5];
}
bool IlluminationStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransparentSorting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[6];
}
bool TransparentSorting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CullHardware_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[7];
}
bool CullHardware_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CullSoftware_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[8];
}
bool CullSoftware_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShadingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[9];
}
bool ShadingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolygonMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[10];
}
bool PolygonMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[11];
}
bool FogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IterationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[12];
}
bool IterationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[13];
}
bool LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GPURuleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MaterialScriptObject_2eproto);
  return file_level_enum_descriptors_MaterialScriptObject_2eproto[14];
}
bool GPURuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
class Header::_Internal {
 public:
};

Header::Header()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&numofchildren_) -
    reinterpret_cast<char*>(&id_)) + sizeof(numofchildren_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_MaterialScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numofchildren_) -
      reinterpret_cast<char*>(&id_)) + sizeof(numofchildren_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numofchildren_) -
      reinterpret_cast<char*>(&id_)) + sizeof(numofchildren_));
  _internal_metadata_.Clear();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 numOfChildren = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numofchildren_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.Header.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 numOfChildren = 2;
  if (this->numofchildren() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numofchildren(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Header.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bytes uuid = 4;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes uuid = 4;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 numOfChildren = 2;
  if (this->numofchildren() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numofchildren());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.numofchildren() != 0) {
    _internal_set_numofchildren(from._internal_numofchildren());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(numofchildren_, other->numofchildren_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shader::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Shader_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class Shader::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const Shader* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
Shader::_Internal::header(const Shader* msg) {
  return *msg->header_;
}
Shader::Shader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Shader)
}
Shader::Shader(const Shader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  entry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entry().empty()) {
    entry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entry_);
  }
  stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stage().empty()) {
    stage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Shader)
}

void Shader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Shader_MaterialScriptObject_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

Shader::~Shader() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Shader)
  SharedDtor();
}

void Shader::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Shader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shader& Shader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shader_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Shader::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Shader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Shader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.Shader.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.Shader.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_entry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.Shader.entry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.Shader.stage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Shader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Shader.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string target = 3;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Shader.target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target(), target);
  }

  // string entry = 4;
  if (this->entry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entry().data(), static_cast<int>(this->_internal_entry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Shader.entry");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_entry(), target);
  }

  // string stage = 5;
  if (this->stage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage().data(), static_cast<int>(this->_internal_stage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Shader.stage");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Shader)
  return target;
}

size_t Shader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Shader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string target = 3;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string entry = 4;
  if (this->entry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry());
  }

  // string stage = 5;
  if (this->stage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage());
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.Shader)
  GOOGLE_DCHECK_NE(&from, this);
  const Shader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.Shader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.Shader)
    MergeFrom(*source);
  }
}

void Shader::MergeFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Shader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.entry().size() > 0) {

    entry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entry_);
  }
  if (from.stage().size() > 0) {

    stage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
}

void Shader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shader::CopyFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shader::IsInitialized() const {
  return true;
}

void Shader::InternalSwap(Shader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entry_.Swap(&other->entry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stage_.Swap(&other->stage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPUProgram::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_GPUProgram_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class GPUProgram::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const GPUProgram* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
GPUProgram::_Internal::header(const GPUProgram* msg) {
  return *msg->header_;
}
GPUProgram::GPUProgram()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUProgram)
}
GPUProgram::GPUProgram(const GPUProgram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shaders_(from.shaders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUProgram)
}

void GPUProgram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUProgram_MaterialScriptObject_2eproto.base);
  header_ = nullptr;
}

GPUProgram::~GPUProgram() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUProgram)
  SharedDtor();
}

void GPUProgram::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GPUProgram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUProgram& GPUProgram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUProgram_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUProgram::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shaders_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GPUProgram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.Shader shaders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shaders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUProgram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Shader shaders = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shaders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shaders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUProgram)
  return target;
}

size_t GPUProgram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.Shader shaders = 2;
  total_size += 1UL * this->_internal_shaders_size();
  for (const auto& msg : this->shaders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUProgram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUProgram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPUProgram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.GPUProgram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.GPUProgram)
    MergeFrom(*source);
  }
}

void GPUProgram::MergeFrom(const GPUProgram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shaders_.MergeFrom(from.shaders_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
}

void GPUProgram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUProgram::CopyFrom(const GPUProgram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUProgram::IsInitialized() const {
  return true;
}

void GPUProgram::InternalSwap(GPUProgram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shaders_.InternalSwap(&other->shaders_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUProgram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPUConstantBufferRef::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_GPUConstantBufferRef_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class GPUConstantBufferRef::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const GPUConstantBufferRef* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
GPUConstantBufferRef::_Internal::header(const GPUConstantBufferRef* msg) {
  return *msg->header_;
}
GPUConstantBufferRef::GPUConstantBufferRef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
}
GPUConstantBufferRef::GPUConstantBufferRef(const GPUConstantBufferRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
}

void GPUConstantBufferRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&header_)) + sizeof(slot_));
}

GPUConstantBufferRef::~GPUConstantBufferRef() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  SharedDtor();
}

void GPUConstantBufferRef::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GPUConstantBufferRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUConstantBufferRef& GPUConstantBufferRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUConstantBufferRef_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUConstantBufferRef::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  slot_ = 0u;
  _internal_metadata_.Clear();
}

const char* GPUConstantBufferRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUConstantBufferRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 slot = 2;
  if (this->slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  return target;
}

size_t GPUConstantBufferRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 slot = 2;
  if (this->slot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUConstantBufferRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUConstantBufferRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPUConstantBufferRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
    MergeFrom(*source);
  }
}

void GPUConstantBufferRef::MergeFrom(const GPUConstantBufferRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
}

void GPUConstantBufferRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUConstantBufferRef::CopyFrom(const GPUConstantBufferRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUConstantBufferRef::IsInitialized() const {
  return true;
}

void GPUConstantBufferRef::InternalSwap(GPUConstantBufferRef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUConstantBufferRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPUProgramRef::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_GPUProgramRef_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class GPUProgramRef::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const GPUProgramRef* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
GPUProgramRef::_Internal::header(const GPUProgramRef* msg) {
  return *msg->header_;
}
GPUProgramRef::GPUProgramRef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUProgramRef)
}
GPUProgramRef::GPUProgramRef(const GPUProgramRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      gpu_cbuffer_ref_(from.gpu_cbuffer_ref_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUProgramRef)
}

void GPUProgramRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUProgramRef_MaterialScriptObject_2eproto.base);
  header_ = nullptr;
}

GPUProgramRef::~GPUProgramRef() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  SharedDtor();
}

void GPUProgramRef::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GPUProgramRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUProgramRef& GPUProgramRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUProgramRef_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUProgramRef::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpu_cbuffer_ref_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GPUProgramRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBufferRef gpu_cbuffer_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gpu_cbuffer_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUProgramRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBufferRef gpu_cbuffer_ref = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gpu_cbuffer_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_gpu_cbuffer_ref(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  return target;
}

size_t GPUProgramRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBufferRef gpu_cbuffer_ref = 2;
  total_size += 1UL * this->_internal_gpu_cbuffer_ref_size();
  for (const auto& msg : this->gpu_cbuffer_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUProgramRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUProgramRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPUProgramRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.GPUProgramRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.GPUProgramRef)
    MergeFrom(*source);
  }
}

void GPUProgramRef::MergeFrom(const GPUProgramRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpu_cbuffer_ref_.MergeFrom(from.gpu_cbuffer_ref_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
}

void GPUProgramRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUProgramRef::CopyFrom(const GPUProgramRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUProgramRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUProgramRef::IsInitialized() const {
  return true;
}

void GPUProgramRef::InternalSwap(GPUProgramRef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gpu_cbuffer_ref_.InternalSwap(&other->gpu_cbuffer_ref_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUProgramRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParamIndexed::InitAsDefaultInstance() {
}
class ParamIndexed::_Internal {
 public:
};

ParamIndexed::ParamIndexed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.ParamIndexed)
}
ParamIndexed::ParamIndexed(const ParamIndexed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_values_) -
    reinterpret_cast<char*>(&index_)) + sizeof(num_values_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.ParamIndexed)
}

void ParamIndexed::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_values_) -
      reinterpret_cast<char*>(&index_)) + sizeof(num_values_));
}

ParamIndexed::~ParamIndexed() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.ParamIndexed)
  SharedDtor();
}

void ParamIndexed::SharedDtor() {
}

void ParamIndexed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParamIndexed& ParamIndexed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParamIndexed_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ParamIndexed::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.ParamIndexed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_values_) -
      reinterpret_cast<char*>(&index_)) + sizeof(num_values_));
  _internal_metadata_.Clear();
}

const char* ParamIndexed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::BuiltInType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 num_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamIndexed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.ParamIndexed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 num_values = 3;
  if (this->num_values() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_values(), target);
  }

  // repeated float values = 4;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.ParamIndexed)
  return target;
}

size_t ParamIndexed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.ParamIndexed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 num_values = 3;
  if (this->num_values() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_values());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamIndexed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.ParamIndexed)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamIndexed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParamIndexed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.ParamIndexed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.ParamIndexed)
    MergeFrom(*source);
  }
}

void ParamIndexed::MergeFrom(const ParamIndexed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.ParamIndexed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.num_values() != 0) {
    _internal_set_num_values(from._internal_num_values());
  }
}

void ParamIndexed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.ParamIndexed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamIndexed::CopyFrom(const ParamIndexed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.ParamIndexed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamIndexed::IsInitialized() const {
  return true;
}

void ParamIndexed::InternalSwap(ParamIndexed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(index_, other->index_);
  swap(type_, other->type_);
  swap(num_values_, other->num_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamIndexed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParamIndexedAuto::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_ParamIndexedAuto_default_instance_._instance.get_mutable()->extra_params_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ParamIndexedAuto::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& extra_params(const ParamIndexedAuto* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ParamIndexedAuto::_Internal::extra_params(const ParamIndexedAuto* msg) {
  return *msg->extra_params_;
}
void ParamIndexedAuto::clear_extra_params() {
  if (GetArenaNoVirtual() == nullptr && extra_params_ != nullptr) {
    delete extra_params_;
  }
  extra_params_ = nullptr;
}
ParamIndexedAuto::ParamIndexedAuto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
}
ParamIndexedAuto::ParamIndexedAuto(const ParamIndexedAuto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_extra_params()) {
    extra_params_ = new PROTOBUF_NAMESPACE_ID::Any(*from.extra_params_);
  } else {
    extra_params_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_code_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_code_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
}

void ParamIndexedAuto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParamIndexedAuto_MaterialScriptObject_2eproto.base);
  ::memset(&extra_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_code_) -
      reinterpret_cast<char*>(&extra_params_)) + sizeof(value_code_));
}

ParamIndexedAuto::~ParamIndexedAuto() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  SharedDtor();
}

void ParamIndexedAuto::SharedDtor() {
  if (this != internal_default_instance()) delete extra_params_;
}

void ParamIndexedAuto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParamIndexedAuto& ParamIndexedAuto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParamIndexedAuto_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ParamIndexedAuto::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && extra_params_ != nullptr) {
    delete extra_params_;
  }
  extra_params_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(value_code_));
  _internal_metadata_.Clear();
}

const char* ParamIndexedAuto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 value_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any extra_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamIndexedAuto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 value_code = 2;
  if (this->value_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value_code(), target);
  }

  // .google.protobuf.Any extra_params = 3;
  if (this->has_extra_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extra_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  return target;
}

size_t ParamIndexedAuto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any extra_params = 3;
  if (this->has_extra_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_params_);
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 value_code = 2;
  if (this->value_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamIndexedAuto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamIndexedAuto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParamIndexedAuto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
    MergeFrom(*source);
  }
}

void ParamIndexedAuto::MergeFrom(const ParamIndexedAuto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_extra_params()) {
    _internal_mutable_extra_params()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_extra_params());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.value_code() != 0) {
    _internal_set_value_code(from._internal_value_code());
  }
}

void ParamIndexedAuto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamIndexedAuto::CopyFrom(const ParamIndexedAuto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamIndexedAuto::IsInitialized() const {
  return true;
}

void ParamIndexedAuto::InternalSwap(ParamIndexedAuto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(extra_params_, other->extra_params_);
  swap(index_, other->index_);
  swap(value_code_, other->value_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamIndexedAuto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParamNamed::InitAsDefaultInstance() {
}
class ParamNamed::_Internal {
 public:
};

ParamNamed::ParamNamed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.ParamNamed)
}
ParamNamed::ParamNamed(const ParamNamed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_values_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_values_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.ParamNamed)
}

void ParamNamed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParamNamed_MaterialScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_values_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_values_));
}

ParamNamed::~ParamNamed() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.ParamNamed)
  SharedDtor();
}

void ParamNamed::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParamNamed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParamNamed& ParamNamed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParamNamed_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ParamNamed::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.ParamNamed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_values_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_values_));
  _internal_metadata_.Clear();
}

const char* ParamNamed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.ParamNamed.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::BuiltInType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 num_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamNamed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.ParamNamed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.ParamNamed.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 num_values = 3;
  if (this->num_values() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_values(), target);
  }

  // repeated float values = 4;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.ParamNamed)
  return target;
}

size_t ParamNamed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.ParamNamed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 num_values = 3;
  if (this->num_values() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_values());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamNamed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.ParamNamed)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamNamed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParamNamed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.ParamNamed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.ParamNamed)
    MergeFrom(*source);
  }
}

void ParamNamed::MergeFrom(const ParamNamed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.ParamNamed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.num_values() != 0) {
    _internal_set_num_values(from._internal_num_values());
  }
}

void ParamNamed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.ParamNamed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamNamed::CopyFrom(const ParamNamed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.ParamNamed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamNamed::IsInitialized() const {
  return true;
}

void ParamNamed::InternalSwap(ParamNamed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(num_values_, other->num_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamNamed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParamNamedAuto::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_ParamNamedAuto_default_instance_._instance.get_mutable()->extra_params_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ParamNamedAuto::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& extra_params(const ParamNamedAuto* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ParamNamedAuto::_Internal::extra_params(const ParamNamedAuto* msg) {
  return *msg->extra_params_;
}
void ParamNamedAuto::clear_extra_params() {
  if (GetArenaNoVirtual() == nullptr && extra_params_ != nullptr) {
    delete extra_params_;
  }
  extra_params_ = nullptr;
}
ParamNamedAuto::ParamNamedAuto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
}
ParamNamedAuto::ParamNamedAuto(const ParamNamedAuto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_extra_params()) {
    extra_params_ = new PROTOBUF_NAMESPACE_ID::Any(*from.extra_params_);
  } else {
    extra_params_ = nullptr;
  }
  value_code_ = from.value_code_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
}

void ParamNamedAuto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParamNamedAuto_MaterialScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extra_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_code_) -
      reinterpret_cast<char*>(&extra_params_)) + sizeof(value_code_));
}

ParamNamedAuto::~ParamNamedAuto() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  SharedDtor();
}

void ParamNamedAuto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete extra_params_;
}

void ParamNamedAuto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParamNamedAuto& ParamNamedAuto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParamNamedAuto_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ParamNamedAuto::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && extra_params_ != nullptr) {
    delete extra_params_;
  }
  extra_params_ = nullptr;
  value_code_ = 0u;
  _internal_metadata_.Clear();
}

const char* ParamNamedAuto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.ParamNamedAuto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 value_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any extra_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamNamedAuto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.ParamNamedAuto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 value_code = 2;
  if (this->value_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value_code(), target);
  }

  // .google.protobuf.Any extra_params = 3;
  if (this->has_extra_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extra_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  return target;
}

size_t ParamNamedAuto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any extra_params = 3;
  if (this->has_extra_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_params_);
  }

  // uint32 value_code = 2;
  if (this->value_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamNamedAuto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamNamedAuto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParamNamedAuto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
    MergeFrom(*source);
  }
}

void ParamNamedAuto::MergeFrom(const ParamNamedAuto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_extra_params()) {
    _internal_mutable_extra_params()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_extra_params());
  }
  if (from.value_code() != 0) {
    _internal_set_value_code(from._internal_value_code());
  }
}

void ParamNamedAuto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamNamedAuto::CopyFrom(const ParamNamedAuto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamNamedAuto::IsInitialized() const {
  return true;
}

void ParamNamedAuto::InternalSwap(ParamNamedAuto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(extra_params_, other->extra_params_);
  swap(value_code_, other->value_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamNamedAuto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPUConstantBuffer::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_GPUConstantBuffer_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
}
class GPUConstantBuffer::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const GPUConstantBuffer* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
GPUConstantBuffer::_Internal::header(const GPUConstantBuffer* msg) {
  return *msg->header_;
}
GPUConstantBuffer::GPUConstantBuffer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
}
GPUConstantBuffer::GPUConstantBuffer(const GPUConstantBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      param_indexed_(from.param_indexed_),
      param_indexed_auto_(from.param_indexed_auto_),
      param_named_(from.param_named_),
      param_named_auto_(from.param_named_auto_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
}

void GPUConstantBuffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto.base);
  header_ = nullptr;
}

GPUConstantBuffer::~GPUConstantBuffer() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  SharedDtor();
}

void GPUConstantBuffer::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GPUConstantBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUConstantBuffer& GPUConstantBuffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUConstantBuffer_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUConstantBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_indexed_.Clear();
  param_indexed_auto_.Clear();
  param_named_.Clear();
  param_named_auto_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GPUConstantBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.ParamIndexed param_indexed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param_indexed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.ParamIndexedAuto param_indexed_auto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param_indexed_auto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.ParamNamed param_named = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param_named(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.ParamNamedAuto param_named_auto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param_named_auto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUConstantBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamIndexed param_indexed = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_indexed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_param_indexed(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamIndexedAuto param_indexed_auto = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_indexed_auto_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_param_indexed_auto(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamNamed param_named = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_named_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_param_named(i), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamNamedAuto param_named_auto = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_named_auto_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_param_named_auto(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  return target;
}

size_t GPUConstantBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.ParamIndexed param_indexed = 2;
  total_size += 1UL * this->_internal_param_indexed_size();
  for (const auto& msg : this->param_indexed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamIndexedAuto param_indexed_auto = 3;
  total_size += 1UL * this->_internal_param_indexed_auto_size();
  for (const auto& msg : this->param_indexed_auto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamNamed param_named = 4;
  total_size += 1UL * this->_internal_param_named_size();
  for (const auto& msg : this->param_named_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.MaterialSystem.ParamNamedAuto param_named_auto = 5;
  total_size += 1UL * this->_internal_param_named_auto_size();
  for (const auto& msg : this->param_named_auto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUConstantBuffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUConstantBuffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPUConstantBuffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
    MergeFrom(*source);
  }
}

void GPUConstantBuffer::MergeFrom(const GPUConstantBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_indexed_.MergeFrom(from.param_indexed_);
  param_indexed_auto_.MergeFrom(from.param_indexed_auto_);
  param_named_.MergeFrom(from.param_named_);
  param_named_auto_.MergeFrom(from.param_named_auto_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
}

void GPUConstantBuffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUConstantBuffer::CopyFrom(const GPUConstantBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUConstantBuffer::IsInitialized() const {
  return true;
}

void GPUConstantBuffer::InternalSwap(GPUConstantBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  param_indexed_.InternalSwap(&other->param_indexed_);
  param_indexed_auto_.InternalSwap(&other->param_indexed_auto_);
  param_named_.InternalSwap(&other->param_named_);
  param_named_auto_.InternalSwap(&other->param_named_auto_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUConstantBuffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
class Color::_Internal {
 public:
};

Color::Color()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Color)
}

void Color::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 4;
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.g() <= 0 && from.g() >= 0)) {
    _internal_set_g(from._internal_g());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LightColor::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_._instance.get_mutable()->color_ = const_cast< ::Tiny3D::Script::MaterialSystem::Color*>(
      ::Tiny3D::Script::MaterialSystem::Color::internal_default_instance());
}
class LightColor::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Color& color(const LightColor* msg);
};

const ::Tiny3D::Script::MaterialSystem::Color&
LightColor::_Internal::color(const LightColor* msg) {
  return *msg->color_;
}
LightColor::LightColor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.LightColor)
}
LightColor::LightColor(const LightColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::Tiny3D::Script::MaterialSystem::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  vertex_color_ = from.vertex_color_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.LightColor)
}

void LightColor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LightColor_MaterialScriptObject_2eproto.base);
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertex_color_) -
      reinterpret_cast<char*>(&color_)) + sizeof(vertex_color_));
}

LightColor::~LightColor() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.LightColor)
  SharedDtor();
}

void LightColor::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void LightColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightColor& LightColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightColor_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void LightColor::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.LightColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  vertex_color_ = false;
  _internal_metadata_.Clear();
}

const char* LightColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vertex_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vertex_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.LightColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Color color = 1;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  // bool vertex_color = 2;
  if (this->vertex_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vertex_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.LightColor)
  return target;
}

size_t LightColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.LightColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Color color = 1;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // bool vertex_color = 2;
  if (this->vertex_color() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.LightColor)
  GOOGLE_DCHECK_NE(&from, this);
  const LightColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.LightColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.LightColor)
    MergeFrom(*source);
  }
}

void LightColor::MergeFrom(const LightColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.LightColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color()) {
    _internal_mutable_color()->::Tiny3D::Script::MaterialSystem::Color::MergeFrom(from._internal_color());
  }
  if (from.vertex_color() != 0) {
    _internal_set_vertex_color(from._internal_vertex_color());
  }
}

void LightColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.LightColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightColor::CopyFrom(const LightColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.LightColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightColor::IsInitialized() const {
  return true;
}

void LightColor::InternalSwap(LightColor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_, other->color_);
  swap(vertex_color_, other->vertex_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlendSceneFactor::InitAsDefaultInstance() {
}
class BlendSceneFactor::_Internal {
 public:
};

BlendSceneFactor::BlendSceneFactor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
}
BlendSceneFactor::BlendSceneFactor(const BlendSceneFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&src_factor_, &from.src_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&dest_factor_) -
    reinterpret_cast<char*>(&src_factor_)) + sizeof(dest_factor_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
}

void BlendSceneFactor::SharedCtor() {
  ::memset(&src_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_factor_) -
      reinterpret_cast<char*>(&src_factor_)) + sizeof(dest_factor_));
}

BlendSceneFactor::~BlendSceneFactor() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  SharedDtor();
}

void BlendSceneFactor::SharedDtor() {
}

void BlendSceneFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlendSceneFactor& BlendSceneFactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlendSceneFactor_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void BlendSceneFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&src_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_factor_) -
      reinterpret_cast<char*>(&src_factor_)) + sizeof(dest_factor_));
  _internal_metadata_.Clear();
}

const char* BlendSceneFactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendFactor src_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_src_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendFactor dest_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dest_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlendSceneFactor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendFactor src_factor = 1;
  if (this->src_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_src_factor(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor dest_factor = 2;
  if (this->dest_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dest_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  return target;
}

size_t BlendSceneFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendFactor src_factor = 1;
  if (this->src_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_src_factor());
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor dest_factor = 2;
  if (this->dest_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dest_factor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlendSceneFactor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  GOOGLE_DCHECK_NE(&from, this);
  const BlendSceneFactor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlendSceneFactor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
    MergeFrom(*source);
  }
}

void BlendSceneFactor::MergeFrom(const BlendSceneFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_factor() != 0) {
    _internal_set_src_factor(from._internal_src_factor());
  }
  if (from.dest_factor() != 0) {
    _internal_set_dest_factor(from._internal_dest_factor());
  }
}

void BlendSceneFactor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlendSceneFactor::CopyFrom(const BlendSceneFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendSceneFactor::IsInitialized() const {
  return true;
}

void BlendSceneFactor::InternalSwap(BlendSceneFactor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(src_factor_, other->src_factor_);
  swap(dest_factor_, other->dest_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlendSceneFactor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlendScene::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_BlendScene_default_instance_.blend_type_ = 0;
  ::Tiny3D::Script::MaterialSystem::_BlendScene_default_instance_.blend_factor_ = const_cast< ::Tiny3D::Script::MaterialSystem::BlendSceneFactor*>(
      ::Tiny3D::Script::MaterialSystem::BlendSceneFactor::internal_default_instance());
}
class BlendScene::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor& blend_factor(const BlendScene* msg);
};

const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor&
BlendScene::_Internal::blend_factor(const BlendScene* msg) {
  return *msg->BlendSceneOneOf_.blend_factor_;
}
void BlendScene::set_allocated_blend_factor(::Tiny3D::Script::MaterialSystem::BlendSceneFactor* blend_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_BlendSceneOneOf();
  if (blend_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_factor, submessage_arena);
    }
    set_has_blend_factor();
    BlendSceneOneOf_.blend_factor_ = blend_factor;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.BlendScene.blend_factor)
}
BlendScene::BlendScene()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.BlendScene)
}
BlendScene::BlendScene(const BlendScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_BlendSceneOneOf();
  switch (from.BlendSceneOneOf_case()) {
    case kBlendType: {
      _internal_set_blend_type(from._internal_blend_type());
      break;
    }
    case kBlendFactor: {
      _internal_mutable_blend_factor()->::Tiny3D::Script::MaterialSystem::BlendSceneFactor::MergeFrom(from._internal_blend_factor());
      break;
    }
    case BLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.BlendScene)
}

void BlendScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlendScene_MaterialScriptObject_2eproto.base);
  clear_has_BlendSceneOneOf();
}

BlendScene::~BlendScene() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.BlendScene)
  SharedDtor();
}

void BlendScene::SharedDtor() {
  if (has_BlendSceneOneOf()) {
    clear_BlendSceneOneOf();
  }
}

void BlendScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlendScene& BlendScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlendScene_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void BlendScene::clear_BlendSceneOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.BlendScene)
  switch (BlendSceneOneOf_case()) {
    case kBlendType: {
      // No need to clear
      break;
    }
    case kBlendFactor: {
      delete BlendSceneOneOf_.blend_factor_;
      break;
    }
    case BLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BLENDSCENEONEOF_NOT_SET;
}


void BlendScene::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.BlendScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_BlendSceneOneOf();
  _internal_metadata_.Clear();
}

const char* BlendScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendType blend_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_blend_type(static_cast<::Tiny3D::Script::MaterialSystem::BlendType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendSceneFactor blend_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_factor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlendScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.BlendScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendType blend_type = 1;
  if (_internal_has_blend_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_blend_type(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendSceneFactor blend_factor = 2;
  if (_internal_has_blend_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::blend_factor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.BlendScene)
  return target;
}

size_t BlendScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.BlendScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (BlendSceneOneOf_case()) {
    // .Tiny3D.Script.MaterialSystem.BlendType blend_type = 1;
    case kBlendType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blend_type());
      break;
    }
    // .Tiny3D.Script.MaterialSystem.BlendSceneFactor blend_factor = 2;
    case kBlendFactor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *BlendSceneOneOf_.blend_factor_);
      break;
    }
    case BLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlendScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.BlendScene)
  GOOGLE_DCHECK_NE(&from, this);
  const BlendScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlendScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.BlendScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.BlendScene)
    MergeFrom(*source);
  }
}

void BlendScene::MergeFrom(const BlendScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.BlendScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.BlendSceneOneOf_case()) {
    case kBlendType: {
      _internal_set_blend_type(from._internal_blend_type());
      break;
    }
    case kBlendFactor: {
      _internal_mutable_blend_factor()->::Tiny3D::Script::MaterialSystem::BlendSceneFactor::MergeFrom(from._internal_blend_factor());
      break;
    }
    case BLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
}

void BlendScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.BlendScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlendScene::CopyFrom(const BlendScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.BlendScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendScene::IsInitialized() const {
  return true;
}

void BlendScene::InternalSwap(BlendScene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(BlendSceneOneOf_, other->BlendSceneOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlendScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleBlendType::InitAsDefaultInstance() {
}
class SimpleBlendType::_Internal {
 public:
};

SimpleBlendType::SimpleBlendType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SimpleBlendType)
}
SimpleBlendType::SimpleBlendType(const SimpleBlendType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_blend_, &from.color_blend_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_blend_) -
    reinterpret_cast<char*>(&color_blend_)) + sizeof(alpha_blend_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SimpleBlendType)
}

void SimpleBlendType::SharedCtor() {
  ::memset(&color_blend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_blend_) -
      reinterpret_cast<char*>(&color_blend_)) + sizeof(alpha_blend_));
}

SimpleBlendType::~SimpleBlendType() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  SharedDtor();
}

void SimpleBlendType::SharedDtor() {
}

void SimpleBlendType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleBlendType& SimpleBlendType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleBlendType_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SimpleBlendType::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_blend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_blend_) -
      reinterpret_cast<char*>(&color_blend_)) + sizeof(alpha_blend_));
  _internal_metadata_.Clear();
}

const char* SimpleBlendType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendType color_blend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_blend(static_cast<::Tiny3D::Script::MaterialSystem::BlendType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendType alpha_blend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alpha_blend(static_cast<::Tiny3D::Script::MaterialSystem::BlendType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleBlendType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendType color_blend = 1;
  if (this->color_blend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color_blend(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendType alpha_blend = 2;
  if (this->alpha_blend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_alpha_blend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  return target;
}

size_t SimpleBlendType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendType color_blend = 1;
  if (this->color_blend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_blend());
  }

  // .Tiny3D.Script.MaterialSystem.BlendType alpha_blend = 2;
  if (this->alpha_blend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alpha_blend());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleBlendType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleBlendType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleBlendType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.SimpleBlendType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.SimpleBlendType)
    MergeFrom(*source);
  }
}

void SimpleBlendType::MergeFrom(const SimpleBlendType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_blend() != 0) {
    _internal_set_color_blend(from._internal_color_blend());
  }
  if (from.alpha_blend() != 0) {
    _internal_set_alpha_blend(from._internal_alpha_blend());
  }
}

void SimpleBlendType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleBlendType::CopyFrom(const SimpleBlendType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleBlendType::IsInitialized() const {
  return true;
}

void SimpleBlendType::InternalSwap(SimpleBlendType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_blend_, other->color_blend_);
  swap(alpha_blend_, other->alpha_blend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleBlendType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleBlendSceneFactor::InitAsDefaultInstance() {
}
class SimpleBlendSceneFactor::_Internal {
 public:
};

SimpleBlendSceneFactor::SimpleBlendSceneFactor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
}
SimpleBlendSceneFactor::SimpleBlendSceneFactor(const SimpleBlendSceneFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_src_factor_, &from.color_src_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_dest_factor_) -
    reinterpret_cast<char*>(&color_src_factor_)) + sizeof(alpha_dest_factor_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
}

void SimpleBlendSceneFactor::SharedCtor() {
  ::memset(&color_src_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_dest_factor_) -
      reinterpret_cast<char*>(&color_src_factor_)) + sizeof(alpha_dest_factor_));
}

SimpleBlendSceneFactor::~SimpleBlendSceneFactor() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  SharedDtor();
}

void SimpleBlendSceneFactor::SharedDtor() {
}

void SimpleBlendSceneFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleBlendSceneFactor& SimpleBlendSceneFactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleBlendSceneFactor_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SimpleBlendSceneFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_src_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_dest_factor_) -
      reinterpret_cast<char*>(&color_src_factor_)) + sizeof(alpha_dest_factor_));
  _internal_metadata_.Clear();
}

const char* SimpleBlendSceneFactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendFactor color_src_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_src_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendFactor color_dest_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_dest_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_src_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alpha_src_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_dest_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alpha_dest_factor(static_cast<::Tiny3D::Script::MaterialSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleBlendSceneFactor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_src_factor = 1;
  if (this->color_src_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color_src_factor(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_dest_factor = 2;
  if (this->color_dest_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color_dest_factor(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_src_factor = 3;
  if (this->alpha_src_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_alpha_src_factor(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_dest_factor = 4;
  if (this->alpha_dest_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_alpha_dest_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  return target;
}

size_t SimpleBlendSceneFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_src_factor = 1;
  if (this->color_src_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_src_factor());
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_dest_factor = 2;
  if (this->color_dest_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_dest_factor());
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_src_factor = 3;
  if (this->alpha_src_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alpha_src_factor());
  }

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_dest_factor = 4;
  if (this->alpha_dest_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alpha_dest_factor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleBlendSceneFactor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleBlendSceneFactor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleBlendSceneFactor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
    MergeFrom(*source);
  }
}

void SimpleBlendSceneFactor::MergeFrom(const SimpleBlendSceneFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_src_factor() != 0) {
    _internal_set_color_src_factor(from._internal_color_src_factor());
  }
  if (from.color_dest_factor() != 0) {
    _internal_set_color_dest_factor(from._internal_color_dest_factor());
  }
  if (from.alpha_src_factor() != 0) {
    _internal_set_alpha_src_factor(from._internal_alpha_src_factor());
  }
  if (from.alpha_dest_factor() != 0) {
    _internal_set_alpha_dest_factor(from._internal_alpha_dest_factor());
  }
}

void SimpleBlendSceneFactor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleBlendSceneFactor::CopyFrom(const SimpleBlendSceneFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleBlendSceneFactor::IsInitialized() const {
  return true;
}

void SimpleBlendSceneFactor::InternalSwap(SimpleBlendSceneFactor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_src_factor_, other->color_src_factor_);
  swap(color_dest_factor_, other->color_dest_factor_);
  swap(alpha_src_factor_, other->alpha_src_factor_);
  swap(alpha_dest_factor_, other->alpha_dest_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleBlendSceneFactor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeparateBlendScene::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_SeparateBlendScene_default_instance_.blend_type_ = const_cast< ::Tiny3D::Script::MaterialSystem::SimpleBlendType*>(
      ::Tiny3D::Script::MaterialSystem::SimpleBlendType::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_SeparateBlendScene_default_instance_.blend_factor_ = const_cast< ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor*>(
      ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor::internal_default_instance());
}
class SeparateBlendScene::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::SimpleBlendType& blend_type(const SeparateBlendScene* msg);
  static const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor& blend_factor(const SeparateBlendScene* msg);
};

const ::Tiny3D::Script::MaterialSystem::SimpleBlendType&
SeparateBlendScene::_Internal::blend_type(const SeparateBlendScene* msg) {
  return *msg->SeparateBlendSceneOneOf_.blend_type_;
}
const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor&
SeparateBlendScene::_Internal::blend_factor(const SeparateBlendScene* msg) {
  return *msg->SeparateBlendSceneOneOf_.blend_factor_;
}
void SeparateBlendScene::set_allocated_blend_type(::Tiny3D::Script::MaterialSystem::SimpleBlendType* blend_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SeparateBlendSceneOneOf();
  if (blend_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_type, submessage_arena);
    }
    set_has_blend_type();
    SeparateBlendSceneOneOf_.blend_type_ = blend_type;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_type)
}
void SeparateBlendScene::set_allocated_blend_factor(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* blend_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SeparateBlendSceneOneOf();
  if (blend_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blend_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blend_factor, submessage_arena);
    }
    set_has_blend_factor();
    SeparateBlendSceneOneOf_.blend_factor_ = blend_factor;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_factor)
}
SeparateBlendScene::SeparateBlendScene()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
}
SeparateBlendScene::SeparateBlendScene(const SeparateBlendScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_SeparateBlendSceneOneOf();
  switch (from.SeparateBlendSceneOneOf_case()) {
    case kBlendType: {
      _internal_mutable_blend_type()->::Tiny3D::Script::MaterialSystem::SimpleBlendType::MergeFrom(from._internal_blend_type());
      break;
    }
    case kBlendFactor: {
      _internal_mutable_blend_factor()->::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor::MergeFrom(from._internal_blend_factor());
      break;
    }
    case SEPARATEBLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
}

void SeparateBlendScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeparateBlendScene_MaterialScriptObject_2eproto.base);
  clear_has_SeparateBlendSceneOneOf();
}

SeparateBlendScene::~SeparateBlendScene() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  SharedDtor();
}

void SeparateBlendScene::SharedDtor() {
  if (has_SeparateBlendSceneOneOf()) {
    clear_SeparateBlendSceneOneOf();
  }
}

void SeparateBlendScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeparateBlendScene& SeparateBlendScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeparateBlendScene_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SeparateBlendScene::clear_SeparateBlendSceneOneOf() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  switch (SeparateBlendSceneOneOf_case()) {
    case kBlendType: {
      delete SeparateBlendSceneOneOf_.blend_type_;
      break;
    }
    case kBlendFactor: {
      delete SeparateBlendSceneOneOf_.blend_factor_;
      break;
    }
    case SEPARATEBLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SEPARATEBLENDSCENEONEOF_NOT_SET;
}


void SeparateBlendScene::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_SeparateBlendSceneOneOf();
  _internal_metadata_.Clear();
}

const char* SeparateBlendScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.SimpleBlendType blend_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor blend_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_factor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeparateBlendScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.SimpleBlendType blend_type = 1;
  if (_internal_has_blend_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blend_type(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor blend_factor = 2;
  if (_internal_has_blend_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::blend_factor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  return target;
}

size_t SeparateBlendScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (SeparateBlendSceneOneOf_case()) {
    // .Tiny3D.Script.MaterialSystem.SimpleBlendType blend_type = 1;
    case kBlendType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SeparateBlendSceneOneOf_.blend_type_);
      break;
    }
    // .Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor blend_factor = 2;
    case kBlendFactor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SeparateBlendSceneOneOf_.blend_factor_);
      break;
    }
    case SEPARATEBLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeparateBlendScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  GOOGLE_DCHECK_NE(&from, this);
  const SeparateBlendScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeparateBlendScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
    MergeFrom(*source);
  }
}

void SeparateBlendScene::MergeFrom(const SeparateBlendScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.SeparateBlendSceneOneOf_case()) {
    case kBlendType: {
      _internal_mutable_blend_type()->::Tiny3D::Script::MaterialSystem::SimpleBlendType::MergeFrom(from._internal_blend_type());
      break;
    }
    case kBlendFactor: {
      _internal_mutable_blend_factor()->::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor::MergeFrom(from._internal_blend_factor());
      break;
    }
    case SEPARATEBLENDSCENEONEOF_NOT_SET: {
      break;
    }
  }
}

void SeparateBlendScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeparateBlendScene::CopyFrom(const SeparateBlendScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeparateBlendScene::IsInitialized() const {
  return true;
}

void SeparateBlendScene::InternalSwap(SeparateBlendScene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(SeparateBlendSceneOneOf_, other->SeparateBlendSceneOneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeparateBlendScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeparateSceneBlendOperation::InitAsDefaultInstance() {
}
class SeparateSceneBlendOperation::_Internal {
 public:
};

SeparateSceneBlendOperation::SeparateSceneBlendOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
}
SeparateSceneBlendOperation::SeparateSceneBlendOperation(const SeparateSceneBlendOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_op_, &from.color_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_op_) -
    reinterpret_cast<char*>(&color_op_)) + sizeof(alpha_op_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
}

void SeparateSceneBlendOperation::SharedCtor() {
  ::memset(&color_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_op_) -
      reinterpret_cast<char*>(&color_op_)) + sizeof(alpha_op_));
}

SeparateSceneBlendOperation::~SeparateSceneBlendOperation() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  SharedDtor();
}

void SeparateSceneBlendOperation::SharedDtor() {
}

void SeparateSceneBlendOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeparateSceneBlendOperation& SeparateSceneBlendOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeparateSceneBlendOperation_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SeparateSceneBlendOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_op_) -
      reinterpret_cast<char*>(&color_op_)) + sizeof(alpha_op_));
  _internal_metadata_.Clear();
}

const char* SeparateSceneBlendOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.BlendOperation color_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_op(static_cast<::Tiny3D::Script::MaterialSystem::BlendOperation>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendOperation alpha_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alpha_op(static_cast<::Tiny3D::Script::MaterialSystem::BlendOperation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeparateSceneBlendOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendOperation color_op = 1;
  if (this->color_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color_op(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendOperation alpha_op = 2;
  if (this->alpha_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_alpha_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  return target;
}

size_t SeparateSceneBlendOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.BlendOperation color_op = 1;
  if (this->color_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_op());
  }

  // .Tiny3D.Script.MaterialSystem.BlendOperation alpha_op = 2;
  if (this->alpha_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alpha_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeparateSceneBlendOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SeparateSceneBlendOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeparateSceneBlendOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
    MergeFrom(*source);
  }
}

void SeparateSceneBlendOperation::MergeFrom(const SeparateSceneBlendOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_op() != 0) {
    _internal_set_color_op(from._internal_color_op());
  }
  if (from.alpha_op() != 0) {
    _internal_set_alpha_op(from._internal_alpha_op());
  }
}

void SeparateSceneBlendOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeparateSceneBlendOperation::CopyFrom(const SeparateSceneBlendOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeparateSceneBlendOperation::IsInitialized() const {
  return true;
}

void SeparateSceneBlendOperation::InternalSwap(SeparateSceneBlendOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_op_, other->color_op_);
  swap(alpha_op_, other->alpha_op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeparateSceneBlendOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthBias::InitAsDefaultInstance() {
}
class DepthBias::_Internal {
 public:
};

DepthBias::DepthBias()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.DepthBias)
}
DepthBias::DepthBias(const DepthBias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&constant_bias_, &from.constant_bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&slopescale_bias_) -
    reinterpret_cast<char*>(&constant_bias_)) + sizeof(slopescale_bias_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.DepthBias)
}

void DepthBias::SharedCtor() {
  ::memset(&constant_bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slopescale_bias_) -
      reinterpret_cast<char*>(&constant_bias_)) + sizeof(slopescale_bias_));
}

DepthBias::~DepthBias() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.DepthBias)
  SharedDtor();
}

void DepthBias::SharedDtor() {
}

void DepthBias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthBias& DepthBias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthBias_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void DepthBias::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.DepthBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&constant_bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slopescale_bias_) -
      reinterpret_cast<char*>(&constant_bias_)) + sizeof(slopescale_bias_));
  _internal_metadata_.Clear();
}

const char* DepthBias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float constant_bias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          constant_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float slopescale_bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          slopescale_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthBias::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.DepthBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float constant_bias = 1;
  if (!(this->constant_bias() <= 0 && this->constant_bias() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_constant_bias(), target);
  }

  // float slopescale_bias = 2;
  if (!(this->slopescale_bias() <= 0 && this->slopescale_bias() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_slopescale_bias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.DepthBias)
  return target;
}

size_t DepthBias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.DepthBias)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float constant_bias = 1;
  if (!(this->constant_bias() <= 0 && this->constant_bias() >= 0)) {
    total_size += 1 + 4;
  }

  // float slopescale_bias = 2;
  if (!(this->slopescale_bias() <= 0 && this->slopescale_bias() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthBias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.DepthBias)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthBias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthBias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.DepthBias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.DepthBias)
    MergeFrom(*source);
  }
}

void DepthBias::MergeFrom(const DepthBias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.DepthBias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.constant_bias() <= 0 && from.constant_bias() >= 0)) {
    _internal_set_constant_bias(from._internal_constant_bias());
  }
  if (!(from.slopescale_bias() <= 0 && from.slopescale_bias() >= 0)) {
    _internal_set_slopescale_bias(from._internal_slopescale_bias());
  }
}

void DepthBias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.DepthBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthBias::CopyFrom(const DepthBias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.DepthBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthBias::IsInitialized() const {
  return true;
}

void DepthBias::InternalSwap(DepthBias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(constant_bias_, other->constant_bias_);
  swap(slopescale_bias_, other->slopescale_bias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthBias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlphaRejection::InitAsDefaultInstance() {
}
class AlphaRejection::_Internal {
 public:
};

AlphaRejection::AlphaRejection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.AlphaRejection)
}
AlphaRejection::AlphaRejection(const AlphaRejection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&function_, &from.function_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&function_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.AlphaRejection)
}

void AlphaRejection::SharedCtor() {
  ::memset(&function_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&function_)) + sizeof(value_));
}

AlphaRejection::~AlphaRejection() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.AlphaRejection)
  SharedDtor();
}

void AlphaRejection::SharedDtor() {
}

void AlphaRejection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlphaRejection& AlphaRejection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlphaRejection_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void AlphaRejection::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&function_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&function_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

const char* AlphaRejection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.CompareFunction function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_function(static_cast<::Tiny3D::Script::MaterialSystem::CompareFunction>(val));
        } else goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlphaRejection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CompareFunction function = 1;
  if (this->function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_function(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.AlphaRejection)
  return target;
}

size_t AlphaRejection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.CompareFunction function = 1;
  if (this->function() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_function());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlphaRejection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  GOOGLE_DCHECK_NE(&from, this);
  const AlphaRejection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlphaRejection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.AlphaRejection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.AlphaRejection)
    MergeFrom(*source);
  }
}

void AlphaRejection::MergeFrom(const AlphaRejection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.function() != 0) {
    _internal_set_function(from._internal_function());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void AlphaRejection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlphaRejection::CopyFrom(const AlphaRejection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.AlphaRejection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphaRejection::IsInitialized() const {
  return true;
}

void AlphaRejection::InternalSwap(AlphaRejection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(function_, other->function_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlphaRejection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fog::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Fog_default_instance_._instance.get_mutable()->color_ = const_cast< ::Tiny3D::Script::MaterialSystem::Color*>(
      ::Tiny3D::Script::MaterialSystem::Color::internal_default_instance());
}
class Fog::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Color& color(const Fog* msg);
};

const ::Tiny3D::Script::MaterialSystem::Color&
Fog::_Internal::color(const Fog* msg) {
  return *msg->color_;
}
Fog::Fog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Fog)
}
Fog::Fog(const Fog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::Tiny3D::Script::MaterialSystem::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&overridable_, &from.overridable_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&overridable_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Fog)
}

void Fog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fog_MaterialScriptObject_2eproto.base);
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&color_)) + sizeof(end_));
}

Fog::~Fog() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Fog)
  SharedDtor();
}

void Fog::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void Fog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fog& Fog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fog_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Fog::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Fog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  ::memset(&overridable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&overridable_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

const char* Fog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool overridable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          overridable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.FogType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::FogType>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float density = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Fog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool overridable = 1;
  if (this->overridable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_overridable(), target);
  }

  // .Tiny3D.Script.MaterialSystem.FogType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .Tiny3D.Script.MaterialSystem.Color color = 3;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::color(this), target, stream);
  }

  // float density = 4;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_density(), target);
  }

  // float start = 5;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_start(), target);
  }

  // float end = 6;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Fog)
  return target;
}

size_t Fog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Fog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Color color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // bool overridable = 1;
  if (this->overridable() != 0) {
    total_size += 1 + 1;
  }

  // .Tiny3D.Script.MaterialSystem.FogType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float density = 4;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    total_size += 1 + 4;
  }

  // float start = 5;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    total_size += 1 + 4;
  }

  // float end = 6;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.Fog)
  GOOGLE_DCHECK_NE(&from, this);
  const Fog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.Fog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.Fog)
    MergeFrom(*source);
  }
}

void Fog::MergeFrom(const Fog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Fog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color()) {
    _internal_mutable_color()->::Tiny3D::Script::MaterialSystem::Color::MergeFrom(from._internal_color());
  }
  if (from.overridable() != 0) {
    _internal_set_overridable(from._internal_overridable());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.density() <= 0 && from.density() >= 0)) {
    _internal_set_density(from._internal_density());
  }
  if (!(from.start() <= 0 && from.start() >= 0)) {
    _internal_set_start(from._internal_start());
  }
  if (!(from.end() <= 0 && from.end() >= 0)) {
    _internal_set_end(from._internal_end());
  }
}

void Fog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.Fog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fog::CopyFrom(const Fog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Fog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fog::IsInitialized() const {
  return true;
}

void Fog::InternalSwap(Fog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_, other->color_);
  swap(overridable_, other->overridable_);
  swap(type_, other->type_);
  swap(density_, other->density_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Iteration::InitAsDefaultInstance() {
}
class Iteration::_Internal {
 public:
};

Iteration::Iteration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Iteration)
}
Iteration::Iteration(const Iteration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_lights_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_lights_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Iteration)
}

void Iteration::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_lights_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_lights_));
}

Iteration::~Iteration() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Iteration)
  SharedDtor();
}

void Iteration::SharedDtor() {
}

void Iteration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Iteration& Iteration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Iteration_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Iteration::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Iteration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_lights_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_lights_));
  _internal_metadata_.Clear();
}

const char* Iteration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::MaterialSystem::IterationType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightType light_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_light_type(static_cast<::Tiny3D::Script::MaterialSystem::LightType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 num_lights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Iteration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Iteration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 number = 2;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number(), target);
  }

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 3;
  if (this->light_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_light_type(), target);
  }

  // uint32 num_lights = 4;
  if (this->num_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_lights(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Iteration)
  return target;
}

size_t Iteration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Iteration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 3;
  if (this->light_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_light_type());
  }

  // uint32 num_lights = 4;
  if (this->num_lights() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_lights());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Iteration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.Iteration)
  GOOGLE_DCHECK_NE(&from, this);
  const Iteration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Iteration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.Iteration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.Iteration)
    MergeFrom(*source);
  }
}

void Iteration::MergeFrom(const Iteration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Iteration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.light_type() != 0) {
    _internal_set_light_type(from._internal_light_type());
  }
  if (from.num_lights() != 0) {
    _internal_set_num_lights(from._internal_num_lights());
  }
}

void Iteration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.Iteration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Iteration::CopyFrom(const Iteration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Iteration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Iteration::IsInitialized() const {
  return true;
}

void Iteration::InternalSwap(Iteration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(number_, other->number_);
  swap(light_type_, other->light_type_);
  swap(num_lights_, other->num_lights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Iteration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointSizeAttenuation::InitAsDefaultInstance() {
}
class PointSizeAttenuation::_Internal {
 public:
};

PointSizeAttenuation::PointSizeAttenuation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
}
PointSizeAttenuation::PointSizeAttenuation(const PointSizeAttenuation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&quadratic_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(quadratic_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
}

void PointSizeAttenuation::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quadratic_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(quadratic_));
}

PointSizeAttenuation::~PointSizeAttenuation() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  SharedDtor();
}

void PointSizeAttenuation::SharedDtor() {
}

void PointSizeAttenuation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointSizeAttenuation& PointSizeAttenuation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointSizeAttenuation_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void PointSizeAttenuation::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quadratic_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(quadratic_));
  _internal_metadata_.Clear();
}

const char* PointSizeAttenuation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float constant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float linear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          linear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float quadratic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          quadratic_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointSizeAttenuation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // float constant = 2;
  if (!(this->constant() <= 0 && this->constant() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_constant(), target);
  }

  // float linear = 3;
  if (!(this->linear() <= 0 && this->linear() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_linear(), target);
  }

  // float quadratic = 4;
  if (!(this->quadratic() <= 0 && this->quadratic() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_quadratic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  return target;
}

size_t PointSizeAttenuation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // float constant = 2;
  if (!(this->constant() <= 0 && this->constant() >= 0)) {
    total_size += 1 + 4;
  }

  // float linear = 3;
  if (!(this->linear() <= 0 && this->linear() >= 0)) {
    total_size += 1 + 4;
  }

  // float quadratic = 4;
  if (!(this->quadratic() <= 0 && this->quadratic() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointSizeAttenuation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  GOOGLE_DCHECK_NE(&from, this);
  const PointSizeAttenuation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointSizeAttenuation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
    MergeFrom(*source);
  }
}

void PointSizeAttenuation::MergeFrom(const PointSizeAttenuation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (!(from.constant() <= 0 && from.constant() >= 0)) {
    _internal_set_constant(from._internal_constant());
  }
  if (!(from.linear() <= 0 && from.linear() >= 0)) {
    _internal_set_linear(from._internal_linear());
  }
  if (!(from.quadratic() <= 0 && from.quadratic() >= 0)) {
    _internal_set_quadratic(from._internal_quadratic());
  }
}

void PointSizeAttenuation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointSizeAttenuation::CopyFrom(const PointSizeAttenuation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointSizeAttenuation::IsInitialized() const {
  return true;
}

void PointSizeAttenuation::InternalSwap(PointSizeAttenuation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enable_, other->enable_);
  swap(constant_, other->constant_);
  swap(linear_, other->linear_);
  swap(quadratic_, other->quadratic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointSizeAttenuation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pass::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->ambient_ = const_cast< ::Tiny3D::Script::MaterialSystem::LightColor*>(
      ::Tiny3D::Script::MaterialSystem::LightColor::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->diffuse_ = const_cast< ::Tiny3D::Script::MaterialSystem::LightColor*>(
      ::Tiny3D::Script::MaterialSystem::LightColor::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->specular_ = const_cast< ::Tiny3D::Script::MaterialSystem::LightColor*>(
      ::Tiny3D::Script::MaterialSystem::LightColor::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->emissive_ = const_cast< ::Tiny3D::Script::MaterialSystem::LightColor*>(
      ::Tiny3D::Script::MaterialSystem::LightColor::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->scene_blend_ = const_cast< ::Tiny3D::Script::MaterialSystem::BlendScene*>(
      ::Tiny3D::Script::MaterialSystem::BlendScene::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->separate_blend_scene_ = const_cast< ::Tiny3D::Script::MaterialSystem::SeparateBlendScene*>(
      ::Tiny3D::Script::MaterialSystem::SeparateBlendScene::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->separate_scene_blend_op_ = const_cast< ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation*>(
      ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->depth_bias_ = const_cast< ::Tiny3D::Script::MaterialSystem::DepthBias*>(
      ::Tiny3D::Script::MaterialSystem::DepthBias::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->alpha_rejection_ = const_cast< ::Tiny3D::Script::MaterialSystem::AlphaRejection*>(
      ::Tiny3D::Script::MaterialSystem::AlphaRejection::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->fog_ = const_cast< ::Tiny3D::Script::MaterialSystem::Fog*>(
      ::Tiny3D::Script::MaterialSystem::Fog::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->iteration_ = const_cast< ::Tiny3D::Script::MaterialSystem::Iteration*>(
      ::Tiny3D::Script::MaterialSystem::Iteration::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->point_size_attenuation_ = const_cast< ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation*>(
      ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Pass_default_instance_._instance.get_mutable()->gpu_program_ref_ = const_cast< ::Tiny3D::Script::MaterialSystem::GPUProgramRef*>(
      ::Tiny3D::Script::MaterialSystem::GPUProgramRef::internal_default_instance());
}
class Pass::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::LightColor& ambient(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::LightColor& diffuse(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::LightColor& specular(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::LightColor& emissive(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::BlendScene& scene_blend(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene& separate_blend_scene(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation& separate_scene_blend_op(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::DepthBias& depth_bias(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::AlphaRejection& alpha_rejection(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Fog& fog(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::Iteration& iteration(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation& point_size_attenuation(const Pass* msg);
  static const ::Tiny3D::Script::MaterialSystem::GPUProgramRef& gpu_program_ref(const Pass* msg);
};

const ::Tiny3D::Script::MaterialSystem::LightColor&
Pass::_Internal::ambient(const Pass* msg) {
  return *msg->ambient_;
}
const ::Tiny3D::Script::MaterialSystem::LightColor&
Pass::_Internal::diffuse(const Pass* msg) {
  return *msg->diffuse_;
}
const ::Tiny3D::Script::MaterialSystem::LightColor&
Pass::_Internal::specular(const Pass* msg) {
  return *msg->specular_;
}
const ::Tiny3D::Script::MaterialSystem::LightColor&
Pass::_Internal::emissive(const Pass* msg) {
  return *msg->emissive_;
}
const ::Tiny3D::Script::MaterialSystem::BlendScene&
Pass::_Internal::scene_blend(const Pass* msg) {
  return *msg->scene_blend_;
}
const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene&
Pass::_Internal::separate_blend_scene(const Pass* msg) {
  return *msg->separate_blend_scene_;
}
const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation&
Pass::_Internal::separate_scene_blend_op(const Pass* msg) {
  return *msg->separate_scene_blend_op_;
}
const ::Tiny3D::Script::MaterialSystem::DepthBias&
Pass::_Internal::depth_bias(const Pass* msg) {
  return *msg->depth_bias_;
}
const ::Tiny3D::Script::MaterialSystem::AlphaRejection&
Pass::_Internal::alpha_rejection(const Pass* msg) {
  return *msg->alpha_rejection_;
}
const ::Tiny3D::Script::MaterialSystem::Fog&
Pass::_Internal::fog(const Pass* msg) {
  return *msg->fog_;
}
const ::Tiny3D::Script::MaterialSystem::Iteration&
Pass::_Internal::iteration(const Pass* msg) {
  return *msg->iteration_;
}
const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation&
Pass::_Internal::point_size_attenuation(const Pass* msg) {
  return *msg->point_size_attenuation_;
}
const ::Tiny3D::Script::MaterialSystem::GPUProgramRef&
Pass::_Internal::gpu_program_ref(const Pass* msg) {
  return *msg->gpu_program_ref_;
}
Pass::Pass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Pass)
}
Pass::Pass(const Pass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ambient()) {
    ambient_ = new ::Tiny3D::Script::MaterialSystem::LightColor(*from.ambient_);
  } else {
    ambient_ = nullptr;
  }
  if (from._internal_has_diffuse()) {
    diffuse_ = new ::Tiny3D::Script::MaterialSystem::LightColor(*from.diffuse_);
  } else {
    diffuse_ = nullptr;
  }
  if (from._internal_has_specular()) {
    specular_ = new ::Tiny3D::Script::MaterialSystem::LightColor(*from.specular_);
  } else {
    specular_ = nullptr;
  }
  if (from._internal_has_emissive()) {
    emissive_ = new ::Tiny3D::Script::MaterialSystem::LightColor(*from.emissive_);
  } else {
    emissive_ = nullptr;
  }
  if (from._internal_has_scene_blend()) {
    scene_blend_ = new ::Tiny3D::Script::MaterialSystem::BlendScene(*from.scene_blend_);
  } else {
    scene_blend_ = nullptr;
  }
  if (from._internal_has_separate_blend_scene()) {
    separate_blend_scene_ = new ::Tiny3D::Script::MaterialSystem::SeparateBlendScene(*from.separate_blend_scene_);
  } else {
    separate_blend_scene_ = nullptr;
  }
  if (from._internal_has_separate_scene_blend_op()) {
    separate_scene_blend_op_ = new ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation(*from.separate_scene_blend_op_);
  } else {
    separate_scene_blend_op_ = nullptr;
  }
  if (from._internal_has_depth_bias()) {
    depth_bias_ = new ::Tiny3D::Script::MaterialSystem::DepthBias(*from.depth_bias_);
  } else {
    depth_bias_ = nullptr;
  }
  if (from._internal_has_alpha_rejection()) {
    alpha_rejection_ = new ::Tiny3D::Script::MaterialSystem::AlphaRejection(*from.alpha_rejection_);
  } else {
    alpha_rejection_ = nullptr;
  }
  if (from._internal_has_fog()) {
    fog_ = new ::Tiny3D::Script::MaterialSystem::Fog(*from.fog_);
  } else {
    fog_ = nullptr;
  }
  if (from._internal_has_iteration()) {
    iteration_ = new ::Tiny3D::Script::MaterialSystem::Iteration(*from.iteration_);
  } else {
    iteration_ = nullptr;
  }
  if (from._internal_has_point_size_attenuation()) {
    point_size_attenuation_ = new ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation(*from.point_size_attenuation_);
  } else {
    point_size_attenuation_ = nullptr;
  }
  if (from._internal_has_gpu_program_ref()) {
    gpu_program_ref_ = new ::Tiny3D::Script::MaterialSystem::GPUProgramRef(*from.gpu_program_ref_);
  } else {
    gpu_program_ref_ = nullptr;
  }
  ::memcpy(&shininess_, &from.shininess_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_size_max_) -
    reinterpret_cast<char*>(&shininess_)) + sizeof(point_size_max_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Pass)
}

void Pass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pass_MaterialScriptObject_2eproto.base);
  ::memset(&ambient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_size_max_) -
      reinterpret_cast<char*>(&ambient_)) + sizeof(point_size_max_));
}

Pass::~Pass() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Pass)
  SharedDtor();
}

void Pass::SharedDtor() {
  if (this != internal_default_instance()) delete ambient_;
  if (this != internal_default_instance()) delete diffuse_;
  if (this != internal_default_instance()) delete specular_;
  if (this != internal_default_instance()) delete emissive_;
  if (this != internal_default_instance()) delete scene_blend_;
  if (this != internal_default_instance()) delete separate_blend_scene_;
  if (this != internal_default_instance()) delete separate_scene_blend_op_;
  if (this != internal_default_instance()) delete depth_bias_;
  if (this != internal_default_instance()) delete alpha_rejection_;
  if (this != internal_default_instance()) delete fog_;
  if (this != internal_default_instance()) delete iteration_;
  if (this != internal_default_instance()) delete point_size_attenuation_;
  if (this != internal_default_instance()) delete gpu_program_ref_;
}

void Pass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pass& Pass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pass_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Pass::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Pass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ambient_ != nullptr) {
    delete ambient_;
  }
  ambient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && diffuse_ != nullptr) {
    delete diffuse_;
  }
  diffuse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && specular_ != nullptr) {
    delete specular_;
  }
  specular_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && emissive_ != nullptr) {
    delete emissive_;
  }
  emissive_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scene_blend_ != nullptr) {
    delete scene_blend_;
  }
  scene_blend_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && separate_blend_scene_ != nullptr) {
    delete separate_blend_scene_;
  }
  separate_blend_scene_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && separate_scene_blend_op_ != nullptr) {
    delete separate_scene_blend_op_;
  }
  separate_scene_blend_op_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && depth_bias_ != nullptr) {
    delete depth_bias_;
  }
  depth_bias_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && alpha_rejection_ != nullptr) {
    delete alpha_rejection_;
  }
  alpha_rejection_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fog_ != nullptr) {
    delete fog_;
  }
  fog_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && iteration_ != nullptr) {
    delete iteration_;
  }
  iteration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_size_attenuation_ != nullptr) {
    delete point_size_attenuation_;
  }
  point_size_attenuation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gpu_program_ref_ != nullptr) {
    delete gpu_program_ref_;
  }
  gpu_program_ref_ = nullptr;
  ::memset(&shininess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_size_max_) -
      reinterpret_cast<char*>(&shininess_)) + sizeof(point_size_max_));
  _internal_metadata_.Clear();
}

const char* Pass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.LightColor ambient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightColor diffuse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightColor specular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_specular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LightColor emissive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_emissive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float shininess = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          shininess_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendScene scene_blend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_scene_blend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.SeparateBlendScene separate_blend_scene = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_separate_blend_scene(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.BlendOperation scene_blend_op = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_scene_blend_op(static_cast<::Tiny3D::Script::MaterialSystem::BlendOperation>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation separate_scene_blend_op = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_separate_scene_blend_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool depth_check = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          depth_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool depth_write = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          depth_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CompareFunction depth_func = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_depth_func(static_cast<::Tiny3D::Script::MaterialSystem::CompareFunction>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.DepthBias depth_bias = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float iteration_depth_bias = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          iteration_depth_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.AlphaRejection alpha_rejection = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_alpha_rejection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool alpha_to_coverage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          alpha_to_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool light_scissor = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          light_scissor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool light_clip_planes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          light_clip_planes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.IlluminationStage illumination_stage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_illumination_stage(static_cast<::Tiny3D::Script::MaterialSystem::IlluminationStage>(val));
        } else goto handle_unusual;
        continue;
      // bool normailize_normals = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          normailize_normals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TransparentSorting transparent_sorting = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_transparent_sorting(static_cast<::Tiny3D::Script::MaterialSystem::TransparentSorting>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CullHardware cull_hardware = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cull_hardware(static_cast<::Tiny3D::Script::MaterialSystem::CullHardware>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.CullSoftware cull_software = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cull_software(static_cast<::Tiny3D::Script::MaterialSystem::CullSoftware>(val));
        } else goto handle_unusual;
        continue;
      // bool lighting = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          lighting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.ShadingMode shading = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_shading(static_cast<::Tiny3D::Script::MaterialSystem::ShadingMode>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.PolygonMode polygon_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_polygon_mode(static_cast<::Tiny3D::Script::MaterialSystem::PolygonMode>(val));
        } else goto handle_unusual;
        continue;
      // bool polygon_mode_overrideable = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          polygon_mode_overrideable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Fog fog = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_fog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool color_write = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          color_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_lights = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          max_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_light = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          start_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.Iteration iteration = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float point_size = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          point_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool point_sprites = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          point_sprites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.PointSizeAttenuation point_size_attenuation = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_size_attenuation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float point_size_min = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          point_size_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float point_size_max = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          point_size_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.GPUProgramRef gpu_program_ref = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_program_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Pass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.LightColor ambient = 1;
  if (this->has_ambient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ambient(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor diffuse = 2;
  if (this->has_diffuse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::diffuse(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor specular = 3;
  if (this->has_specular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::specular(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor emissive = 4;
  if (this->has_emissive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::emissive(this), target, stream);
  }

  // float shininess = 5;
  if (!(this->shininess() <= 0 && this->shininess() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_shininess(), target);
  }

  // .Tiny3D.Script.MaterialSystem.BlendScene scene_blend = 6;
  if (this->has_scene_blend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::scene_blend(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.SeparateBlendScene separate_blend_scene = 7;
  if (this->has_separate_blend_scene()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::separate_blend_scene(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.BlendOperation scene_blend_op = 8;
  if (this->scene_blend_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_scene_blend_op(), target);
  }

  // .Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation separate_scene_blend_op = 9;
  if (this->has_separate_scene_blend_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::separate_scene_blend_op(this), target, stream);
  }

  // bool depth_check = 10;
  if (this->depth_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_depth_check(), target);
  }

  // bool depth_write = 11;
  if (this->depth_write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_depth_write(), target);
  }

  // .Tiny3D.Script.MaterialSystem.CompareFunction depth_func = 12;
  if (this->depth_func() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_depth_func(), target);
  }

  // .Tiny3D.Script.MaterialSystem.DepthBias depth_bias = 13;
  if (this->has_depth_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::depth_bias(this), target, stream);
  }

  // float iteration_depth_bias = 14;
  if (!(this->iteration_depth_bias() <= 0 && this->iteration_depth_bias() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_iteration_depth_bias(), target);
  }

  // .Tiny3D.Script.MaterialSystem.AlphaRejection alpha_rejection = 15;
  if (this->has_alpha_rejection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::alpha_rejection(this), target, stream);
  }

  // bool alpha_to_coverage = 16;
  if (this->alpha_to_coverage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_alpha_to_coverage(), target);
  }

  // bool light_scissor = 17;
  if (this->light_scissor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_light_scissor(), target);
  }

  // bool light_clip_planes = 18;
  if (this->light_clip_planes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_light_clip_planes(), target);
  }

  // .Tiny3D.Script.MaterialSystem.IlluminationStage illumination_stage = 19;
  if (this->illumination_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_illumination_stage(), target);
  }

  // bool normailize_normals = 20;
  if (this->normailize_normals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_normailize_normals(), target);
  }

  // .Tiny3D.Script.MaterialSystem.TransparentSorting transparent_sorting = 21;
  if (this->transparent_sorting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_transparent_sorting(), target);
  }

  // .Tiny3D.Script.MaterialSystem.CullHardware cull_hardware = 22;
  if (this->cull_hardware() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_cull_hardware(), target);
  }

  // .Tiny3D.Script.MaterialSystem.CullSoftware cull_software = 23;
  if (this->cull_software() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_cull_software(), target);
  }

  // bool lighting = 24;
  if (this->lighting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_lighting(), target);
  }

  // .Tiny3D.Script.MaterialSystem.ShadingMode shading = 25;
  if (this->shading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_shading(), target);
  }

  // .Tiny3D.Script.MaterialSystem.PolygonMode polygon_mode = 26;
  if (this->polygon_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_polygon_mode(), target);
  }

  // bool polygon_mode_overrideable = 27;
  if (this->polygon_mode_overrideable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_polygon_mode_overrideable(), target);
  }

  // .Tiny3D.Script.MaterialSystem.Fog fog = 28;
  if (this->has_fog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::fog(this), target, stream);
  }

  // bool color_write = 29;
  if (this->color_write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_color_write(), target);
  }

  // uint32 max_lights = 30;
  if (this->max_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_max_lights(), target);
  }

  // uint32 start_light = 31;
  if (this->start_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_start_light(), target);
  }

  // .Tiny3D.Script.MaterialSystem.Iteration iteration = 32;
  if (this->has_iteration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::iteration(this), target, stream);
  }

  // float point_size = 33;
  if (!(this->point_size() <= 0 && this->point_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_point_size(), target);
  }

  // bool point_sprites = 34;
  if (this->point_sprites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_point_sprites(), target);
  }

  // .Tiny3D.Script.MaterialSystem.PointSizeAttenuation point_size_attenuation = 35;
  if (this->has_point_size_attenuation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::point_size_attenuation(this), target, stream);
  }

  // float point_size_min = 36;
  if (!(this->point_size_min() <= 0 && this->point_size_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_point_size_min(), target);
  }

  // float point_size_max = 37;
  if (!(this->point_size_max() <= 0 && this->point_size_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_point_size_max(), target);
  }

  // .Tiny3D.Script.MaterialSystem.GPUProgramRef gpu_program_ref = 38;
  if (this->has_gpu_program_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::gpu_program_ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Pass)
  return target;
}

size_t Pass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Pass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.LightColor ambient = 1;
  if (this->has_ambient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambient_);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor diffuse = 2;
  if (this->has_diffuse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diffuse_);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor specular = 3;
  if (this->has_specular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specular_);
  }

  // .Tiny3D.Script.MaterialSystem.LightColor emissive = 4;
  if (this->has_emissive()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emissive_);
  }

  // .Tiny3D.Script.MaterialSystem.BlendScene scene_blend = 6;
  if (this->has_scene_blend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scene_blend_);
  }

  // .Tiny3D.Script.MaterialSystem.SeparateBlendScene separate_blend_scene = 7;
  if (this->has_separate_blend_scene()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *separate_blend_scene_);
  }

  // .Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation separate_scene_blend_op = 9;
  if (this->has_separate_scene_blend_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *separate_scene_blend_op_);
  }

  // .Tiny3D.Script.MaterialSystem.DepthBias depth_bias = 13;
  if (this->has_depth_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_bias_);
  }

  // .Tiny3D.Script.MaterialSystem.AlphaRejection alpha_rejection = 15;
  if (this->has_alpha_rejection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alpha_rejection_);
  }

  // .Tiny3D.Script.MaterialSystem.Fog fog = 28;
  if (this->has_fog()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fog_);
  }

  // .Tiny3D.Script.MaterialSystem.Iteration iteration = 32;
  if (this->has_iteration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iteration_);
  }

  // .Tiny3D.Script.MaterialSystem.PointSizeAttenuation point_size_attenuation = 35;
  if (this->has_point_size_attenuation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_size_attenuation_);
  }

  // .Tiny3D.Script.MaterialSystem.GPUProgramRef gpu_program_ref = 38;
  if (this->has_gpu_program_ref()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpu_program_ref_);
  }

  // float shininess = 5;
  if (!(this->shininess() <= 0 && this->shininess() >= 0)) {
    total_size += 1 + 4;
  }

  // .Tiny3D.Script.MaterialSystem.BlendOperation scene_blend_op = 8;
  if (this->scene_blend_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scene_blend_op());
  }

  // .Tiny3D.Script.MaterialSystem.CompareFunction depth_func = 12;
  if (this->depth_func() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_depth_func());
  }

  // bool depth_check = 10;
  if (this->depth_check() != 0) {
    total_size += 1 + 1;
  }

  // bool depth_write = 11;
  if (this->depth_write() != 0) {
    total_size += 1 + 1;
  }

  // bool alpha_to_coverage = 16;
  if (this->alpha_to_coverage() != 0) {
    total_size += 2 + 1;
  }

  // bool light_scissor = 17;
  if (this->light_scissor() != 0) {
    total_size += 2 + 1;
  }

  // float iteration_depth_bias = 14;
  if (!(this->iteration_depth_bias() <= 0 && this->iteration_depth_bias() >= 0)) {
    total_size += 1 + 4;
  }

  // .Tiny3D.Script.MaterialSystem.IlluminationStage illumination_stage = 19;
  if (this->illumination_stage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_illumination_stage());
  }

  // .Tiny3D.Script.MaterialSystem.TransparentSorting transparent_sorting = 21;
  if (this->transparent_sorting() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transparent_sorting());
  }

  // .Tiny3D.Script.MaterialSystem.CullHardware cull_hardware = 22;
  if (this->cull_hardware() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cull_hardware());
  }

  // bool light_clip_planes = 18;
  if (this->light_clip_planes() != 0) {
    total_size += 2 + 1;
  }

  // bool normailize_normals = 20;
  if (this->normailize_normals() != 0) {
    total_size += 2 + 1;
  }

  // bool lighting = 24;
  if (this->lighting() != 0) {
    total_size += 2 + 1;
  }

  // bool polygon_mode_overrideable = 27;
  if (this->polygon_mode_overrideable() != 0) {
    total_size += 2 + 1;
  }

  // .Tiny3D.Script.MaterialSystem.CullSoftware cull_software = 23;
  if (this->cull_software() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cull_software());
  }

  // .Tiny3D.Script.MaterialSystem.ShadingMode shading = 25;
  if (this->shading() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shading());
  }

  // .Tiny3D.Script.MaterialSystem.PolygonMode polygon_mode = 26;
  if (this->polygon_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_polygon_mode());
  }

  // uint32 max_lights = 30;
  if (this->max_lights() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_lights());
  }

  // uint32 start_light = 31;
  if (this->start_light() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_light());
  }

  // bool color_write = 29;
  if (this->color_write() != 0) {
    total_size += 2 + 1;
  }

  // bool point_sprites = 34;
  if (this->point_sprites() != 0) {
    total_size += 2 + 1;
  }

  // float point_size = 33;
  if (!(this->point_size() <= 0 && this->point_size() >= 0)) {
    total_size += 2 + 4;
  }

  // float point_size_min = 36;
  if (!(this->point_size_min() <= 0 && this->point_size_min() >= 0)) {
    total_size += 2 + 4;
  }

  // float point_size_max = 37;
  if (!(this->point_size_max() <= 0 && this->point_size_max() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.Pass)
  GOOGLE_DCHECK_NE(&from, this);
  const Pass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.Pass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.Pass)
    MergeFrom(*source);
  }
}

void Pass::MergeFrom(const Pass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Pass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ambient()) {
    _internal_mutable_ambient()->::Tiny3D::Script::MaterialSystem::LightColor::MergeFrom(from._internal_ambient());
  }
  if (from.has_diffuse()) {
    _internal_mutable_diffuse()->::Tiny3D::Script::MaterialSystem::LightColor::MergeFrom(from._internal_diffuse());
  }
  if (from.has_specular()) {
    _internal_mutable_specular()->::Tiny3D::Script::MaterialSystem::LightColor::MergeFrom(from._internal_specular());
  }
  if (from.has_emissive()) {
    _internal_mutable_emissive()->::Tiny3D::Script::MaterialSystem::LightColor::MergeFrom(from._internal_emissive());
  }
  if (from.has_scene_blend()) {
    _internal_mutable_scene_blend()->::Tiny3D::Script::MaterialSystem::BlendScene::MergeFrom(from._internal_scene_blend());
  }
  if (from.has_separate_blend_scene()) {
    _internal_mutable_separate_blend_scene()->::Tiny3D::Script::MaterialSystem::SeparateBlendScene::MergeFrom(from._internal_separate_blend_scene());
  }
  if (from.has_separate_scene_blend_op()) {
    _internal_mutable_separate_scene_blend_op()->::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation::MergeFrom(from._internal_separate_scene_blend_op());
  }
  if (from.has_depth_bias()) {
    _internal_mutable_depth_bias()->::Tiny3D::Script::MaterialSystem::DepthBias::MergeFrom(from._internal_depth_bias());
  }
  if (from.has_alpha_rejection()) {
    _internal_mutable_alpha_rejection()->::Tiny3D::Script::MaterialSystem::AlphaRejection::MergeFrom(from._internal_alpha_rejection());
  }
  if (from.has_fog()) {
    _internal_mutable_fog()->::Tiny3D::Script::MaterialSystem::Fog::MergeFrom(from._internal_fog());
  }
  if (from.has_iteration()) {
    _internal_mutable_iteration()->::Tiny3D::Script::MaterialSystem::Iteration::MergeFrom(from._internal_iteration());
  }
  if (from.has_point_size_attenuation()) {
    _internal_mutable_point_size_attenuation()->::Tiny3D::Script::MaterialSystem::PointSizeAttenuation::MergeFrom(from._internal_point_size_attenuation());
  }
  if (from.has_gpu_program_ref()) {
    _internal_mutable_gpu_program_ref()->::Tiny3D::Script::MaterialSystem::GPUProgramRef::MergeFrom(from._internal_gpu_program_ref());
  }
  if (!(from.shininess() <= 0 && from.shininess() >= 0)) {
    _internal_set_shininess(from._internal_shininess());
  }
  if (from.scene_blend_op() != 0) {
    _internal_set_scene_blend_op(from._internal_scene_blend_op());
  }
  if (from.depth_func() != 0) {
    _internal_set_depth_func(from._internal_depth_func());
  }
  if (from.depth_check() != 0) {
    _internal_set_depth_check(from._internal_depth_check());
  }
  if (from.depth_write() != 0) {
    _internal_set_depth_write(from._internal_depth_write());
  }
  if (from.alpha_to_coverage() != 0) {
    _internal_set_alpha_to_coverage(from._internal_alpha_to_coverage());
  }
  if (from.light_scissor() != 0) {
    _internal_set_light_scissor(from._internal_light_scissor());
  }
  if (!(from.iteration_depth_bias() <= 0 && from.iteration_depth_bias() >= 0)) {
    _internal_set_iteration_depth_bias(from._internal_iteration_depth_bias());
  }
  if (from.illumination_stage() != 0) {
    _internal_set_illumination_stage(from._internal_illumination_stage());
  }
  if (from.transparent_sorting() != 0) {
    _internal_set_transparent_sorting(from._internal_transparent_sorting());
  }
  if (from.cull_hardware() != 0) {
    _internal_set_cull_hardware(from._internal_cull_hardware());
  }
  if (from.light_clip_planes() != 0) {
    _internal_set_light_clip_planes(from._internal_light_clip_planes());
  }
  if (from.normailize_normals() != 0) {
    _internal_set_normailize_normals(from._internal_normailize_normals());
  }
  if (from.lighting() != 0) {
    _internal_set_lighting(from._internal_lighting());
  }
  if (from.polygon_mode_overrideable() != 0) {
    _internal_set_polygon_mode_overrideable(from._internal_polygon_mode_overrideable());
  }
  if (from.cull_software() != 0) {
    _internal_set_cull_software(from._internal_cull_software());
  }
  if (from.shading() != 0) {
    _internal_set_shading(from._internal_shading());
  }
  if (from.polygon_mode() != 0) {
    _internal_set_polygon_mode(from._internal_polygon_mode());
  }
  if (from.max_lights() != 0) {
    _internal_set_max_lights(from._internal_max_lights());
  }
  if (from.start_light() != 0) {
    _internal_set_start_light(from._internal_start_light());
  }
  if (from.color_write() != 0) {
    _internal_set_color_write(from._internal_color_write());
  }
  if (from.point_sprites() != 0) {
    _internal_set_point_sprites(from._internal_point_sprites());
  }
  if (!(from.point_size() <= 0 && from.point_size() >= 0)) {
    _internal_set_point_size(from._internal_point_size());
  }
  if (!(from.point_size_min() <= 0 && from.point_size_min() >= 0)) {
    _internal_set_point_size_min(from._internal_point_size_min());
  }
  if (!(from.point_size_max() <= 0 && from.point_size_max() >= 0)) {
    _internal_set_point_size_max(from._internal_point_size_max());
  }
}

void Pass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.Pass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pass::CopyFrom(const Pass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Pass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pass::IsInitialized() const {
  return true;
}

void Pass::InternalSwap(Pass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ambient_, other->ambient_);
  swap(diffuse_, other->diffuse_);
  swap(specular_, other->specular_);
  swap(emissive_, other->emissive_);
  swap(scene_blend_, other->scene_blend_);
  swap(separate_blend_scene_, other->separate_blend_scene_);
  swap(separate_scene_blend_op_, other->separate_scene_blend_op_);
  swap(depth_bias_, other->depth_bias_);
  swap(alpha_rejection_, other->alpha_rejection_);
  swap(fog_, other->fog_);
  swap(iteration_, other->iteration_);
  swap(point_size_attenuation_, other->point_size_attenuation_);
  swap(gpu_program_ref_, other->gpu_program_ref_);
  swap(shininess_, other->shininess_);
  swap(scene_blend_op_, other->scene_blend_op_);
  swap(depth_func_, other->depth_func_);
  swap(depth_check_, other->depth_check_);
  swap(depth_write_, other->depth_write_);
  swap(alpha_to_coverage_, other->alpha_to_coverage_);
  swap(light_scissor_, other->light_scissor_);
  swap(iteration_depth_bias_, other->iteration_depth_bias_);
  swap(illumination_stage_, other->illumination_stage_);
  swap(transparent_sorting_, other->transparent_sorting_);
  swap(cull_hardware_, other->cull_hardware_);
  swap(light_clip_planes_, other->light_clip_planes_);
  swap(normailize_normals_, other->normailize_normals_);
  swap(lighting_, other->lighting_);
  swap(polygon_mode_overrideable_, other->polygon_mode_overrideable_);
  swap(cull_software_, other->cull_software_);
  swap(shading_, other->shading_);
  swap(polygon_mode_, other->polygon_mode_);
  swap(max_lights_, other->max_lights_);
  swap(start_light_, other->start_light_);
  swap(color_write_, other->color_write_);
  swap(point_sprites_, other->point_sprites_);
  swap(point_size_, other->point_size_);
  swap(point_size_min_, other->point_size_min_);
  swap(point_size_max_, other->point_size_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPUVendorRule::InitAsDefaultInstance() {
}
class GPUVendorRule::_Internal {
 public:
};

GPUVendorRule::GPUVendorRule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUVendorRule)
}
GPUVendorRule::GPUVendorRule(const GPUVendorRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_name().empty()) {
    vendor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
  }
  rule_ = from.rule_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUVendorRule)
}

void GPUVendorRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUVendorRule_MaterialScriptObject_2eproto.base);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_ = 0;
}

GPUVendorRule::~GPUVendorRule() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  SharedDtor();
}

void GPUVendorRule::SharedDtor() {
  vendor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPUVendorRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUVendorRule& GPUVendorRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUVendorRule_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUVendorRule::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_ = 0;
  _internal_metadata_.Clear();
}

const char* GPUVendorRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_rule(static_cast<::Tiny3D::Script::MaterialSystem::GPURuleType>(val));
        } else goto handle_unusual;
        continue;
      // string vendor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vendor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUVendorRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  if (this->rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rule(), target);
  }

  // string vendor_name = 2;
  if (this->vendor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_name().data(), static_cast<int>(this->_internal_vendor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  return target;
}

size_t GPUVendorRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor_name = 2;
  if (this->vendor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_name());
  }

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rule());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUVendorRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUVendorRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPUVendorRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.GPUVendorRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.GPUVendorRule)
    MergeFrom(*source);
  }
}

void GPUVendorRule::MergeFrom(const GPUVendorRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vendor_name().size() > 0) {

    vendor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
  }
  if (from.rule() != 0) {
    _internal_set_rule(from._internal_rule());
  }
}

void GPUVendorRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUVendorRule::CopyFrom(const GPUVendorRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUVendorRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUVendorRule::IsInitialized() const {
  return true;
}

void GPUVendorRule::InternalSwap(GPUVendorRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vendor_name_.Swap(&other->vendor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rule_, other->rule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUVendorRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPUDeviceRule::InitAsDefaultInstance() {
}
class GPUDeviceRule::_Internal {
 public:
};

GPUDeviceRule::GPUDeviceRule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
}
GPUDeviceRule::GPUDeviceRule(const GPUDeviceRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_pattern().empty()) {
    device_pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_pattern_);
  }
  ::memcpy(&rule_, &from.rule_,
    static_cast<size_t>(reinterpret_cast<char*>(&case_sensitive_) -
    reinterpret_cast<char*>(&rule_)) + sizeof(case_sensitive_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
}

void GPUDeviceRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUDeviceRule_MaterialScriptObject_2eproto.base);
  device_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case_sensitive_) -
      reinterpret_cast<char*>(&rule_)) + sizeof(case_sensitive_));
}

GPUDeviceRule::~GPUDeviceRule() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  SharedDtor();
}

void GPUDeviceRule::SharedDtor() {
  device_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPUDeviceRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUDeviceRule& GPUDeviceRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUDeviceRule_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void GPUDeviceRule::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case_sensitive_) -
      reinterpret_cast<char*>(&rule_)) + sizeof(case_sensitive_));
  _internal_metadata_.Clear();
}

const char* GPUDeviceRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_rule(static_cast<::Tiny3D::Script::MaterialSystem::GPURuleType>(val));
        } else goto handle_unusual;
        continue;
      // string device_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool case_sensitive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          case_sensitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUDeviceRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  if (this->rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rule(), target);
  }

  // string device_pattern = 2;
  if (this->device_pattern().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_pattern().data(), static_cast<int>(this->_internal_device_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_pattern(), target);
  }

  // bool case_sensitive = 3;
  if (this->case_sensitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_case_sensitive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  return target;
}

size_t GPUDeviceRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_pattern = 2;
  if (this->device_pattern().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_pattern());
  }

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rule());
  }

  // bool case_sensitive = 3;
  if (this->case_sensitive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUDeviceRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUDeviceRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPUDeviceRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
    MergeFrom(*source);
  }
}

void GPUDeviceRule::MergeFrom(const GPUDeviceRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_pattern().size() > 0) {

    device_pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_pattern_);
  }
  if (from.rule() != 0) {
    _internal_set_rule(from._internal_rule());
  }
  if (from.case_sensitive() != 0) {
    _internal_set_case_sensitive(from._internal_case_sensitive());
  }
}

void GPUDeviceRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUDeviceRule::CopyFrom(const GPUDeviceRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUDeviceRule::IsInitialized() const {
  return true;
}

void GPUDeviceRule::InternalSwap(GPUDeviceRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_pattern_.Swap(&other->device_pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rule_, other->rule_);
  swap(case_sensitive_, other->case_sensitive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUDeviceRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Technique::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->gpu_vendor_rule_ = const_cast< ::Tiny3D::Script::MaterialSystem::GPUVendorRule*>(
      ::Tiny3D::Script::MaterialSystem::GPUVendorRule::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Technique_default_instance_._instance.get_mutable()->gpu_device_rule_ = const_cast< ::Tiny3D::Script::MaterialSystem::GPUDeviceRule*>(
      ::Tiny3D::Script::MaterialSystem::GPUDeviceRule::internal_default_instance());
}
class Technique::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::GPUVendorRule& gpu_vendor_rule(const Technique* msg);
  static const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule& gpu_device_rule(const Technique* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
Technique::_Internal::header(const Technique* msg) {
  return *msg->header_;
}
const ::Tiny3D::Script::MaterialSystem::GPUVendorRule&
Technique::_Internal::gpu_vendor_rule(const Technique* msg) {
  return *msg->gpu_vendor_rule_;
}
const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule&
Technique::_Internal::gpu_device_rule(const Technique* msg) {
  return *msg->gpu_device_rule_;
}
Technique::Technique()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Technique)
}
Technique::Technique(const Technique& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scheme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scheme().empty()) {
    scheme_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scheme_);
  }
  shadow_caster_material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shadow_caster_material().empty()) {
    shadow_caster_material_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shadow_caster_material_);
  }
  shadow_receiver_material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shadow_receiver_material().empty()) {
    shadow_receiver_material_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shadow_receiver_material_);
  }
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_gpu_vendor_rule()) {
    gpu_vendor_rule_ = new ::Tiny3D::Script::MaterialSystem::GPUVendorRule(*from.gpu_vendor_rule_);
  } else {
    gpu_vendor_rule_ = nullptr;
  }
  if (from._internal_has_gpu_device_rule()) {
    gpu_device_rule_ = new ::Tiny3D::Script::MaterialSystem::GPUDeviceRule(*from.gpu_device_rule_);
  } else {
    gpu_device_rule_ = nullptr;
  }
  ::memcpy(&render_queue_, &from.render_queue_,
    static_cast<size_t>(reinterpret_cast<char*>(&lod_index_) -
    reinterpret_cast<char*>(&render_queue_)) + sizeof(lod_index_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Technique)
}

void Technique::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Technique_MaterialScriptObject_2eproto.base);
  scheme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shadow_caster_material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shadow_receiver_material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lod_index_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lod_index_));
}

Technique::~Technique() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Technique)
  SharedDtor();
}

void Technique::SharedDtor() {
  scheme_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shadow_caster_material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shadow_receiver_material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete gpu_vendor_rule_;
  if (this != internal_default_instance()) delete gpu_device_rule_;
}

void Technique::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Technique& Technique::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Technique_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Technique::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Technique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheme_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shadow_caster_material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shadow_receiver_material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gpu_vendor_rule_ != nullptr) {
    delete gpu_vendor_rule_;
  }
  gpu_vendor_rule_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gpu_device_rule_ != nullptr) {
    delete gpu_device_rule_;
  }
  gpu_device_rule_ = nullptr;
  ::memset(&render_queue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lod_index_) -
      reinterpret_cast<char*>(&render_queue_)) + sizeof(lod_index_));
  _internal_metadata_.Clear();
}

const char* Technique::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 render_queue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          render_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lod_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lod_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scheme = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scheme();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.Technique.scheme"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shadow_caster_material = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_shadow_caster_material();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shadow_receiver_material = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_shadow_receiver_material();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.GPUVendorRule gpu_vendor_rule = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_vendor_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.GPUDeviceRule gpu_device_rule = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_device_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Technique::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Technique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 render_queue = 2;
  if (this->render_queue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_render_queue(), target);
  }

  // uint32 lod_index = 3;
  if (this->lod_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lod_index(), target);
  }

  // string scheme = 4;
  if (this->scheme().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scheme().data(), static_cast<int>(this->_internal_scheme().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Technique.scheme");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scheme(), target);
  }

  // string shadow_caster_material = 5;
  if (this->shadow_caster_material().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shadow_caster_material().data(), static_cast<int>(this->_internal_shadow_caster_material().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_shadow_caster_material(), target);
  }

  // string shadow_receiver_material = 6;
  if (this->shadow_receiver_material().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shadow_receiver_material().data(), static_cast<int>(this->_internal_shadow_receiver_material().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_shadow_receiver_material(), target);
  }

  // .Tiny3D.Script.MaterialSystem.GPUVendorRule gpu_vendor_rule = 7;
  if (this->has_gpu_vendor_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gpu_vendor_rule(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.GPUDeviceRule gpu_device_rule = 8;
  if (this->has_gpu_device_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gpu_device_rule(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Technique)
  return target;
}

size_t Technique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Technique)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scheme = 4;
  if (this->scheme().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheme());
  }

  // string shadow_caster_material = 5;
  if (this->shadow_caster_material().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shadow_caster_material());
  }

  // string shadow_receiver_material = 6;
  if (this->shadow_receiver_material().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shadow_receiver_material());
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Tiny3D.Script.MaterialSystem.GPUVendorRule gpu_vendor_rule = 7;
  if (this->has_gpu_vendor_rule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpu_vendor_rule_);
  }

  // .Tiny3D.Script.MaterialSystem.GPUDeviceRule gpu_device_rule = 8;
  if (this->has_gpu_device_rule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpu_device_rule_);
  }

  // uint32 render_queue = 2;
  if (this->render_queue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_render_queue());
  }

  // uint32 lod_index = 3;
  if (this->lod_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lod_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Technique::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.Technique)
  GOOGLE_DCHECK_NE(&from, this);
  const Technique* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Technique>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.Technique)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.Technique)
    MergeFrom(*source);
  }
}

void Technique::MergeFrom(const Technique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Technique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scheme().size() > 0) {

    scheme_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scheme_);
  }
  if (from.shadow_caster_material().size() > 0) {

    shadow_caster_material_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shadow_caster_material_);
  }
  if (from.shadow_receiver_material().size() > 0) {

    shadow_receiver_material_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shadow_receiver_material_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.has_gpu_vendor_rule()) {
    _internal_mutable_gpu_vendor_rule()->::Tiny3D::Script::MaterialSystem::GPUVendorRule::MergeFrom(from._internal_gpu_vendor_rule());
  }
  if (from.has_gpu_device_rule()) {
    _internal_mutable_gpu_device_rule()->::Tiny3D::Script::MaterialSystem::GPUDeviceRule::MergeFrom(from._internal_gpu_device_rule());
  }
  if (from.render_queue() != 0) {
    _internal_set_render_queue(from._internal_render_queue());
  }
  if (from.lod_index() != 0) {
    _internal_set_lod_index(from._internal_lod_index());
  }
}

void Technique::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.Technique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Technique::CopyFrom(const Technique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Technique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Technique::IsInitialized() const {
  return true;
}

void Technique::InternalSwap(Technique* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scheme_.Swap(&other->scheme_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shadow_caster_material_.Swap(&other->shadow_caster_material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shadow_receiver_material_.Swap(&other->shadow_receiver_material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(gpu_vendor_rule_, other->gpu_vendor_rule_);
  swap(gpu_device_rule_, other->gpu_device_rule_);
  swap(render_queue_, other->render_queue_);
  swap(lod_index_, other->lod_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Technique::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LODValues::InitAsDefaultInstance() {
}
class LODValues::_Internal {
 public:
};

LODValues::LODValues()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.LODValues)
}
LODValues::LODValues(const LODValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strategy().empty()) {
    strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.LODValues)
}

void LODValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LODValues_MaterialScriptObject_2eproto.base);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_ = 0u;
}

LODValues::~LODValues() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.LODValues)
  SharedDtor();
}

void LODValues::SharedDtor() {
  strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LODValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LODValues& LODValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LODValues_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void LODValues::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.LODValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  strategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_ = 0u;
  _internal_metadata_.Clear();
}

const char* LODValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.LODValues.strategy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LODValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.LODValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  // string strategy = 3;
  if (this->strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strategy().data(), static_cast<int>(this->_internal_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.LODValues.strategy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.LODValues)
  return target;
}

size_t LODValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.LODValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string strategy = 3;
  if (this->strategy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strategy());
  }

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LODValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.LODValues)
  GOOGLE_DCHECK_NE(&from, this);
  const LODValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LODValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.LODValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.LODValues)
    MergeFrom(*source);
  }
}

void LODValues::MergeFrom(const LODValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.LODValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.strategy().size() > 0) {

    strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void LODValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.LODValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LODValues::CopyFrom(const LODValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.LODValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LODValues::IsInitialized() const {
  return true;
}

void LODValues::InternalSwap(LODValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  strategy_.Swap(&other->strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LODValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextureAlias::InitAsDefaultInstance() {
}
class TextureAlias::_Internal {
 public:
};

TextureAlias::TextureAlias()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.TextureAlias)
}
TextureAlias::TextureAlias(const TextureAlias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aliasname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aliasname().empty()) {
    aliasname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aliasname_);
  }
  texturename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_texturename().empty()) {
    texturename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texturename_);
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.TextureAlias)
}

void TextureAlias::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextureAlias_MaterialScriptObject_2eproto.base);
  aliasname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texturename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextureAlias::~TextureAlias() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.TextureAlias)
  SharedDtor();
}

void TextureAlias::SharedDtor() {
  aliasname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texturename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextureAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextureAlias& TextureAlias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextureAlias_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void TextureAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aliasname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texturename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TextureAlias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string aliasName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_aliasname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.TextureAlias.aliasName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string textureName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_texturename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.MaterialSystem.TextureAlias.textureName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextureAlias::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string aliasName = 1;
  if (this->aliasname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aliasname().data(), static_cast<int>(this->_internal_aliasname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.TextureAlias.aliasName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_aliasname(), target);
  }

  // string textureName = 2;
  if (this->texturename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_texturename().data(), static_cast<int>(this->_internal_texturename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.MaterialSystem.TextureAlias.textureName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_texturename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.TextureAlias)
  return target;
}

size_t TextureAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aliasName = 1;
  if (this->aliasname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aliasname());
  }

  // string textureName = 2;
  if (this->texturename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_texturename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextureAlias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  GOOGLE_DCHECK_NE(&from, this);
  const TextureAlias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextureAlias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.TextureAlias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.TextureAlias)
    MergeFrom(*source);
  }
}

void TextureAlias::MergeFrom(const TextureAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aliasname().size() > 0) {

    aliasname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aliasname_);
  }
  if (from.texturename().size() > 0) {

    texturename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texturename_);
  }
}

void TextureAlias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureAlias::CopyFrom(const TextureAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.TextureAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureAlias::IsInitialized() const {
  return true;
}

void TextureAlias::InternalSwap(TextureAlias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aliasname_.Swap(&other->aliasname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texturename_.Swap(&other->texturename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextureAlias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Material::InitAsDefaultInstance() {
  ::Tiny3D::Script::MaterialSystem::_Material_default_instance_._instance.get_mutable()->header_ = const_cast< ::Tiny3D::Script::MaterialSystem::Header*>(
      ::Tiny3D::Script::MaterialSystem::Header::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Material_default_instance_._instance.get_mutable()->values_ = const_cast< ::Tiny3D::Script::MaterialSystem::LODValues*>(
      ::Tiny3D::Script::MaterialSystem::LODValues::internal_default_instance());
  ::Tiny3D::Script::MaterialSystem::_Material_default_instance_._instance.get_mutable()->texture_alias_ = const_cast< ::Tiny3D::Script::MaterialSystem::TextureAlias*>(
      ::Tiny3D::Script::MaterialSystem::TextureAlias::internal_default_instance());
}
class Material::_Internal {
 public:
  static const ::Tiny3D::Script::MaterialSystem::Header& header(const Material* msg);
  static const ::Tiny3D::Script::MaterialSystem::LODValues& values(const Material* msg);
  static const ::Tiny3D::Script::MaterialSystem::TextureAlias& texture_alias(const Material* msg);
};

const ::Tiny3D::Script::MaterialSystem::Header&
Material::_Internal::header(const Material* msg) {
  return *msg->header_;
}
const ::Tiny3D::Script::MaterialSystem::LODValues&
Material::_Internal::values(const Material* msg) {
  return *msg->values_;
}
const ::Tiny3D::Script::MaterialSystem::TextureAlias&
Material::_Internal::texture_alias(const Material* msg) {
  return *msg->texture_alias_;
}
Material::Material()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.MaterialSystem.Material)
}
Material::Material(const Material& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      techniques_(from.techniques_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Tiny3D::Script::MaterialSystem::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_values()) {
    values_ = new ::Tiny3D::Script::MaterialSystem::LODValues(*from.values_);
  } else {
    values_ = nullptr;
  }
  if (from._internal_has_texture_alias()) {
    texture_alias_ = new ::Tiny3D::Script::MaterialSystem::TextureAlias(*from.texture_alias_);
  } else {
    texture_alias_ = nullptr;
  }
  ::memcpy(&receive_shadows_, &from.receive_shadows_,
    static_cast<size_t>(reinterpret_cast<char*>(&transparency_casts_shadows_) -
    reinterpret_cast<char*>(&receive_shadows_)) + sizeof(transparency_casts_shadows_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.MaterialSystem.Material)
}

void Material::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Material_MaterialScriptObject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transparency_casts_shadows_) -
      reinterpret_cast<char*>(&header_)) + sizeof(transparency_casts_shadows_));
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.MaterialSystem.Material)
  SharedDtor();
}

void Material::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete values_;
  if (this != internal_default_instance()) delete texture_alias_;
}

void Material::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Material& Material::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Material_MaterialScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.MaterialSystem.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techniques_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && texture_alias_ != nullptr) {
    delete texture_alias_;
  }
  texture_alias_ = nullptr;
  ::memset(&receive_shadows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transparency_casts_shadows_) -
      reinterpret_cast<char*>(&receive_shadows_)) + sizeof(transparency_casts_shadows_));
  _internal_metadata_.Clear();
}

const char* Material::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.MaterialSystem.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.LODValues values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool receive_shadows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          receive_shadows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transparency_casts_shadows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transparency_casts_shadows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.MaterialSystem.TextureAlias texture_alias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture_alias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.MaterialSystem.Technique techniques = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_techniques(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Material::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.MaterialSystem.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .Tiny3D.Script.MaterialSystem.LODValues values = 2;
  if (this->has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  // bool receive_shadows = 3;
  if (this->receive_shadows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_receive_shadows(), target);
  }

  // bool transparency_casts_shadows = 4;
  if (this->transparency_casts_shadows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_transparency_casts_shadows(), target);
  }

  // .Tiny3D.Script.MaterialSystem.TextureAlias texture_alias = 5;
  if (this->has_texture_alias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::texture_alias(this), target, stream);
  }

  // repeated .Tiny3D.Script.MaterialSystem.Technique techniques = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_techniques_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_techniques(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.MaterialSystem.Material)
  return target;
}

size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.MaterialSystem.Material)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.MaterialSystem.Technique techniques = 6;
  total_size += 1UL * this->_internal_techniques_size();
  for (const auto& msg : this->techniques_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Tiny3D.Script.MaterialSystem.LODValues values = 2;
  if (this->has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  // .Tiny3D.Script.MaterialSystem.TextureAlias texture_alias = 5;
  if (this->has_texture_alias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texture_alias_);
  }

  // bool receive_shadows = 3;
  if (this->receive_shadows() != 0) {
    total_size += 1 + 1;
  }

  // bool transparency_casts_shadows = 4;
  if (this->transparency_casts_shadows() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.MaterialSystem.Material)
  GOOGLE_DCHECK_NE(&from, this);
  const Material* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Material>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.MaterialSystem.Material)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.MaterialSystem.Material)
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.MaterialSystem.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  techniques_.MergeFrom(from.techniques_);
  if (from.has_header()) {
    _internal_mutable_header()->::Tiny3D::Script::MaterialSystem::Header::MergeFrom(from._internal_header());
  }
  if (from.has_values()) {
    _internal_mutable_values()->::Tiny3D::Script::MaterialSystem::LODValues::MergeFrom(from._internal_values());
  }
  if (from.has_texture_alias()) {
    _internal_mutable_texture_alias()->::Tiny3D::Script::MaterialSystem::TextureAlias::MergeFrom(from._internal_texture_alias());
  }
  if (from.receive_shadows() != 0) {
    _internal_set_receive_shadows(from._internal_receive_shadows());
  }
  if (from.transparency_casts_shadows() != 0) {
    _internal_set_transparency_casts_shadows(from._internal_transparency_casts_shadows());
  }
}

void Material::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.MaterialSystem.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.MaterialSystem.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  return true;
}

void Material::InternalSwap(Material* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  techniques_.InternalSwap(&other->techniques_);
  swap(header_, other->header_);
  swap(values_, other->values_);
  swap(texture_alias_, other->texture_alias_);
  swap(receive_shadows_, other->receive_shadows_);
  swap(transparency_casts_shadows_, other->transparency_casts_shadows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Material::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MaterialSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Header* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Header >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Shader* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Shader >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Shader >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUProgram* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUProgram >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUProgram >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUProgramRef* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUProgramRef >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUProgramRef >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::ParamIndexed* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::ParamIndexed >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::ParamIndexed >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::ParamNamed* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::ParamNamed >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::ParamNamed >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::ParamNamedAuto* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::ParamNamedAuto >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::ParamNamedAuto >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Color* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Color >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::LightColor* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::LightColor >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::LightColor >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::BlendSceneFactor >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::BlendSceneFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::BlendScene* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::BlendScene >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::BlendScene >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SimpleBlendType* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SimpleBlendType >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SimpleBlendType >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SeparateBlendScene >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SeparateBlendScene >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::DepthBias* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::DepthBias >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::DepthBias >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::AlphaRejection* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::AlphaRejection >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::AlphaRejection >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Fog* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Fog >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Fog >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Iteration* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Iteration >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Iteration >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Pass* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Pass >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Pass >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUVendorRule* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUVendorRule >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUVendorRule >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::GPUDeviceRule >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::GPUDeviceRule >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Technique* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Technique >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Technique >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::LODValues* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::LODValues >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::LODValues >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::TextureAlias* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::TextureAlias >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::TextureAlias >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::MaterialSystem::Material* Arena::CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::Material >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::MaterialSystem::Material >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
