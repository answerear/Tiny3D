// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneScriptObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SceneScriptObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SceneScriptObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "CommonScriptObject.pb.h"
#include "ModelScriptObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SceneScriptObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SceneScriptObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Tiny3D {
namespace Script {
namespace SceneSystem {
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class Mesh;
class MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace SceneSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> ::Tiny3D::Script::SceneSystem::Component* Arena::CreateMaybeMessage<::Tiny3D::Script::SceneSystem::Component>(Arena*);
template<> ::Tiny3D::Script::SceneSystem::Mesh* Arena::CreateMaybeMessage<::Tiny3D::Script::SceneSystem::Mesh>(Arena*);
template<> ::Tiny3D::Script::SceneSystem::Node* Arena::CreateMaybeMessage<::Tiny3D::Script::SceneSystem::Node>(Arena*);
template<> ::Tiny3D::Script::SceneSystem::Transform* Arena::CreateMaybeMessage<::Tiny3D::Script::SceneSystem::Transform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tiny3D {
namespace Script {
namespace SceneSystem {

enum ComponentType : int {
  CT_TRANSFORM = 0,
  CT_MESH = 1,
  ComponentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComponentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComponentType_IsValid(int value);
constexpr ComponentType ComponentType_MIN = CT_TRANSFORM;
constexpr ComponentType ComponentType_MAX = CT_MESH;
constexpr int ComponentType_ARRAYSIZE = ComponentType_MAX + 1;

const std::string& ComponentType_Name(ComponentType value);
template<typename T>
inline const std::string& ComponentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentType_Name.");
  return ComponentType_Name(static_cast<ComponentType>(enum_t_value));
}
bool ComponentType_Parse(
    const std::string& name, ComponentType* value);
// ===================================================================

class Node :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.SceneSystem.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.SceneSystem.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kComponentsFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kParentFieldNumber = 2,
  };
  // repeated uint32 children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_children(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_children() const;
  void _internal_add_children(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_children();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 children(int index) const;
  void set_children(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_children(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_children();

  // repeated .Tiny3D.Script.SceneSystem.Component components = 4;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::Tiny3D::Script::SceneSystem::Component* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::SceneSystem::Component >*
      mutable_components();
  private:
  const ::Tiny3D::Script::SceneSystem::Component& _internal_components(int index) const;
  ::Tiny3D::Script::SceneSystem::Component* _internal_add_components();
  public:
  const ::Tiny3D::Script::SceneSystem::Component& components(int index) const;
  ::Tiny3D::Script::SceneSystem::Component* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::SceneSystem::Component >&
      components() const;

  // .Tiny3D.Script.ObjectHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::ObjectHeader& header() const;
  ::Tiny3D::Script::ObjectHeader* release_header();
  ::Tiny3D::Script::ObjectHeader* mutable_header();
  void set_allocated_header(::Tiny3D::Script::ObjectHeader* header);
  private:
  const ::Tiny3D::Script::ObjectHeader& _internal_header() const;
  ::Tiny3D::Script::ObjectHeader* _internal_mutable_header();
  public:

  // uint32 parent = 2;
  void clear_parent();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent() const;
  void set_parent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parent() const;
  void _internal_set_parent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.SceneSystem.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > children_;
  mutable std::atomic<int> _children_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::SceneSystem::Component > components_;
  ::Tiny3D::Script::ObjectHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SceneScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Component :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.SceneSystem.Component) */ {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Component& default_instance();

  enum ComponentOneOfCase {
    kTransform = 2,
    kMesh = 3,
    COMPONENTONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.SceneSystem.Component";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTransformFieldNumber = 2,
    kMeshFieldNumber = 3,
  };
  // .Tiny3D.Script.SceneSystem.ComponentType type = 1;
  void clear_type();
  ::Tiny3D::Script::SceneSystem::ComponentType type() const;
  void set_type(::Tiny3D::Script::SceneSystem::ComponentType value);
  private:
  ::Tiny3D::Script::SceneSystem::ComponentType _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::SceneSystem::ComponentType value);
  public:

  // .Tiny3D.Script.SceneSystem.Transform transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Tiny3D::Script::SceneSystem::Transform& transform() const;
  ::Tiny3D::Script::SceneSystem::Transform* release_transform();
  ::Tiny3D::Script::SceneSystem::Transform* mutable_transform();
  void set_allocated_transform(::Tiny3D::Script::SceneSystem::Transform* transform);
  private:
  const ::Tiny3D::Script::SceneSystem::Transform& _internal_transform() const;
  ::Tiny3D::Script::SceneSystem::Transform* _internal_mutable_transform();
  public:

  // .Tiny3D.Script.SceneSystem.Mesh mesh = 3;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::Tiny3D::Script::SceneSystem::Mesh& mesh() const;
  ::Tiny3D::Script::SceneSystem::Mesh* release_mesh();
  ::Tiny3D::Script::SceneSystem::Mesh* mutable_mesh();
  void set_allocated_mesh(::Tiny3D::Script::SceneSystem::Mesh* mesh);
  private:
  const ::Tiny3D::Script::SceneSystem::Mesh& _internal_mesh() const;
  ::Tiny3D::Script::SceneSystem::Mesh* _internal_mutable_mesh();
  public:

  void clear_ComponentOneOf();
  ComponentOneOfCase ComponentOneOf_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.SceneSystem.Component)
 private:
  class _Internal;
  void set_has_transform();
  void set_has_mesh();

  inline bool has_ComponentOneOf() const;
  inline void clear_has_ComponentOneOf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int type_;
  union ComponentOneOfUnion {
    ComponentOneOfUnion() {}
    ::Tiny3D::Script::SceneSystem::Transform* transform_;
    ::Tiny3D::Script::SceneSystem::Mesh* mesh_;
  } ComponentOneOf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_SceneScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Transform :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.SceneSystem.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.SceneSystem.Transform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kScalingFieldNumber = 4,
  };
  // .Tiny3D.Script.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Tiny3D::Script::Vector3& position() const;
  ::Tiny3D::Script::Vector3* release_position();
  ::Tiny3D::Script::Vector3* mutable_position();
  void set_allocated_position(::Tiny3D::Script::Vector3* position);
  private:
  const ::Tiny3D::Script::Vector3& _internal_position() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_position();
  public:

  // .Tiny3D.Script.Vector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Tiny3D::Script::Vector3& rotation() const;
  ::Tiny3D::Script::Vector3* release_rotation();
  ::Tiny3D::Script::Vector3* mutable_rotation();
  void set_allocated_rotation(::Tiny3D::Script::Vector3* rotation);
  private:
  const ::Tiny3D::Script::Vector3& _internal_rotation() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_rotation();
  public:

  // .Tiny3D.Script.Vector3 scaling = 4;
  bool has_scaling() const;
  private:
  bool _internal_has_scaling() const;
  public:
  void clear_scaling();
  const ::Tiny3D::Script::Vector3& scaling() const;
  ::Tiny3D::Script::Vector3* release_scaling();
  ::Tiny3D::Script::Vector3* mutable_scaling();
  void set_allocated_scaling(::Tiny3D::Script::Vector3* scaling);
  private:
  const ::Tiny3D::Script::Vector3& _internal_scaling() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_scaling();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.SceneSystem.Transform)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Tiny3D::Script::Vector3* position_;
  ::Tiny3D::Script::Vector3* rotation_;
  ::Tiny3D::Script::Vector3* scaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SceneScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Mesh :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.SceneSystem.Mesh) */ {
 public:
  Mesh();
  virtual ~Mesh();

  Mesh(const Mesh& from);
  Mesh(Mesh&& from) noexcept
    : Mesh() {
    *this = ::std::move(from);
  }

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Mesh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
               &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Mesh& a, Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mesh* New() const final {
    return CreateMaybeMessage<Mesh>(nullptr);
  }

  Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mesh>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.SceneSystem.Mesh";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.SceneSystem.Mesh)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SceneScriptObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// .Tiny3D.Script.ObjectHeader header = 1;
inline bool Node::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Node::has_header() const {
  return _internal_has_header();
}
inline const ::Tiny3D::Script::ObjectHeader& Node::_internal_header() const {
  const ::Tiny3D::Script::ObjectHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ObjectHeader*>(
      &::Tiny3D::Script::_ObjectHeader_default_instance_);
}
inline const ::Tiny3D::Script::ObjectHeader& Node::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Node.header)
  return _internal_header();
}
inline ::Tiny3D::Script::ObjectHeader* Node::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.SceneSystem.Node.header)
  
  ::Tiny3D::Script::ObjectHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ObjectHeader* Node::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ObjectHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::ObjectHeader* Node::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.SceneSystem.Node.header)
  return _internal_mutable_header();
}
inline void Node::set_allocated_header(::Tiny3D::Script::ObjectHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.SceneSystem.Node.header)
}

// uint32 parent = 2;
inline void Node::clear_parent() {
  parent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::_internal_parent() const {
  return parent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::parent() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Node.parent)
  return _internal_parent();
}
inline void Node::_internal_set_parent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  parent_ = value;
}
inline void Node::set_parent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.SceneSystem.Node.parent)
}

// repeated uint32 children = 3;
inline int Node::_internal_children_size() const {
  return children_.size();
}
inline int Node::children_size() const {
  return _internal_children_size();
}
inline void Node::clear_children() {
  children_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::_internal_children(int index) const {
  return children_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::children(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Node.children)
  return _internal_children(index);
}
inline void Node::set_children(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.SceneSystem.Node.children)
}
inline void Node::_internal_add_children(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  children_.Add(value);
}
inline void Node::add_children(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_children(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.SceneSystem.Node.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Node::_internal_children() const {
  return children_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Node::children() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.SceneSystem.Node.children)
  return _internal_children();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Node::_internal_mutable_children() {
  return &children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.SceneSystem.Node.children)
  return _internal_mutable_children();
}

// repeated .Tiny3D.Script.SceneSystem.Component components = 4;
inline int Node::_internal_components_size() const {
  return components_.size();
}
inline int Node::components_size() const {
  return _internal_components_size();
}
inline void Node::clear_components() {
  components_.Clear();
}
inline ::Tiny3D::Script::SceneSystem::Component* Node::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.SceneSystem.Node.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::SceneSystem::Component >*
Node::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.SceneSystem.Node.components)
  return &components_;
}
inline const ::Tiny3D::Script::SceneSystem::Component& Node::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::Tiny3D::Script::SceneSystem::Component& Node::components(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Node.components)
  return _internal_components(index);
}
inline ::Tiny3D::Script::SceneSystem::Component* Node::_internal_add_components() {
  return components_.Add();
}
inline ::Tiny3D::Script::SceneSystem::Component* Node::add_components() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.SceneSystem.Node.components)
  return _internal_add_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::SceneSystem::Component >&
Node::components() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.SceneSystem.Node.components)
  return components_;
}

// -------------------------------------------------------------------

// Component

// .Tiny3D.Script.SceneSystem.ComponentType type = 1;
inline void Component::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::SceneSystem::ComponentType Component::_internal_type() const {
  return static_cast< ::Tiny3D::Script::SceneSystem::ComponentType >(type_);
}
inline ::Tiny3D::Script::SceneSystem::ComponentType Component::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Component.type)
  return _internal_type();
}
inline void Component::_internal_set_type(::Tiny3D::Script::SceneSystem::ComponentType value) {
  
  type_ = value;
}
inline void Component::set_type(::Tiny3D::Script::SceneSystem::ComponentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.SceneSystem.Component.type)
}

// .Tiny3D.Script.SceneSystem.Transform transform = 2;
inline bool Component::_internal_has_transform() const {
  return ComponentOneOf_case() == kTransform;
}
inline bool Component::has_transform() const {
  return _internal_has_transform();
}
inline void Component::set_has_transform() {
  _oneof_case_[0] = kTransform;
}
inline void Component::clear_transform() {
  if (_internal_has_transform()) {
    delete ComponentOneOf_.transform_;
    clear_has_ComponentOneOf();
  }
}
inline ::Tiny3D::Script::SceneSystem::Transform* Component::release_transform() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.SceneSystem.Component.transform)
  if (_internal_has_transform()) {
    clear_has_ComponentOneOf();
      ::Tiny3D::Script::SceneSystem::Transform* temp = ComponentOneOf_.transform_;
    ComponentOneOf_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::SceneSystem::Transform& Component::_internal_transform() const {
  return _internal_has_transform()
      ? *ComponentOneOf_.transform_
      : *reinterpret_cast< ::Tiny3D::Script::SceneSystem::Transform*>(&::Tiny3D::Script::SceneSystem::_Transform_default_instance_);
}
inline const ::Tiny3D::Script::SceneSystem::Transform& Component::transform() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Component.transform)
  return _internal_transform();
}
inline ::Tiny3D::Script::SceneSystem::Transform* Component::_internal_mutable_transform() {
  if (!_internal_has_transform()) {
    clear_ComponentOneOf();
    set_has_transform();
    ComponentOneOf_.transform_ = CreateMaybeMessage< ::Tiny3D::Script::SceneSystem::Transform >(
        GetArenaNoVirtual());
  }
  return ComponentOneOf_.transform_;
}
inline ::Tiny3D::Script::SceneSystem::Transform* Component::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.SceneSystem.Component.transform)
  return _internal_mutable_transform();
}

// .Tiny3D.Script.SceneSystem.Mesh mesh = 3;
inline bool Component::_internal_has_mesh() const {
  return ComponentOneOf_case() == kMesh;
}
inline bool Component::has_mesh() const {
  return _internal_has_mesh();
}
inline void Component::set_has_mesh() {
  _oneof_case_[0] = kMesh;
}
inline void Component::clear_mesh() {
  if (_internal_has_mesh()) {
    delete ComponentOneOf_.mesh_;
    clear_has_ComponentOneOf();
  }
}
inline ::Tiny3D::Script::SceneSystem::Mesh* Component::release_mesh() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.SceneSystem.Component.mesh)
  if (_internal_has_mesh()) {
    clear_has_ComponentOneOf();
      ::Tiny3D::Script::SceneSystem::Mesh* temp = ComponentOneOf_.mesh_;
    ComponentOneOf_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::SceneSystem::Mesh& Component::_internal_mesh() const {
  return _internal_has_mesh()
      ? *ComponentOneOf_.mesh_
      : *reinterpret_cast< ::Tiny3D::Script::SceneSystem::Mesh*>(&::Tiny3D::Script::SceneSystem::_Mesh_default_instance_);
}
inline const ::Tiny3D::Script::SceneSystem::Mesh& Component::mesh() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Component.mesh)
  return _internal_mesh();
}
inline ::Tiny3D::Script::SceneSystem::Mesh* Component::_internal_mutable_mesh() {
  if (!_internal_has_mesh()) {
    clear_ComponentOneOf();
    set_has_mesh();
    ComponentOneOf_.mesh_ = CreateMaybeMessage< ::Tiny3D::Script::SceneSystem::Mesh >(
        GetArenaNoVirtual());
  }
  return ComponentOneOf_.mesh_;
}
inline ::Tiny3D::Script::SceneSystem::Mesh* Component::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.SceneSystem.Component.mesh)
  return _internal_mutable_mesh();
}

inline bool Component::has_ComponentOneOf() const {
  return ComponentOneOf_case() != COMPONENTONEOF_NOT_SET;
}
inline void Component::clear_has_ComponentOneOf() {
  _oneof_case_[0] = COMPONENTONEOF_NOT_SET;
}
inline Component::ComponentOneOfCase Component::ComponentOneOf_case() const {
  return Component::ComponentOneOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Transform

// .Tiny3D.Script.Vector3 position = 2;
inline bool Transform::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Transform::has_position() const {
  return _internal_has_position();
}
inline const ::Tiny3D::Script::Vector3& Transform::_internal_position() const {
  const ::Tiny3D::Script::Vector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Transform::position() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Transform.position)
  return _internal_position();
}
inline ::Tiny3D::Script::Vector3* Transform::release_position() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.SceneSystem.Transform.position)
  
  ::Tiny3D::Script::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Transform::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::Tiny3D::Script::Vector3* Transform::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.SceneSystem.Transform.position)
  return _internal_mutable_position();
}
inline void Transform::set_allocated_position(::Tiny3D::Script::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.SceneSystem.Transform.position)
}

// .Tiny3D.Script.Vector3 rotation = 3;
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Tiny3D::Script::Vector3& Transform::_internal_rotation() const {
  const ::Tiny3D::Script::Vector3* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Transform.rotation)
  return _internal_rotation();
}
inline ::Tiny3D::Script::Vector3* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.SceneSystem.Transform.rotation)
  
  ::Tiny3D::Script::Vector3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Transform::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::Tiny3D::Script::Vector3* Transform::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.SceneSystem.Transform.rotation)
  return _internal_mutable_rotation();
}
inline void Transform::set_allocated_rotation(::Tiny3D::Script::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.SceneSystem.Transform.rotation)
}

// .Tiny3D.Script.Vector3 scaling = 4;
inline bool Transform::_internal_has_scaling() const {
  return this != internal_default_instance() && scaling_ != nullptr;
}
inline bool Transform::has_scaling() const {
  return _internal_has_scaling();
}
inline const ::Tiny3D::Script::Vector3& Transform::_internal_scaling() const {
  const ::Tiny3D::Script::Vector3* p = scaling_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Transform::scaling() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.SceneSystem.Transform.scaling)
  return _internal_scaling();
}
inline ::Tiny3D::Script::Vector3* Transform::release_scaling() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.SceneSystem.Transform.scaling)
  
  ::Tiny3D::Script::Vector3* temp = scaling_;
  scaling_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Transform::_internal_mutable_scaling() {
  
  if (scaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    scaling_ = p;
  }
  return scaling_;
}
inline ::Tiny3D::Script::Vector3* Transform::mutable_scaling() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.SceneSystem.Transform.scaling)
  return _internal_mutable_scaling();
}
inline void Transform::set_allocated_scaling(::Tiny3D::Script::Vector3* scaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scaling_);
  }
  if (scaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scaling, submessage_arena);
    }
    
  } else {
    
  }
  scaling_ = scaling;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.SceneSystem.Transform.scaling)
}

// -------------------------------------------------------------------

// Mesh

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SceneSystem
}  // namespace Script
}  // namespace Tiny3D

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Tiny3D::Script::SceneSystem::ComponentType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SceneScriptObject_2eproto
