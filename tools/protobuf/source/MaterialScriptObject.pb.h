// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MaterialScriptObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MaterialScriptObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MaterialScriptObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MaterialScriptObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MaterialScriptObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Tiny3D {
namespace Script {
namespace MaterialSystem {
class AlphaRejection;
class AlphaRejectionDefaultTypeInternal;
extern AlphaRejectionDefaultTypeInternal _AlphaRejection_default_instance_;
class BlendScene;
class BlendSceneDefaultTypeInternal;
extern BlendSceneDefaultTypeInternal _BlendScene_default_instance_;
class BlendSceneFactor;
class BlendSceneFactorDefaultTypeInternal;
extern BlendSceneFactorDefaultTypeInternal _BlendSceneFactor_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class DepthBias;
class DepthBiasDefaultTypeInternal;
extern DepthBiasDefaultTypeInternal _DepthBias_default_instance_;
class Fog;
class FogDefaultTypeInternal;
extern FogDefaultTypeInternal _Fog_default_instance_;
class GPUConstantBuffer;
class GPUConstantBufferDefaultTypeInternal;
extern GPUConstantBufferDefaultTypeInternal _GPUConstantBuffer_default_instance_;
class GPUConstantBufferRef;
class GPUConstantBufferRefDefaultTypeInternal;
extern GPUConstantBufferRefDefaultTypeInternal _GPUConstantBufferRef_default_instance_;
class GPUDeviceRule;
class GPUDeviceRuleDefaultTypeInternal;
extern GPUDeviceRuleDefaultTypeInternal _GPUDeviceRule_default_instance_;
class GPUProgram;
class GPUProgramDefaultTypeInternal;
extern GPUProgramDefaultTypeInternal _GPUProgram_default_instance_;
class GPUProgramRef;
class GPUProgramRefDefaultTypeInternal;
extern GPUProgramRefDefaultTypeInternal _GPUProgramRef_default_instance_;
class GPUVendorRule;
class GPUVendorRuleDefaultTypeInternal;
extern GPUVendorRuleDefaultTypeInternal _GPUVendorRule_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Iteration;
class IterationDefaultTypeInternal;
extern IterationDefaultTypeInternal _Iteration_default_instance_;
class LODValues;
class LODValuesDefaultTypeInternal;
extern LODValuesDefaultTypeInternal _LODValues_default_instance_;
class LightColor;
class LightColorDefaultTypeInternal;
extern LightColorDefaultTypeInternal _LightColor_default_instance_;
class Material;
class MaterialDefaultTypeInternal;
extern MaterialDefaultTypeInternal _Material_default_instance_;
class ParamIndexed;
class ParamIndexedDefaultTypeInternal;
extern ParamIndexedDefaultTypeInternal _ParamIndexed_default_instance_;
class ParamIndexedAuto;
class ParamIndexedAutoDefaultTypeInternal;
extern ParamIndexedAutoDefaultTypeInternal _ParamIndexedAuto_default_instance_;
class ParamNamed;
class ParamNamedDefaultTypeInternal;
extern ParamNamedDefaultTypeInternal _ParamNamed_default_instance_;
class ParamNamedAuto;
class ParamNamedAutoDefaultTypeInternal;
extern ParamNamedAutoDefaultTypeInternal _ParamNamedAuto_default_instance_;
class Pass;
class PassDefaultTypeInternal;
extern PassDefaultTypeInternal _Pass_default_instance_;
class PointSizeAttenuation;
class PointSizeAttenuationDefaultTypeInternal;
extern PointSizeAttenuationDefaultTypeInternal _PointSizeAttenuation_default_instance_;
class SeparateBlendScene;
class SeparateBlendSceneDefaultTypeInternal;
extern SeparateBlendSceneDefaultTypeInternal _SeparateBlendScene_default_instance_;
class SeparateSceneBlendOperation;
class SeparateSceneBlendOperationDefaultTypeInternal;
extern SeparateSceneBlendOperationDefaultTypeInternal _SeparateSceneBlendOperation_default_instance_;
class Shader;
class ShaderDefaultTypeInternal;
extern ShaderDefaultTypeInternal _Shader_default_instance_;
class SimpleBlendSceneFactor;
class SimpleBlendSceneFactorDefaultTypeInternal;
extern SimpleBlendSceneFactorDefaultTypeInternal _SimpleBlendSceneFactor_default_instance_;
class SimpleBlendType;
class SimpleBlendTypeDefaultTypeInternal;
extern SimpleBlendTypeDefaultTypeInternal _SimpleBlendType_default_instance_;
class Technique;
class TechniqueDefaultTypeInternal;
extern TechniqueDefaultTypeInternal _Technique_default_instance_;
class TextureAlias;
class TextureAliasDefaultTypeInternal;
extern TextureAliasDefaultTypeInternal _TextureAlias_default_instance_;
}  // namespace MaterialSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> ::Tiny3D::Script::MaterialSystem::AlphaRejection* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::AlphaRejection>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::BlendScene* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::BlendScene>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::BlendSceneFactor>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::Color* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Color>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::DepthBias* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::DepthBias>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::Fog* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Fog>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::GPUConstantBuffer* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUConstantBuffer>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUDeviceRule>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::GPUProgram* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUProgram>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::GPUProgramRef* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUProgramRef>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::GPUVendorRule* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUVendorRule>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::Header* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Header>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::Iteration* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Iteration>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::LODValues* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::LODValues>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::LightColor* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::LightColor>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::Material* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Material>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::ParamIndexed* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::ParamIndexed>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::ParamIndexedAuto>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::ParamNamed* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::ParamNamed>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::ParamNamedAuto* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::ParamNamedAuto>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::Pass* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Pass>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::PointSizeAttenuation>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::SeparateBlendScene>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::Shader* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Shader>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::SimpleBlendType* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::SimpleBlendType>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::Technique* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Technique>(Arena*);
template<> ::Tiny3D::Script::MaterialSystem::TextureAlias* Arena::CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::TextureAlias>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tiny3D {
namespace Script {
namespace MaterialSystem {

enum BuiltInType : int {
  BT_NONE = 0,
  BT_REAL = 1,
  BT_INT = 2,
  BuiltInType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BuiltInType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BuiltInType_IsValid(int value);
constexpr BuiltInType BuiltInType_MIN = BT_NONE;
constexpr BuiltInType BuiltInType_MAX = BT_INT;
constexpr int BuiltInType_ARRAYSIZE = BuiltInType_MAX + 1;

const std::string& BuiltInType_Name(BuiltInType value);
template<typename T>
inline const std::string& BuiltInType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuiltInType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuiltInType_Name.");
  return BuiltInType_Name(static_cast<BuiltInType>(enum_t_value));
}
bool BuiltInType_Parse(
    const std::string& name, BuiltInType* value);
enum BlendType : int {
  BT_ADD = 0,
  BT_MODULATE = 1,
  BT_ALPHA_BLEND = 2,
  BT_COLOR_BLEND = 3,
  BT_REPLACE = 4,
  BlendType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlendType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlendType_IsValid(int value);
constexpr BlendType BlendType_MIN = BT_ADD;
constexpr BlendType BlendType_MAX = BT_REPLACE;
constexpr int BlendType_ARRAYSIZE = BlendType_MAX + 1;

const std::string& BlendType_Name(BlendType value);
template<typename T>
inline const std::string& BlendType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlendType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlendType_Name.");
  return BlendType_Name(static_cast<BlendType>(enum_t_value));
}
bool BlendType_Parse(
    const std::string& name, BlendType* value);
enum BlendFactor : int {
  BF_ONE = 0,
  BF_ZERO = 1,
  BF_DEST_COLOR = 2,
  BF_SRC_COLOR = 3,
  BF_ONE_MINUS_DEST_COLOR = 4,
  BF_ONE_MINUS_SRC_COLOR = 5,
  BF_DEST_ALPHA = 6,
  BF_SRC_ALPHA = 7,
  BF_ONE_MINUS_DEST_ALPHA = 8,
  BF_ONE_MINUS_SRC_ALPHA = 9,
  BlendFactor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlendFactor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlendFactor_IsValid(int value);
constexpr BlendFactor BlendFactor_MIN = BF_ONE;
constexpr BlendFactor BlendFactor_MAX = BF_ONE_MINUS_SRC_ALPHA;
constexpr int BlendFactor_ARRAYSIZE = BlendFactor_MAX + 1;

const std::string& BlendFactor_Name(BlendFactor value);
template<typename T>
inline const std::string& BlendFactor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlendFactor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlendFactor_Name.");
  return BlendFactor_Name(static_cast<BlendFactor>(enum_t_value));
}
bool BlendFactor_Parse(
    const std::string& name, BlendFactor* value);
enum BlendOperation : int {
  BO_ADD = 0,
  BO_SUBTRACT = 1,
  BO_REVERSE_SUBTRACT = 2,
  BO_MIN = 3,
  BO_MAX = 4,
  BlendOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlendOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlendOperation_IsValid(int value);
constexpr BlendOperation BlendOperation_MIN = BO_ADD;
constexpr BlendOperation BlendOperation_MAX = BO_MAX;
constexpr int BlendOperation_ARRAYSIZE = BlendOperation_MAX + 1;

const std::string& BlendOperation_Name(BlendOperation value);
template<typename T>
inline const std::string& BlendOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlendOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlendOperation_Name.");
  return BlendOperation_Name(static_cast<BlendOperation>(enum_t_value));
}
bool BlendOperation_Parse(
    const std::string& name, BlendOperation* value);
enum CompareFunction : int {
  CF_ALWAYS_FAIL = 0,
  CF_ALWAYS_PASS = 1,
  CF_LESS = 2,
  CF_LESS_EQUAL = 3,
  CF_EQUAL = 4,
  CF_NOT_EQUAL = 5,
  CF_GREATER_EQUAL = 6,
  CF_GREATER = 7,
  CompareFunction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompareFunction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompareFunction_IsValid(int value);
constexpr CompareFunction CompareFunction_MIN = CF_ALWAYS_FAIL;
constexpr CompareFunction CompareFunction_MAX = CF_GREATER;
constexpr int CompareFunction_ARRAYSIZE = CompareFunction_MAX + 1;

const std::string& CompareFunction_Name(CompareFunction value);
template<typename T>
inline const std::string& CompareFunction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompareFunction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompareFunction_Name.");
  return CompareFunction_Name(static_cast<CompareFunction>(enum_t_value));
}
bool CompareFunction_Parse(
    const std::string& name, CompareFunction* value);
enum IlluminationStage : int {
  IS_AMBIENT = 0,
  IS_PER_LIGHT = 1,
  IS_DECAL = 2,
  IlluminationStage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IlluminationStage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IlluminationStage_IsValid(int value);
constexpr IlluminationStage IlluminationStage_MIN = IS_AMBIENT;
constexpr IlluminationStage IlluminationStage_MAX = IS_DECAL;
constexpr int IlluminationStage_ARRAYSIZE = IlluminationStage_MAX + 1;

const std::string& IlluminationStage_Name(IlluminationStage value);
template<typename T>
inline const std::string& IlluminationStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IlluminationStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IlluminationStage_Name.");
  return IlluminationStage_Name(static_cast<IlluminationStage>(enum_t_value));
}
bool IlluminationStage_Parse(
    const std::string& name, IlluminationStage* value);
enum TransparentSorting : int {
  TS_OFF = 0,
  TS_ON = 1,
  TS_FORCE = 2,
  TransparentSorting_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransparentSorting_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransparentSorting_IsValid(int value);
constexpr TransparentSorting TransparentSorting_MIN = TS_OFF;
constexpr TransparentSorting TransparentSorting_MAX = TS_FORCE;
constexpr int TransparentSorting_ARRAYSIZE = TransparentSorting_MAX + 1;

const std::string& TransparentSorting_Name(TransparentSorting value);
template<typename T>
inline const std::string& TransparentSorting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransparentSorting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransparentSorting_Name.");
  return TransparentSorting_Name(static_cast<TransparentSorting>(enum_t_value));
}
bool TransparentSorting_Parse(
    const std::string& name, TransparentSorting* value);
enum CullHardware : int {
  CH_NONE = 0,
  CH_CLOCKWISE = 1,
  CH_ANTICLOCKWISE = 2,
  CullHardware_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CullHardware_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CullHardware_IsValid(int value);
constexpr CullHardware CullHardware_MIN = CH_NONE;
constexpr CullHardware CullHardware_MAX = CH_ANTICLOCKWISE;
constexpr int CullHardware_ARRAYSIZE = CullHardware_MAX + 1;

const std::string& CullHardware_Name(CullHardware value);
template<typename T>
inline const std::string& CullHardware_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CullHardware>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CullHardware_Name.");
  return CullHardware_Name(static_cast<CullHardware>(enum_t_value));
}
bool CullHardware_Parse(
    const std::string& name, CullHardware* value);
enum CullSoftware : int {
  CS_NONE = 0,
  CS_BACK = 1,
  CS_FRONT = 2,
  CullSoftware_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CullSoftware_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CullSoftware_IsValid(int value);
constexpr CullSoftware CullSoftware_MIN = CS_NONE;
constexpr CullSoftware CullSoftware_MAX = CS_FRONT;
constexpr int CullSoftware_ARRAYSIZE = CullSoftware_MAX + 1;

const std::string& CullSoftware_Name(CullSoftware value);
template<typename T>
inline const std::string& CullSoftware_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CullSoftware>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CullSoftware_Name.");
  return CullSoftware_Name(static_cast<CullSoftware>(enum_t_value));
}
bool CullSoftware_Parse(
    const std::string& name, CullSoftware* value);
enum ShadingMode : int {
  SM_FLAT = 0,
  SM_GOURAUD = 1,
  SM_PHONG = 2,
  ShadingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ShadingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ShadingMode_IsValid(int value);
constexpr ShadingMode ShadingMode_MIN = SM_FLAT;
constexpr ShadingMode ShadingMode_MAX = SM_PHONG;
constexpr int ShadingMode_ARRAYSIZE = ShadingMode_MAX + 1;

const std::string& ShadingMode_Name(ShadingMode value);
template<typename T>
inline const std::string& ShadingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShadingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShadingMode_Name.");
  return ShadingMode_Name(static_cast<ShadingMode>(enum_t_value));
}
bool ShadingMode_Parse(
    const std::string& name, ShadingMode* value);
enum PolygonMode : int {
  PM_NONE = 0,
  PM_POINTS = 1,
  PM_WIREFRAME = 2,
  PM_SOLID = 3,
  PolygonMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PolygonMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PolygonMode_IsValid(int value);
constexpr PolygonMode PolygonMode_MIN = PM_NONE;
constexpr PolygonMode PolygonMode_MAX = PM_SOLID;
constexpr int PolygonMode_ARRAYSIZE = PolygonMode_MAX + 1;

const std::string& PolygonMode_Name(PolygonMode value);
template<typename T>
inline const std::string& PolygonMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolygonMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolygonMode_Name.");
  return PolygonMode_Name(static_cast<PolygonMode>(enum_t_value));
}
bool PolygonMode_Parse(
    const std::string& name, PolygonMode* value);
enum FogType : int {
  FT_NONE = 0,
  FT_EXP = 1,
  FT_EXP2 = 2,
  FT_LINEAR = 3,
  FogType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FogType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FogType_IsValid(int value);
constexpr FogType FogType_MIN = FT_NONE;
constexpr FogType FogType_MAX = FT_LINEAR;
constexpr int FogType_ARRAYSIZE = FogType_MAX + 1;

const std::string& FogType_Name(FogType value);
template<typename T>
inline const std::string& FogType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FogType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FogType_Name.");
  return FogType_Name(static_cast<FogType>(enum_t_value));
}
bool FogType_Parse(
    const std::string& name, FogType* value);
enum IterationType : int {
  IT_ONCE = 0,
  IT_ONCE_PER_LIGHT = 1,
  IT_PER_LIGHT = 2,
  IT_PER_N_LIGHTS = 3,
  IterationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IterationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IterationType_IsValid(int value);
constexpr IterationType IterationType_MIN = IT_ONCE;
constexpr IterationType IterationType_MAX = IT_PER_N_LIGHTS;
constexpr int IterationType_ARRAYSIZE = IterationType_MAX + 1;

const std::string& IterationType_Name(IterationType value);
template<typename T>
inline const std::string& IterationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IterationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IterationType_Name.");
  return IterationType_Name(static_cast<IterationType>(enum_t_value));
}
bool IterationType_Parse(
    const std::string& name, IterationType* value);
enum LightType : int {
  LT_POINT = 0,
  LT_DIRECTIONAL = 1,
  LT_SPOT = 2,
  LightType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LightType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LightType_IsValid(int value);
constexpr LightType LightType_MIN = LT_POINT;
constexpr LightType LightType_MAX = LT_SPOT;
constexpr int LightType_ARRAYSIZE = LightType_MAX + 1;

const std::string& LightType_Name(LightType value);
template<typename T>
inline const std::string& LightType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightType_Name.");
  return LightType_Name(static_cast<LightType>(enum_t_value));
}
bool LightType_Parse(
    const std::string& name, LightType* value);
enum GPURuleType : int {
  INCLUDE = 0,
  EXCLUDE = 1,
  GPURuleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GPURuleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GPURuleType_IsValid(int value);
constexpr GPURuleType GPURuleType_MIN = INCLUDE;
constexpr GPURuleType GPURuleType_MAX = EXCLUDE;
constexpr int GPURuleType_ARRAYSIZE = GPURuleType_MAX + 1;

const std::string& GPURuleType_Name(GPURuleType value);
template<typename T>
inline const std::string& GPURuleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GPURuleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GPURuleType_Name.");
  return GPURuleType_Name(static_cast<GPURuleType>(enum_t_value));
}
bool GPURuleType_Parse(
    const std::string& name, GPURuleType* value);
// ===================================================================

class Header :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIDFieldNumber = 1,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.Header)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Shader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.Shader) */ {
 public:
  Shader();
  virtual ~Shader();

  Shader(const Shader& from);
  Shader(Shader&& from) noexcept
    : Shader() {
    *this = ::std::move(from);
  }

  inline Shader& operator=(const Shader& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shader& operator=(Shader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Shader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shader* internal_default_instance() {
    return reinterpret_cast<const Shader*>(
               &_Shader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Shader& a, Shader& b) {
    a.Swap(&b);
  }
  inline void Swap(Shader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shader* New() const final {
    return CreateMaybeMessage<Shader>(nullptr);
  }

  Shader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Shader& from);
  void MergeFrom(const Shader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Shader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.Shader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 2,
    kTargetFieldNumber = 3,
    kEntryFieldNumber = 4,
    kStageFieldNumber = 5,
    kHeaderFieldNumber = 1,
  };
  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string target = 3;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string entry = 4;
  void clear_entry();
  const std::string& entry() const;
  void set_entry(const std::string& value);
  void set_entry(std::string&& value);
  void set_entry(const char* value);
  void set_entry(const char* value, size_t size);
  std::string* mutable_entry();
  std::string* release_entry();
  void set_allocated_entry(std::string* entry);
  private:
  const std::string& _internal_entry() const;
  void _internal_set_entry(const std::string& value);
  std::string* _internal_mutable_entry();
  public:

  // string stage = 5;
  void clear_stage();
  const std::string& stage() const;
  void set_stage(const std::string& value);
  void set_stage(std::string&& value);
  void set_stage(const char* value);
  void set_stage(const char* value, size_t size);
  std::string* mutable_stage();
  std::string* release_stage();
  void set_allocated_stage(std::string* stage);
  private:
  const std::string& _internal_stage() const;
  void _internal_set_stage(const std::string& value);
  std::string* _internal_mutable_stage();
  public:

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::MaterialSystem::Header& header() const;
  ::Tiny3D::Script::MaterialSystem::Header* release_header();
  ::Tiny3D::Script::MaterialSystem::Header* mutable_header();
  void set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header);
  private:
  const ::Tiny3D::Script::MaterialSystem::Header& _internal_header() const;
  ::Tiny3D::Script::MaterialSystem::Header* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.Shader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_;
  ::Tiny3D::Script::MaterialSystem::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class GPUProgram :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.GPUProgram) */ {
 public:
  GPUProgram();
  virtual ~GPUProgram();

  GPUProgram(const GPUProgram& from);
  GPUProgram(GPUProgram&& from) noexcept
    : GPUProgram() {
    *this = ::std::move(from);
  }

  inline GPUProgram& operator=(const GPUProgram& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUProgram& operator=(GPUProgram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GPUProgram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPUProgram* internal_default_instance() {
    return reinterpret_cast<const GPUProgram*>(
               &_GPUProgram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GPUProgram& a, GPUProgram& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUProgram* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPUProgram* New() const final {
    return CreateMaybeMessage<GPUProgram>(nullptr);
  }

  GPUProgram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPUProgram>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GPUProgram& from);
  void MergeFrom(const GPUProgram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUProgram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.GPUProgram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShadersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .Tiny3D.Script.MaterialSystem.Shader shaders = 2;
  int shaders_size() const;
  private:
  int _internal_shaders_size() const;
  public:
  void clear_shaders();
  ::Tiny3D::Script::MaterialSystem::Shader* mutable_shaders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Shader >*
      mutable_shaders();
  private:
  const ::Tiny3D::Script::MaterialSystem::Shader& _internal_shaders(int index) const;
  ::Tiny3D::Script::MaterialSystem::Shader* _internal_add_shaders();
  public:
  const ::Tiny3D::Script::MaterialSystem::Shader& shaders(int index) const;
  ::Tiny3D::Script::MaterialSystem::Shader* add_shaders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Shader >&
      shaders() const;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::MaterialSystem::Header& header() const;
  ::Tiny3D::Script::MaterialSystem::Header* release_header();
  ::Tiny3D::Script::MaterialSystem::Header* mutable_header();
  void set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header);
  private:
  const ::Tiny3D::Script::MaterialSystem::Header& _internal_header() const;
  ::Tiny3D::Script::MaterialSystem::Header* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.GPUProgram)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Shader > shaders_;
  ::Tiny3D::Script::MaterialSystem::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class GPUConstantBufferRef :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef) */ {
 public:
  GPUConstantBufferRef();
  virtual ~GPUConstantBufferRef();

  GPUConstantBufferRef(const GPUConstantBufferRef& from);
  GPUConstantBufferRef(GPUConstantBufferRef&& from) noexcept
    : GPUConstantBufferRef() {
    *this = ::std::move(from);
  }

  inline GPUConstantBufferRef& operator=(const GPUConstantBufferRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUConstantBufferRef& operator=(GPUConstantBufferRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GPUConstantBufferRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPUConstantBufferRef* internal_default_instance() {
    return reinterpret_cast<const GPUConstantBufferRef*>(
               &_GPUConstantBufferRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GPUConstantBufferRef& a, GPUConstantBufferRef& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUConstantBufferRef* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPUConstantBufferRef* New() const final {
    return CreateMaybeMessage<GPUConstantBufferRef>(nullptr);
  }

  GPUConstantBufferRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPUConstantBufferRef>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GPUConstantBufferRef& from);
  void MergeFrom(const GPUConstantBufferRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUConstantBufferRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.GPUConstantBufferRef";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSlotFieldNumber = 2,
  };
  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::MaterialSystem::Header& header() const;
  ::Tiny3D::Script::MaterialSystem::Header* release_header();
  ::Tiny3D::Script::MaterialSystem::Header* mutable_header();
  void set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header);
  private:
  const ::Tiny3D::Script::MaterialSystem::Header& _internal_header() const;
  ::Tiny3D::Script::MaterialSystem::Header* _internal_mutable_header();
  public:

  // uint32 slot = 2;
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Tiny3D::Script::MaterialSystem::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class GPUProgramRef :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.GPUProgramRef) */ {
 public:
  GPUProgramRef();
  virtual ~GPUProgramRef();

  GPUProgramRef(const GPUProgramRef& from);
  GPUProgramRef(GPUProgramRef&& from) noexcept
    : GPUProgramRef() {
    *this = ::std::move(from);
  }

  inline GPUProgramRef& operator=(const GPUProgramRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUProgramRef& operator=(GPUProgramRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GPUProgramRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPUProgramRef* internal_default_instance() {
    return reinterpret_cast<const GPUProgramRef*>(
               &_GPUProgramRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GPUProgramRef& a, GPUProgramRef& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUProgramRef* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPUProgramRef* New() const final {
    return CreateMaybeMessage<GPUProgramRef>(nullptr);
  }

  GPUProgramRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPUProgramRef>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GPUProgramRef& from);
  void MergeFrom(const GPUProgramRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUProgramRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.GPUProgramRef";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuCbufferRefFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .Tiny3D.Script.MaterialSystem.GPUConstantBufferRef gpu_cbuffer_ref = 2;
  int gpu_cbuffer_ref_size() const;
  private:
  int _internal_gpu_cbuffer_ref_size() const;
  public:
  void clear_gpu_cbuffer_ref();
  ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* mutable_gpu_cbuffer_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef >*
      mutable_gpu_cbuffer_ref();
  private:
  const ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef& _internal_gpu_cbuffer_ref(int index) const;
  ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* _internal_add_gpu_cbuffer_ref();
  public:
  const ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef& gpu_cbuffer_ref(int index) const;
  ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* add_gpu_cbuffer_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef >&
      gpu_cbuffer_ref() const;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::MaterialSystem::Header& header() const;
  ::Tiny3D::Script::MaterialSystem::Header* release_header();
  ::Tiny3D::Script::MaterialSystem::Header* mutable_header();
  void set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header);
  private:
  const ::Tiny3D::Script::MaterialSystem::Header& _internal_header() const;
  ::Tiny3D::Script::MaterialSystem::Header* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.GPUProgramRef)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef > gpu_cbuffer_ref_;
  ::Tiny3D::Script::MaterialSystem::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class ParamIndexed :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.ParamIndexed) */ {
 public:
  ParamIndexed();
  virtual ~ParamIndexed();

  ParamIndexed(const ParamIndexed& from);
  ParamIndexed(ParamIndexed&& from) noexcept
    : ParamIndexed() {
    *this = ::std::move(from);
  }

  inline ParamIndexed& operator=(const ParamIndexed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamIndexed& operator=(ParamIndexed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ParamIndexed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamIndexed* internal_default_instance() {
    return reinterpret_cast<const ParamIndexed*>(
               &_ParamIndexed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ParamIndexed& a, ParamIndexed& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamIndexed* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamIndexed* New() const final {
    return CreateMaybeMessage<ParamIndexed>(nullptr);
  }

  ParamIndexed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamIndexed>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ParamIndexed& from);
  void MergeFrom(const ParamIndexed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParamIndexed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.ParamIndexed";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kIndexFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNumValuesFieldNumber = 3,
  };
  // repeated float values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
  void clear_type();
  ::Tiny3D::Script::MaterialSystem::BuiltInType type() const;
  void set_type(::Tiny3D::Script::MaterialSystem::BuiltInType value);
  private:
  ::Tiny3D::Script::MaterialSystem::BuiltInType _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::MaterialSystem::BuiltInType value);
  public:

  // uint32 num_values = 3;
  void clear_num_values();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_values() const;
  void set_num_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_values() const;
  void _internal_set_num_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.ParamIndexed)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class ParamIndexedAuto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.ParamIndexedAuto) */ {
 public:
  ParamIndexedAuto();
  virtual ~ParamIndexedAuto();

  ParamIndexedAuto(const ParamIndexedAuto& from);
  ParamIndexedAuto(ParamIndexedAuto&& from) noexcept
    : ParamIndexedAuto() {
    *this = ::std::move(from);
  }

  inline ParamIndexedAuto& operator=(const ParamIndexedAuto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamIndexedAuto& operator=(ParamIndexedAuto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ParamIndexedAuto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamIndexedAuto* internal_default_instance() {
    return reinterpret_cast<const ParamIndexedAuto*>(
               &_ParamIndexedAuto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ParamIndexedAuto& a, ParamIndexedAuto& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamIndexedAuto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamIndexedAuto* New() const final {
    return CreateMaybeMessage<ParamIndexedAuto>(nullptr);
  }

  ParamIndexedAuto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamIndexedAuto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ParamIndexedAuto& from);
  void MergeFrom(const ParamIndexedAuto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParamIndexedAuto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.ParamIndexedAuto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraParamsFieldNumber = 3,
    kIndexFieldNumber = 1,
    kValueCodeFieldNumber = 2,
  };
  // bytes extra_params = 3;
  void clear_extra_params();
  const std::string& extra_params() const;
  void set_extra_params(const std::string& value);
  void set_extra_params(std::string&& value);
  void set_extra_params(const char* value);
  void set_extra_params(const void* value, size_t size);
  std::string* mutable_extra_params();
  std::string* release_extra_params();
  void set_allocated_extra_params(std::string* extra_params);
  private:
  const std::string& _internal_extra_params() const;
  void _internal_set_extra_params(const std::string& value);
  std::string* _internal_mutable_extra_params();
  public:

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 value_code = 2;
  void clear_value_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_code() const;
  void set_value_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value_code() const;
  void _internal_set_value_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.ParamIndexedAuto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class ParamNamed :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.ParamNamed) */ {
 public:
  ParamNamed();
  virtual ~ParamNamed();

  ParamNamed(const ParamNamed& from);
  ParamNamed(ParamNamed&& from) noexcept
    : ParamNamed() {
    *this = ::std::move(from);
  }

  inline ParamNamed& operator=(const ParamNamed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamNamed& operator=(ParamNamed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ParamNamed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamNamed* internal_default_instance() {
    return reinterpret_cast<const ParamNamed*>(
               &_ParamNamed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ParamNamed& a, ParamNamed& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamNamed* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamNamed* New() const final {
    return CreateMaybeMessage<ParamNamed>(nullptr);
  }

  ParamNamed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamNamed>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ParamNamed& from);
  void MergeFrom(const ParamNamed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParamNamed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.ParamNamed";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNumValuesFieldNumber = 3,
  };
  // repeated float values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
  void clear_type();
  ::Tiny3D::Script::MaterialSystem::BuiltInType type() const;
  void set_type(::Tiny3D::Script::MaterialSystem::BuiltInType value);
  private:
  ::Tiny3D::Script::MaterialSystem::BuiltInType _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::MaterialSystem::BuiltInType value);
  public:

  // uint32 num_values = 3;
  void clear_num_values();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_values() const;
  void set_num_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_values() const;
  void _internal_set_num_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.ParamNamed)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class ParamNamedAuto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.ParamNamedAuto) */ {
 public:
  ParamNamedAuto();
  virtual ~ParamNamedAuto();

  ParamNamedAuto(const ParamNamedAuto& from);
  ParamNamedAuto(ParamNamedAuto&& from) noexcept
    : ParamNamedAuto() {
    *this = ::std::move(from);
  }

  inline ParamNamedAuto& operator=(const ParamNamedAuto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamNamedAuto& operator=(ParamNamedAuto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ParamNamedAuto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamNamedAuto* internal_default_instance() {
    return reinterpret_cast<const ParamNamedAuto*>(
               &_ParamNamedAuto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ParamNamedAuto& a, ParamNamedAuto& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamNamedAuto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamNamedAuto* New() const final {
    return CreateMaybeMessage<ParamNamedAuto>(nullptr);
  }

  ParamNamedAuto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamNamedAuto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ParamNamedAuto& from);
  void MergeFrom(const ParamNamedAuto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParamNamedAuto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.ParamNamedAuto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraParamsFieldNumber = 3,
    kValueCodeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes extra_params = 3;
  void clear_extra_params();
  const std::string& extra_params() const;
  void set_extra_params(const std::string& value);
  void set_extra_params(std::string&& value);
  void set_extra_params(const char* value);
  void set_extra_params(const void* value, size_t size);
  std::string* mutable_extra_params();
  std::string* release_extra_params();
  void set_allocated_extra_params(std::string* extra_params);
  private:
  const std::string& _internal_extra_params() const;
  void _internal_set_extra_params(const std::string& value);
  std::string* _internal_mutable_extra_params();
  public:

  // uint32 value_code = 2;
  void clear_value_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_code() const;
  void set_value_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value_code() const;
  void _internal_set_value_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.ParamNamedAuto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class GPUConstantBuffer :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.GPUConstantBuffer) */ {
 public:
  GPUConstantBuffer();
  virtual ~GPUConstantBuffer();

  GPUConstantBuffer(const GPUConstantBuffer& from);
  GPUConstantBuffer(GPUConstantBuffer&& from) noexcept
    : GPUConstantBuffer() {
    *this = ::std::move(from);
  }

  inline GPUConstantBuffer& operator=(const GPUConstantBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUConstantBuffer& operator=(GPUConstantBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GPUConstantBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPUConstantBuffer* internal_default_instance() {
    return reinterpret_cast<const GPUConstantBuffer*>(
               &_GPUConstantBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GPUConstantBuffer& a, GPUConstantBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUConstantBuffer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPUConstantBuffer* New() const final {
    return CreateMaybeMessage<GPUConstantBuffer>(nullptr);
  }

  GPUConstantBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPUConstantBuffer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GPUConstantBuffer& from);
  void MergeFrom(const GPUConstantBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUConstantBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.GPUConstantBuffer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamIndexedFieldNumber = 2,
    kParamIndexedAutoFieldNumber = 3,
    kParamNamedFieldNumber = 4,
    kParamNamedAutoFieldNumber = 5,
    kHeaderFieldNumber = 1,
  };
  // repeated .Tiny3D.Script.MaterialSystem.ParamIndexed param_indexed = 2;
  int param_indexed_size() const;
  private:
  int _internal_param_indexed_size() const;
  public:
  void clear_param_indexed();
  ::Tiny3D::Script::MaterialSystem::ParamIndexed* mutable_param_indexed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexed >*
      mutable_param_indexed();
  private:
  const ::Tiny3D::Script::MaterialSystem::ParamIndexed& _internal_param_indexed(int index) const;
  ::Tiny3D::Script::MaterialSystem::ParamIndexed* _internal_add_param_indexed();
  public:
  const ::Tiny3D::Script::MaterialSystem::ParamIndexed& param_indexed(int index) const;
  ::Tiny3D::Script::MaterialSystem::ParamIndexed* add_param_indexed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexed >&
      param_indexed() const;

  // repeated .Tiny3D.Script.MaterialSystem.ParamIndexedAuto param_indexed_auto = 3;
  int param_indexed_auto_size() const;
  private:
  int _internal_param_indexed_auto_size() const;
  public:
  void clear_param_indexed_auto();
  ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto* mutable_param_indexed_auto(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto >*
      mutable_param_indexed_auto();
  private:
  const ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto& _internal_param_indexed_auto(int index) const;
  ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto* _internal_add_param_indexed_auto();
  public:
  const ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto& param_indexed_auto(int index) const;
  ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto* add_param_indexed_auto();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto >&
      param_indexed_auto() const;

  // repeated .Tiny3D.Script.MaterialSystem.ParamNamed param_named = 4;
  int param_named_size() const;
  private:
  int _internal_param_named_size() const;
  public:
  void clear_param_named();
  ::Tiny3D::Script::MaterialSystem::ParamNamed* mutable_param_named(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamed >*
      mutable_param_named();
  private:
  const ::Tiny3D::Script::MaterialSystem::ParamNamed& _internal_param_named(int index) const;
  ::Tiny3D::Script::MaterialSystem::ParamNamed* _internal_add_param_named();
  public:
  const ::Tiny3D::Script::MaterialSystem::ParamNamed& param_named(int index) const;
  ::Tiny3D::Script::MaterialSystem::ParamNamed* add_param_named();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamed >&
      param_named() const;

  // repeated .Tiny3D.Script.MaterialSystem.ParamNamedAuto param_named_auto = 5;
  int param_named_auto_size() const;
  private:
  int _internal_param_named_auto_size() const;
  public:
  void clear_param_named_auto();
  ::Tiny3D::Script::MaterialSystem::ParamNamedAuto* mutable_param_named_auto(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamedAuto >*
      mutable_param_named_auto();
  private:
  const ::Tiny3D::Script::MaterialSystem::ParamNamedAuto& _internal_param_named_auto(int index) const;
  ::Tiny3D::Script::MaterialSystem::ParamNamedAuto* _internal_add_param_named_auto();
  public:
  const ::Tiny3D::Script::MaterialSystem::ParamNamedAuto& param_named_auto(int index) const;
  ::Tiny3D::Script::MaterialSystem::ParamNamedAuto* add_param_named_auto();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamedAuto >&
      param_named_auto() const;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::MaterialSystem::Header& header() const;
  ::Tiny3D::Script::MaterialSystem::Header* release_header();
  ::Tiny3D::Script::MaterialSystem::Header* mutable_header();
  void set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header);
  private:
  const ::Tiny3D::Script::MaterialSystem::Header& _internal_header() const;
  ::Tiny3D::Script::MaterialSystem::Header* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.GPUConstantBuffer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexed > param_indexed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto > param_indexed_auto_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamed > param_named_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamedAuto > param_named_auto_;
  ::Tiny3D::Script::MaterialSystem::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Color :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.Color";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float g = 2;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float b = 3;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float a = 4;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.Color)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float r_;
  float g_;
  float b_;
  float a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class LightColor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.LightColor) */ {
 public:
  LightColor();
  virtual ~LightColor();

  LightColor(const LightColor& from);
  LightColor(LightColor&& from) noexcept
    : LightColor() {
    *this = ::std::move(from);
  }

  inline LightColor& operator=(const LightColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightColor& operator=(LightColor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LightColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightColor* internal_default_instance() {
    return reinterpret_cast<const LightColor*>(
               &_LightColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LightColor& a, LightColor& b) {
    a.Swap(&b);
  }
  inline void Swap(LightColor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightColor* New() const final {
    return CreateMaybeMessage<LightColor>(nullptr);
  }

  LightColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightColor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LightColor& from);
  void MergeFrom(const LightColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LightColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.LightColor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
    kVertexColorFieldNumber = 2,
  };
  // .Tiny3D.Script.MaterialSystem.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Tiny3D::Script::MaterialSystem::Color& color() const;
  ::Tiny3D::Script::MaterialSystem::Color* release_color();
  ::Tiny3D::Script::MaterialSystem::Color* mutable_color();
  void set_allocated_color(::Tiny3D::Script::MaterialSystem::Color* color);
  private:
  const ::Tiny3D::Script::MaterialSystem::Color& _internal_color() const;
  ::Tiny3D::Script::MaterialSystem::Color* _internal_mutable_color();
  public:

  // bool vertex_color = 2;
  void clear_vertex_color();
  bool vertex_color() const;
  void set_vertex_color(bool value);
  private:
  bool _internal_vertex_color() const;
  void _internal_set_vertex_color(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.LightColor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Tiny3D::Script::MaterialSystem::Color* color_;
  bool vertex_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class BlendSceneFactor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.BlendSceneFactor) */ {
 public:
  BlendSceneFactor();
  virtual ~BlendSceneFactor();

  BlendSceneFactor(const BlendSceneFactor& from);
  BlendSceneFactor(BlendSceneFactor&& from) noexcept
    : BlendSceneFactor() {
    *this = ::std::move(from);
  }

  inline BlendSceneFactor& operator=(const BlendSceneFactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendSceneFactor& operator=(BlendSceneFactor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BlendSceneFactor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlendSceneFactor* internal_default_instance() {
    return reinterpret_cast<const BlendSceneFactor*>(
               &_BlendSceneFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BlendSceneFactor& a, BlendSceneFactor& b) {
    a.Swap(&b);
  }
  inline void Swap(BlendSceneFactor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlendSceneFactor* New() const final {
    return CreateMaybeMessage<BlendSceneFactor>(nullptr);
  }

  BlendSceneFactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlendSceneFactor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlendSceneFactor& from);
  void MergeFrom(const BlendSceneFactor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlendSceneFactor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.BlendSceneFactor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFactorFieldNumber = 1,
    kDestFactorFieldNumber = 2,
  };
  // .Tiny3D.Script.MaterialSystem.BlendFactor src_factor = 1;
  void clear_src_factor();
  ::Tiny3D::Script::MaterialSystem::BlendFactor src_factor() const;
  void set_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendFactor _internal_src_factor() const;
  void _internal_set_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.MaterialSystem.BlendFactor dest_factor = 2;
  void clear_dest_factor();
  ::Tiny3D::Script::MaterialSystem::BlendFactor dest_factor() const;
  void set_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendFactor _internal_dest_factor() const;
  void _internal_set_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.BlendSceneFactor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int src_factor_;
  int dest_factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class BlendScene :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.BlendScene) */ {
 public:
  BlendScene();
  virtual ~BlendScene();

  BlendScene(const BlendScene& from);
  BlendScene(BlendScene&& from) noexcept
    : BlendScene() {
    *this = ::std::move(from);
  }

  inline BlendScene& operator=(const BlendScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendScene& operator=(BlendScene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BlendScene& default_instance();

  enum BlendSceneOneOfCase {
    kBlendType = 1,
    kBlendFactor = 2,
    BLENDSCENEONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlendScene* internal_default_instance() {
    return reinterpret_cast<const BlendScene*>(
               &_BlendScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BlendScene& a, BlendScene& b) {
    a.Swap(&b);
  }
  inline void Swap(BlendScene* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlendScene* New() const final {
    return CreateMaybeMessage<BlendScene>(nullptr);
  }

  BlendScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlendScene>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlendScene& from);
  void MergeFrom(const BlendScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlendScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.BlendScene";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlendTypeFieldNumber = 1,
    kBlendFactorFieldNumber = 2,
  };
  // .Tiny3D.Script.MaterialSystem.BlendType blend_type = 1;
  private:
  bool _internal_has_blend_type() const;
  public:
  void clear_blend_type();
  ::Tiny3D::Script::MaterialSystem::BlendType blend_type() const;
  void set_blend_type(::Tiny3D::Script::MaterialSystem::BlendType value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendType _internal_blend_type() const;
  void _internal_set_blend_type(::Tiny3D::Script::MaterialSystem::BlendType value);
  public:

  // .Tiny3D.Script.MaterialSystem.BlendSceneFactor blend_factor = 2;
  bool has_blend_factor() const;
  private:
  bool _internal_has_blend_factor() const;
  public:
  void clear_blend_factor();
  const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor& blend_factor() const;
  ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* release_blend_factor();
  ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* mutable_blend_factor();
  void set_allocated_blend_factor(::Tiny3D::Script::MaterialSystem::BlendSceneFactor* blend_factor);
  private:
  const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor& _internal_blend_factor() const;
  ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* _internal_mutable_blend_factor();
  public:

  void clear_BlendSceneOneOf();
  BlendSceneOneOfCase BlendSceneOneOf_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.BlendScene)
 private:
  class _Internal;
  void set_has_blend_type();
  void set_has_blend_factor();

  inline bool has_BlendSceneOneOf() const;
  inline void clear_has_BlendSceneOneOf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union BlendSceneOneOfUnion {
    BlendSceneOneOfUnion() {}
    int blend_type_;
    ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* blend_factor_;
  } BlendSceneOneOf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class SimpleBlendType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.SimpleBlendType) */ {
 public:
  SimpleBlendType();
  virtual ~SimpleBlendType();

  SimpleBlendType(const SimpleBlendType& from);
  SimpleBlendType(SimpleBlendType&& from) noexcept
    : SimpleBlendType() {
    *this = ::std::move(from);
  }

  inline SimpleBlendType& operator=(const SimpleBlendType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleBlendType& operator=(SimpleBlendType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SimpleBlendType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleBlendType* internal_default_instance() {
    return reinterpret_cast<const SimpleBlendType*>(
               &_SimpleBlendType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SimpleBlendType& a, SimpleBlendType& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleBlendType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleBlendType* New() const final {
    return CreateMaybeMessage<SimpleBlendType>(nullptr);
  }

  SimpleBlendType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleBlendType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SimpleBlendType& from);
  void MergeFrom(const SimpleBlendType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleBlendType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.SimpleBlendType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorBlendFieldNumber = 1,
    kAlphaBlendFieldNumber = 2,
  };
  // .Tiny3D.Script.MaterialSystem.BlendType color_blend = 1;
  void clear_color_blend();
  ::Tiny3D::Script::MaterialSystem::BlendType color_blend() const;
  void set_color_blend(::Tiny3D::Script::MaterialSystem::BlendType value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendType _internal_color_blend() const;
  void _internal_set_color_blend(::Tiny3D::Script::MaterialSystem::BlendType value);
  public:

  // .Tiny3D.Script.MaterialSystem.BlendType alpha_blend = 2;
  void clear_alpha_blend();
  ::Tiny3D::Script::MaterialSystem::BlendType alpha_blend() const;
  void set_alpha_blend(::Tiny3D::Script::MaterialSystem::BlendType value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendType _internal_alpha_blend() const;
  void _internal_set_alpha_blend(::Tiny3D::Script::MaterialSystem::BlendType value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.SimpleBlendType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int color_blend_;
  int alpha_blend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class SimpleBlendSceneFactor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor) */ {
 public:
  SimpleBlendSceneFactor();
  virtual ~SimpleBlendSceneFactor();

  SimpleBlendSceneFactor(const SimpleBlendSceneFactor& from);
  SimpleBlendSceneFactor(SimpleBlendSceneFactor&& from) noexcept
    : SimpleBlendSceneFactor() {
    *this = ::std::move(from);
  }

  inline SimpleBlendSceneFactor& operator=(const SimpleBlendSceneFactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleBlendSceneFactor& operator=(SimpleBlendSceneFactor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SimpleBlendSceneFactor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleBlendSceneFactor* internal_default_instance() {
    return reinterpret_cast<const SimpleBlendSceneFactor*>(
               &_SimpleBlendSceneFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SimpleBlendSceneFactor& a, SimpleBlendSceneFactor& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleBlendSceneFactor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleBlendSceneFactor* New() const final {
    return CreateMaybeMessage<SimpleBlendSceneFactor>(nullptr);
  }

  SimpleBlendSceneFactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleBlendSceneFactor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SimpleBlendSceneFactor& from);
  void MergeFrom(const SimpleBlendSceneFactor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleBlendSceneFactor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorSrcFactorFieldNumber = 1,
    kColorDestFactorFieldNumber = 2,
    kAlphaSrcFactorFieldNumber = 3,
    kAlphaDestFactorFieldNumber = 4,
  };
  // .Tiny3D.Script.MaterialSystem.BlendFactor color_src_factor = 1;
  void clear_color_src_factor();
  ::Tiny3D::Script::MaterialSystem::BlendFactor color_src_factor() const;
  void set_color_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendFactor _internal_color_src_factor() const;
  void _internal_set_color_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.MaterialSystem.BlendFactor color_dest_factor = 2;
  void clear_color_dest_factor();
  ::Tiny3D::Script::MaterialSystem::BlendFactor color_dest_factor() const;
  void set_color_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendFactor _internal_color_dest_factor() const;
  void _internal_set_color_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_src_factor = 3;
  void clear_alpha_src_factor();
  ::Tiny3D::Script::MaterialSystem::BlendFactor alpha_src_factor() const;
  void set_alpha_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendFactor _internal_alpha_src_factor() const;
  void _internal_set_alpha_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  public:

  // .Tiny3D.Script.MaterialSystem.BlendFactor alpha_dest_factor = 4;
  void clear_alpha_dest_factor();
  ::Tiny3D::Script::MaterialSystem::BlendFactor alpha_dest_factor() const;
  void set_alpha_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendFactor _internal_alpha_dest_factor() const;
  void _internal_set_alpha_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int color_src_factor_;
  int color_dest_factor_;
  int alpha_src_factor_;
  int alpha_dest_factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class SeparateBlendScene :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.SeparateBlendScene) */ {
 public:
  SeparateBlendScene();
  virtual ~SeparateBlendScene();

  SeparateBlendScene(const SeparateBlendScene& from);
  SeparateBlendScene(SeparateBlendScene&& from) noexcept
    : SeparateBlendScene() {
    *this = ::std::move(from);
  }

  inline SeparateBlendScene& operator=(const SeparateBlendScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeparateBlendScene& operator=(SeparateBlendScene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SeparateBlendScene& default_instance();

  enum SeparateBlendSceneOneOfCase {
    kBlendType = 1,
    kBlendFactor = 2,
    SEPARATEBLENDSCENEONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeparateBlendScene* internal_default_instance() {
    return reinterpret_cast<const SeparateBlendScene*>(
               &_SeparateBlendScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SeparateBlendScene& a, SeparateBlendScene& b) {
    a.Swap(&b);
  }
  inline void Swap(SeparateBlendScene* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeparateBlendScene* New() const final {
    return CreateMaybeMessage<SeparateBlendScene>(nullptr);
  }

  SeparateBlendScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeparateBlendScene>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SeparateBlendScene& from);
  void MergeFrom(const SeparateBlendScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeparateBlendScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.SeparateBlendScene";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlendTypeFieldNumber = 1,
    kBlendFactorFieldNumber = 2,
  };
  // .Tiny3D.Script.MaterialSystem.SimpleBlendType blend_type = 1;
  bool has_blend_type() const;
  private:
  bool _internal_has_blend_type() const;
  public:
  void clear_blend_type();
  const ::Tiny3D::Script::MaterialSystem::SimpleBlendType& blend_type() const;
  ::Tiny3D::Script::MaterialSystem::SimpleBlendType* release_blend_type();
  ::Tiny3D::Script::MaterialSystem::SimpleBlendType* mutable_blend_type();
  void set_allocated_blend_type(::Tiny3D::Script::MaterialSystem::SimpleBlendType* blend_type);
  private:
  const ::Tiny3D::Script::MaterialSystem::SimpleBlendType& _internal_blend_type() const;
  ::Tiny3D::Script::MaterialSystem::SimpleBlendType* _internal_mutable_blend_type();
  public:

  // .Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor blend_factor = 2;
  bool has_blend_factor() const;
  private:
  bool _internal_has_blend_factor() const;
  public:
  void clear_blend_factor();
  const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor& blend_factor() const;
  ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* release_blend_factor();
  ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* mutable_blend_factor();
  void set_allocated_blend_factor(::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* blend_factor);
  private:
  const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor& _internal_blend_factor() const;
  ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* _internal_mutable_blend_factor();
  public:

  void clear_SeparateBlendSceneOneOf();
  SeparateBlendSceneOneOfCase SeparateBlendSceneOneOf_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.SeparateBlendScene)
 private:
  class _Internal;
  void set_has_blend_type();
  void set_has_blend_factor();

  inline bool has_SeparateBlendSceneOneOf() const;
  inline void clear_has_SeparateBlendSceneOneOf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union SeparateBlendSceneOneOfUnion {
    SeparateBlendSceneOneOfUnion() {}
    ::Tiny3D::Script::MaterialSystem::SimpleBlendType* blend_type_;
    ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* blend_factor_;
  } SeparateBlendSceneOneOf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class SeparateSceneBlendOperation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation) */ {
 public:
  SeparateSceneBlendOperation();
  virtual ~SeparateSceneBlendOperation();

  SeparateSceneBlendOperation(const SeparateSceneBlendOperation& from);
  SeparateSceneBlendOperation(SeparateSceneBlendOperation&& from) noexcept
    : SeparateSceneBlendOperation() {
    *this = ::std::move(from);
  }

  inline SeparateSceneBlendOperation& operator=(const SeparateSceneBlendOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeparateSceneBlendOperation& operator=(SeparateSceneBlendOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SeparateSceneBlendOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeparateSceneBlendOperation* internal_default_instance() {
    return reinterpret_cast<const SeparateSceneBlendOperation*>(
               &_SeparateSceneBlendOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SeparateSceneBlendOperation& a, SeparateSceneBlendOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(SeparateSceneBlendOperation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeparateSceneBlendOperation* New() const final {
    return CreateMaybeMessage<SeparateSceneBlendOperation>(nullptr);
  }

  SeparateSceneBlendOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeparateSceneBlendOperation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SeparateSceneBlendOperation& from);
  void MergeFrom(const SeparateSceneBlendOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeparateSceneBlendOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorOpFieldNumber = 1,
    kAlphaOpFieldNumber = 2,
  };
  // .Tiny3D.Script.MaterialSystem.BlendOperation color_op = 1;
  void clear_color_op();
  ::Tiny3D::Script::MaterialSystem::BlendOperation color_op() const;
  void set_color_op(::Tiny3D::Script::MaterialSystem::BlendOperation value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendOperation _internal_color_op() const;
  void _internal_set_color_op(::Tiny3D::Script::MaterialSystem::BlendOperation value);
  public:

  // .Tiny3D.Script.MaterialSystem.BlendOperation alpha_op = 2;
  void clear_alpha_op();
  ::Tiny3D::Script::MaterialSystem::BlendOperation alpha_op() const;
  void set_alpha_op(::Tiny3D::Script::MaterialSystem::BlendOperation value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendOperation _internal_alpha_op() const;
  void _internal_set_alpha_op(::Tiny3D::Script::MaterialSystem::BlendOperation value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int color_op_;
  int alpha_op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class DepthBias :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.DepthBias) */ {
 public:
  DepthBias();
  virtual ~DepthBias();

  DepthBias(const DepthBias& from);
  DepthBias(DepthBias&& from) noexcept
    : DepthBias() {
    *this = ::std::move(from);
  }

  inline DepthBias& operator=(const DepthBias& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthBias& operator=(DepthBias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DepthBias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthBias* internal_default_instance() {
    return reinterpret_cast<const DepthBias*>(
               &_DepthBias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DepthBias& a, DepthBias& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthBias* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthBias* New() const final {
    return CreateMaybeMessage<DepthBias>(nullptr);
  }

  DepthBias* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthBias>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DepthBias& from);
  void MergeFrom(const DepthBias& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DepthBias* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.DepthBias";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantBiasFieldNumber = 1,
    kSlopescaleBiasFieldNumber = 2,
  };
  // float constant_bias = 1;
  void clear_constant_bias();
  float constant_bias() const;
  void set_constant_bias(float value);
  private:
  float _internal_constant_bias() const;
  void _internal_set_constant_bias(float value);
  public:

  // float slopescale_bias = 2;
  void clear_slopescale_bias();
  float slopescale_bias() const;
  void set_slopescale_bias(float value);
  private:
  float _internal_slopescale_bias() const;
  void _internal_set_slopescale_bias(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.DepthBias)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float constant_bias_;
  float slopescale_bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class AlphaRejection :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.AlphaRejection) */ {
 public:
  AlphaRejection();
  virtual ~AlphaRejection();

  AlphaRejection(const AlphaRejection& from);
  AlphaRejection(AlphaRejection&& from) noexcept
    : AlphaRejection() {
    *this = ::std::move(from);
  }

  inline AlphaRejection& operator=(const AlphaRejection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlphaRejection& operator=(AlphaRejection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AlphaRejection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlphaRejection* internal_default_instance() {
    return reinterpret_cast<const AlphaRejection*>(
               &_AlphaRejection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AlphaRejection& a, AlphaRejection& b) {
    a.Swap(&b);
  }
  inline void Swap(AlphaRejection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlphaRejection* New() const final {
    return CreateMaybeMessage<AlphaRejection>(nullptr);
  }

  AlphaRejection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlphaRejection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AlphaRejection& from);
  void MergeFrom(const AlphaRejection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlphaRejection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.AlphaRejection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .Tiny3D.Script.MaterialSystem.CompareFunction function = 1;
  void clear_function();
  ::Tiny3D::Script::MaterialSystem::CompareFunction function() const;
  void set_function(::Tiny3D::Script::MaterialSystem::CompareFunction value);
  private:
  ::Tiny3D::Script::MaterialSystem::CompareFunction _internal_function() const;
  void _internal_set_function(::Tiny3D::Script::MaterialSystem::CompareFunction value);
  public:

  // uint32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.AlphaRejection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int function_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Fog :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.Fog) */ {
 public:
  Fog();
  virtual ~Fog();

  Fog(const Fog& from);
  Fog(Fog&& from) noexcept
    : Fog() {
    *this = ::std::move(from);
  }

  inline Fog& operator=(const Fog& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fog& operator=(Fog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Fog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fog* internal_default_instance() {
    return reinterpret_cast<const Fog*>(
               &_Fog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Fog& a, Fog& b) {
    a.Swap(&b);
  }
  inline void Swap(Fog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fog* New() const final {
    return CreateMaybeMessage<Fog>(nullptr);
  }

  Fog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fog>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Fog& from);
  void MergeFrom(const Fog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Fog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.Fog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 3,
    kOverridableFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDensityFieldNumber = 4,
    kStartFieldNumber = 5,
    kEndFieldNumber = 6,
  };
  // .Tiny3D.Script.MaterialSystem.Color color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Tiny3D::Script::MaterialSystem::Color& color() const;
  ::Tiny3D::Script::MaterialSystem::Color* release_color();
  ::Tiny3D::Script::MaterialSystem::Color* mutable_color();
  void set_allocated_color(::Tiny3D::Script::MaterialSystem::Color* color);
  private:
  const ::Tiny3D::Script::MaterialSystem::Color& _internal_color() const;
  ::Tiny3D::Script::MaterialSystem::Color* _internal_mutable_color();
  public:

  // bool overridable = 1;
  void clear_overridable();
  bool overridable() const;
  void set_overridable(bool value);
  private:
  bool _internal_overridable() const;
  void _internal_set_overridable(bool value);
  public:

  // .Tiny3D.Script.MaterialSystem.FogType type = 2;
  void clear_type();
  ::Tiny3D::Script::MaterialSystem::FogType type() const;
  void set_type(::Tiny3D::Script::MaterialSystem::FogType value);
  private:
  ::Tiny3D::Script::MaterialSystem::FogType _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::MaterialSystem::FogType value);
  public:

  // float density = 4;
  void clear_density();
  float density() const;
  void set_density(float value);
  private:
  float _internal_density() const;
  void _internal_set_density(float value);
  public:

  // float start = 5;
  void clear_start();
  float start() const;
  void set_start(float value);
  private:
  float _internal_start() const;
  void _internal_set_start(float value);
  public:

  // float end = 6;
  void clear_end();
  float end() const;
  void set_end(float value);
  private:
  float _internal_end() const;
  void _internal_set_end(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.Fog)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Tiny3D::Script::MaterialSystem::Color* color_;
  bool overridable_;
  int type_;
  float density_;
  float start_;
  float end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Iteration :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.Iteration) */ {
 public:
  Iteration();
  virtual ~Iteration();

  Iteration(const Iteration& from);
  Iteration(Iteration&& from) noexcept
    : Iteration() {
    *this = ::std::move(from);
  }

  inline Iteration& operator=(const Iteration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Iteration& operator=(Iteration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Iteration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Iteration* internal_default_instance() {
    return reinterpret_cast<const Iteration*>(
               &_Iteration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Iteration& a, Iteration& b) {
    a.Swap(&b);
  }
  inline void Swap(Iteration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Iteration* New() const final {
    return CreateMaybeMessage<Iteration>(nullptr);
  }

  Iteration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Iteration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Iteration& from);
  void MergeFrom(const Iteration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Iteration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.Iteration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNumberFieldNumber = 2,
    kLightTypeFieldNumber = 3,
    kNumLightsFieldNumber = 4,
  };
  // .Tiny3D.Script.MaterialSystem.IterationType type = 1;
  void clear_type();
  ::Tiny3D::Script::MaterialSystem::IterationType type() const;
  void set_type(::Tiny3D::Script::MaterialSystem::IterationType value);
  private:
  ::Tiny3D::Script::MaterialSystem::IterationType _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::MaterialSystem::IterationType value);
  public:

  // uint32 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Tiny3D.Script.MaterialSystem.LightType light_type = 3;
  void clear_light_type();
  ::Tiny3D::Script::MaterialSystem::LightType light_type() const;
  void set_light_type(::Tiny3D::Script::MaterialSystem::LightType value);
  private:
  ::Tiny3D::Script::MaterialSystem::LightType _internal_light_type() const;
  void _internal_set_light_type(::Tiny3D::Script::MaterialSystem::LightType value);
  public:

  // uint32 num_lights = 4;
  void clear_num_lights();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_lights() const;
  void set_num_lights(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_lights() const;
  void _internal_set_num_lights(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.Iteration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_;
  int light_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_lights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class PointSizeAttenuation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.PointSizeAttenuation) */ {
 public:
  PointSizeAttenuation();
  virtual ~PointSizeAttenuation();

  PointSizeAttenuation(const PointSizeAttenuation& from);
  PointSizeAttenuation(PointSizeAttenuation&& from) noexcept
    : PointSizeAttenuation() {
    *this = ::std::move(from);
  }

  inline PointSizeAttenuation& operator=(const PointSizeAttenuation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointSizeAttenuation& operator=(PointSizeAttenuation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PointSizeAttenuation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointSizeAttenuation* internal_default_instance() {
    return reinterpret_cast<const PointSizeAttenuation*>(
               &_PointSizeAttenuation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PointSizeAttenuation& a, PointSizeAttenuation& b) {
    a.Swap(&b);
  }
  inline void Swap(PointSizeAttenuation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointSizeAttenuation* New() const final {
    return CreateMaybeMessage<PointSizeAttenuation>(nullptr);
  }

  PointSizeAttenuation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointSizeAttenuation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PointSizeAttenuation& from);
  void MergeFrom(const PointSizeAttenuation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointSizeAttenuation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.PointSizeAttenuation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kConstantFieldNumber = 2,
    kLinearFieldNumber = 3,
    kQuadraticFieldNumber = 4,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // float constant = 2;
  void clear_constant();
  float constant() const;
  void set_constant(float value);
  private:
  float _internal_constant() const;
  void _internal_set_constant(float value);
  public:

  // float linear = 3;
  void clear_linear();
  float linear() const;
  void set_linear(float value);
  private:
  float _internal_linear() const;
  void _internal_set_linear(float value);
  public:

  // float quadratic = 4;
  void clear_quadratic();
  float quadratic() const;
  void set_quadratic(float value);
  private:
  float _internal_quadratic() const;
  void _internal_set_quadratic(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.PointSizeAttenuation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool enable_;
  float constant_;
  float linear_;
  float quadratic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Pass :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.Pass) */ {
 public:
  Pass();
  virtual ~Pass();

  Pass(const Pass& from);
  Pass(Pass&& from) noexcept
    : Pass() {
    *this = ::std::move(from);
  }

  inline Pass& operator=(const Pass& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pass& operator=(Pass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Pass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pass* internal_default_instance() {
    return reinterpret_cast<const Pass*>(
               &_Pass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Pass& a, Pass& b) {
    a.Swap(&b);
  }
  inline void Swap(Pass* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pass* New() const final {
    return CreateMaybeMessage<Pass>(nullptr);
  }

  Pass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pass>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Pass& from);
  void MergeFrom(const Pass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.Pass";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmbientFieldNumber = 1,
    kDiffuseFieldNumber = 2,
    kSpecularFieldNumber = 3,
    kEmissiveFieldNumber = 4,
    kSceneBlendFieldNumber = 6,
    kSeparateBlendSceneFieldNumber = 7,
    kSeparateSceneBlendOpFieldNumber = 9,
    kDepthBiasFieldNumber = 13,
    kAlphaRejectionFieldNumber = 15,
    kFogFieldNumber = 28,
    kIterationFieldNumber = 32,
    kPointSizeAttenuationFieldNumber = 35,
    kGpuProgramRefFieldNumber = 38,
    kShininessFieldNumber = 5,
    kSceneBlendOpFieldNumber = 8,
    kDepthFuncFieldNumber = 12,
    kDepthCheckFieldNumber = 10,
    kDepthWriteFieldNumber = 11,
    kAlphaToCoverageFieldNumber = 16,
    kLightScissorFieldNumber = 17,
    kIterationDepthBiasFieldNumber = 14,
    kIlluminationStageFieldNumber = 19,
    kTransparentSortingFieldNumber = 21,
    kCullHardwareFieldNumber = 22,
    kLightClipPlanesFieldNumber = 18,
    kNormailizeNormalsFieldNumber = 20,
    kLightingFieldNumber = 24,
    kPolygonModeOverrideableFieldNumber = 27,
    kCullSoftwareFieldNumber = 23,
    kShadingFieldNumber = 25,
    kPolygonModeFieldNumber = 26,
    kMaxLightsFieldNumber = 30,
    kStartLightFieldNumber = 31,
    kColorWriteFieldNumber = 29,
    kPointSpritesFieldNumber = 34,
    kPointSizeFieldNumber = 33,
    kPointSizeMinFieldNumber = 36,
    kPointSizeMaxFieldNumber = 37,
  };
  // .Tiny3D.Script.MaterialSystem.LightColor ambient = 1;
  bool has_ambient() const;
  private:
  bool _internal_has_ambient() const;
  public:
  void clear_ambient();
  const ::Tiny3D::Script::MaterialSystem::LightColor& ambient() const;
  ::Tiny3D::Script::MaterialSystem::LightColor* release_ambient();
  ::Tiny3D::Script::MaterialSystem::LightColor* mutable_ambient();
  void set_allocated_ambient(::Tiny3D::Script::MaterialSystem::LightColor* ambient);
  private:
  const ::Tiny3D::Script::MaterialSystem::LightColor& _internal_ambient() const;
  ::Tiny3D::Script::MaterialSystem::LightColor* _internal_mutable_ambient();
  public:

  // .Tiny3D.Script.MaterialSystem.LightColor diffuse = 2;
  bool has_diffuse() const;
  private:
  bool _internal_has_diffuse() const;
  public:
  void clear_diffuse();
  const ::Tiny3D::Script::MaterialSystem::LightColor& diffuse() const;
  ::Tiny3D::Script::MaterialSystem::LightColor* release_diffuse();
  ::Tiny3D::Script::MaterialSystem::LightColor* mutable_diffuse();
  void set_allocated_diffuse(::Tiny3D::Script::MaterialSystem::LightColor* diffuse);
  private:
  const ::Tiny3D::Script::MaterialSystem::LightColor& _internal_diffuse() const;
  ::Tiny3D::Script::MaterialSystem::LightColor* _internal_mutable_diffuse();
  public:

  // .Tiny3D.Script.MaterialSystem.LightColor specular = 3;
  bool has_specular() const;
  private:
  bool _internal_has_specular() const;
  public:
  void clear_specular();
  const ::Tiny3D::Script::MaterialSystem::LightColor& specular() const;
  ::Tiny3D::Script::MaterialSystem::LightColor* release_specular();
  ::Tiny3D::Script::MaterialSystem::LightColor* mutable_specular();
  void set_allocated_specular(::Tiny3D::Script::MaterialSystem::LightColor* specular);
  private:
  const ::Tiny3D::Script::MaterialSystem::LightColor& _internal_specular() const;
  ::Tiny3D::Script::MaterialSystem::LightColor* _internal_mutable_specular();
  public:

  // .Tiny3D.Script.MaterialSystem.LightColor emissive = 4;
  bool has_emissive() const;
  private:
  bool _internal_has_emissive() const;
  public:
  void clear_emissive();
  const ::Tiny3D::Script::MaterialSystem::LightColor& emissive() const;
  ::Tiny3D::Script::MaterialSystem::LightColor* release_emissive();
  ::Tiny3D::Script::MaterialSystem::LightColor* mutable_emissive();
  void set_allocated_emissive(::Tiny3D::Script::MaterialSystem::LightColor* emissive);
  private:
  const ::Tiny3D::Script::MaterialSystem::LightColor& _internal_emissive() const;
  ::Tiny3D::Script::MaterialSystem::LightColor* _internal_mutable_emissive();
  public:

  // .Tiny3D.Script.MaterialSystem.BlendScene scene_blend = 6;
  bool has_scene_blend() const;
  private:
  bool _internal_has_scene_blend() const;
  public:
  void clear_scene_blend();
  const ::Tiny3D::Script::MaterialSystem::BlendScene& scene_blend() const;
  ::Tiny3D::Script::MaterialSystem::BlendScene* release_scene_blend();
  ::Tiny3D::Script::MaterialSystem::BlendScene* mutable_scene_blend();
  void set_allocated_scene_blend(::Tiny3D::Script::MaterialSystem::BlendScene* scene_blend);
  private:
  const ::Tiny3D::Script::MaterialSystem::BlendScene& _internal_scene_blend() const;
  ::Tiny3D::Script::MaterialSystem::BlendScene* _internal_mutable_scene_blend();
  public:

  // .Tiny3D.Script.MaterialSystem.SeparateBlendScene separate_blend_scene = 7;
  bool has_separate_blend_scene() const;
  private:
  bool _internal_has_separate_blend_scene() const;
  public:
  void clear_separate_blend_scene();
  const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene& separate_blend_scene() const;
  ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* release_separate_blend_scene();
  ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* mutable_separate_blend_scene();
  void set_allocated_separate_blend_scene(::Tiny3D::Script::MaterialSystem::SeparateBlendScene* separate_blend_scene);
  private:
  const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene& _internal_separate_blend_scene() const;
  ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* _internal_mutable_separate_blend_scene();
  public:

  // .Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation separate_scene_blend_op = 9;
  bool has_separate_scene_blend_op() const;
  private:
  bool _internal_has_separate_scene_blend_op() const;
  public:
  void clear_separate_scene_blend_op();
  const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation& separate_scene_blend_op() const;
  ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* release_separate_scene_blend_op();
  ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* mutable_separate_scene_blend_op();
  void set_allocated_separate_scene_blend_op(::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* separate_scene_blend_op);
  private:
  const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation& _internal_separate_scene_blend_op() const;
  ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* _internal_mutable_separate_scene_blend_op();
  public:

  // .Tiny3D.Script.MaterialSystem.DepthBias depth_bias = 13;
  bool has_depth_bias() const;
  private:
  bool _internal_has_depth_bias() const;
  public:
  void clear_depth_bias();
  const ::Tiny3D::Script::MaterialSystem::DepthBias& depth_bias() const;
  ::Tiny3D::Script::MaterialSystem::DepthBias* release_depth_bias();
  ::Tiny3D::Script::MaterialSystem::DepthBias* mutable_depth_bias();
  void set_allocated_depth_bias(::Tiny3D::Script::MaterialSystem::DepthBias* depth_bias);
  private:
  const ::Tiny3D::Script::MaterialSystem::DepthBias& _internal_depth_bias() const;
  ::Tiny3D::Script::MaterialSystem::DepthBias* _internal_mutable_depth_bias();
  public:

  // .Tiny3D.Script.MaterialSystem.AlphaRejection alpha_rejection = 15;
  bool has_alpha_rejection() const;
  private:
  bool _internal_has_alpha_rejection() const;
  public:
  void clear_alpha_rejection();
  const ::Tiny3D::Script::MaterialSystem::AlphaRejection& alpha_rejection() const;
  ::Tiny3D::Script::MaterialSystem::AlphaRejection* release_alpha_rejection();
  ::Tiny3D::Script::MaterialSystem::AlphaRejection* mutable_alpha_rejection();
  void set_allocated_alpha_rejection(::Tiny3D::Script::MaterialSystem::AlphaRejection* alpha_rejection);
  private:
  const ::Tiny3D::Script::MaterialSystem::AlphaRejection& _internal_alpha_rejection() const;
  ::Tiny3D::Script::MaterialSystem::AlphaRejection* _internal_mutable_alpha_rejection();
  public:

  // .Tiny3D.Script.MaterialSystem.Fog fog = 28;
  bool has_fog() const;
  private:
  bool _internal_has_fog() const;
  public:
  void clear_fog();
  const ::Tiny3D::Script::MaterialSystem::Fog& fog() const;
  ::Tiny3D::Script::MaterialSystem::Fog* release_fog();
  ::Tiny3D::Script::MaterialSystem::Fog* mutable_fog();
  void set_allocated_fog(::Tiny3D::Script::MaterialSystem::Fog* fog);
  private:
  const ::Tiny3D::Script::MaterialSystem::Fog& _internal_fog() const;
  ::Tiny3D::Script::MaterialSystem::Fog* _internal_mutable_fog();
  public:

  // .Tiny3D.Script.MaterialSystem.Iteration iteration = 32;
  bool has_iteration() const;
  private:
  bool _internal_has_iteration() const;
  public:
  void clear_iteration();
  const ::Tiny3D::Script::MaterialSystem::Iteration& iteration() const;
  ::Tiny3D::Script::MaterialSystem::Iteration* release_iteration();
  ::Tiny3D::Script::MaterialSystem::Iteration* mutable_iteration();
  void set_allocated_iteration(::Tiny3D::Script::MaterialSystem::Iteration* iteration);
  private:
  const ::Tiny3D::Script::MaterialSystem::Iteration& _internal_iteration() const;
  ::Tiny3D::Script::MaterialSystem::Iteration* _internal_mutable_iteration();
  public:

  // .Tiny3D.Script.MaterialSystem.PointSizeAttenuation point_size_attenuation = 35;
  bool has_point_size_attenuation() const;
  private:
  bool _internal_has_point_size_attenuation() const;
  public:
  void clear_point_size_attenuation();
  const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation& point_size_attenuation() const;
  ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* release_point_size_attenuation();
  ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* mutable_point_size_attenuation();
  void set_allocated_point_size_attenuation(::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* point_size_attenuation);
  private:
  const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation& _internal_point_size_attenuation() const;
  ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* _internal_mutable_point_size_attenuation();
  public:

  // .Tiny3D.Script.MaterialSystem.GPUProgramRef gpu_program_ref = 38;
  bool has_gpu_program_ref() const;
  private:
  bool _internal_has_gpu_program_ref() const;
  public:
  void clear_gpu_program_ref();
  const ::Tiny3D::Script::MaterialSystem::GPUProgramRef& gpu_program_ref() const;
  ::Tiny3D::Script::MaterialSystem::GPUProgramRef* release_gpu_program_ref();
  ::Tiny3D::Script::MaterialSystem::GPUProgramRef* mutable_gpu_program_ref();
  void set_allocated_gpu_program_ref(::Tiny3D::Script::MaterialSystem::GPUProgramRef* gpu_program_ref);
  private:
  const ::Tiny3D::Script::MaterialSystem::GPUProgramRef& _internal_gpu_program_ref() const;
  ::Tiny3D::Script::MaterialSystem::GPUProgramRef* _internal_mutable_gpu_program_ref();
  public:

  // float shininess = 5;
  void clear_shininess();
  float shininess() const;
  void set_shininess(float value);
  private:
  float _internal_shininess() const;
  void _internal_set_shininess(float value);
  public:

  // .Tiny3D.Script.MaterialSystem.BlendOperation scene_blend_op = 8;
  void clear_scene_blend_op();
  ::Tiny3D::Script::MaterialSystem::BlendOperation scene_blend_op() const;
  void set_scene_blend_op(::Tiny3D::Script::MaterialSystem::BlendOperation value);
  private:
  ::Tiny3D::Script::MaterialSystem::BlendOperation _internal_scene_blend_op() const;
  void _internal_set_scene_blend_op(::Tiny3D::Script::MaterialSystem::BlendOperation value);
  public:

  // .Tiny3D.Script.MaterialSystem.CompareFunction depth_func = 12;
  void clear_depth_func();
  ::Tiny3D::Script::MaterialSystem::CompareFunction depth_func() const;
  void set_depth_func(::Tiny3D::Script::MaterialSystem::CompareFunction value);
  private:
  ::Tiny3D::Script::MaterialSystem::CompareFunction _internal_depth_func() const;
  void _internal_set_depth_func(::Tiny3D::Script::MaterialSystem::CompareFunction value);
  public:

  // bool depth_check = 10;
  void clear_depth_check();
  bool depth_check() const;
  void set_depth_check(bool value);
  private:
  bool _internal_depth_check() const;
  void _internal_set_depth_check(bool value);
  public:

  // bool depth_write = 11;
  void clear_depth_write();
  bool depth_write() const;
  void set_depth_write(bool value);
  private:
  bool _internal_depth_write() const;
  void _internal_set_depth_write(bool value);
  public:

  // bool alpha_to_coverage = 16;
  void clear_alpha_to_coverage();
  bool alpha_to_coverage() const;
  void set_alpha_to_coverage(bool value);
  private:
  bool _internal_alpha_to_coverage() const;
  void _internal_set_alpha_to_coverage(bool value);
  public:

  // bool light_scissor = 17;
  void clear_light_scissor();
  bool light_scissor() const;
  void set_light_scissor(bool value);
  private:
  bool _internal_light_scissor() const;
  void _internal_set_light_scissor(bool value);
  public:

  // float iteration_depth_bias = 14;
  void clear_iteration_depth_bias();
  float iteration_depth_bias() const;
  void set_iteration_depth_bias(float value);
  private:
  float _internal_iteration_depth_bias() const;
  void _internal_set_iteration_depth_bias(float value);
  public:

  // .Tiny3D.Script.MaterialSystem.IlluminationStage illumination_stage = 19;
  void clear_illumination_stage();
  ::Tiny3D::Script::MaterialSystem::IlluminationStage illumination_stage() const;
  void set_illumination_stage(::Tiny3D::Script::MaterialSystem::IlluminationStage value);
  private:
  ::Tiny3D::Script::MaterialSystem::IlluminationStage _internal_illumination_stage() const;
  void _internal_set_illumination_stage(::Tiny3D::Script::MaterialSystem::IlluminationStage value);
  public:

  // .Tiny3D.Script.MaterialSystem.TransparentSorting transparent_sorting = 21;
  void clear_transparent_sorting();
  ::Tiny3D::Script::MaterialSystem::TransparentSorting transparent_sorting() const;
  void set_transparent_sorting(::Tiny3D::Script::MaterialSystem::TransparentSorting value);
  private:
  ::Tiny3D::Script::MaterialSystem::TransparentSorting _internal_transparent_sorting() const;
  void _internal_set_transparent_sorting(::Tiny3D::Script::MaterialSystem::TransparentSorting value);
  public:

  // .Tiny3D.Script.MaterialSystem.CullHardware cull_hardware = 22;
  void clear_cull_hardware();
  ::Tiny3D::Script::MaterialSystem::CullHardware cull_hardware() const;
  void set_cull_hardware(::Tiny3D::Script::MaterialSystem::CullHardware value);
  private:
  ::Tiny3D::Script::MaterialSystem::CullHardware _internal_cull_hardware() const;
  void _internal_set_cull_hardware(::Tiny3D::Script::MaterialSystem::CullHardware value);
  public:

  // bool light_clip_planes = 18;
  void clear_light_clip_planes();
  bool light_clip_planes() const;
  void set_light_clip_planes(bool value);
  private:
  bool _internal_light_clip_planes() const;
  void _internal_set_light_clip_planes(bool value);
  public:

  // bool normailize_normals = 20;
  void clear_normailize_normals();
  bool normailize_normals() const;
  void set_normailize_normals(bool value);
  private:
  bool _internal_normailize_normals() const;
  void _internal_set_normailize_normals(bool value);
  public:

  // bool lighting = 24;
  void clear_lighting();
  bool lighting() const;
  void set_lighting(bool value);
  private:
  bool _internal_lighting() const;
  void _internal_set_lighting(bool value);
  public:

  // bool polygon_mode_overrideable = 27;
  void clear_polygon_mode_overrideable();
  bool polygon_mode_overrideable() const;
  void set_polygon_mode_overrideable(bool value);
  private:
  bool _internal_polygon_mode_overrideable() const;
  void _internal_set_polygon_mode_overrideable(bool value);
  public:

  // .Tiny3D.Script.MaterialSystem.CullSoftware cull_software = 23;
  void clear_cull_software();
  ::Tiny3D::Script::MaterialSystem::CullSoftware cull_software() const;
  void set_cull_software(::Tiny3D::Script::MaterialSystem::CullSoftware value);
  private:
  ::Tiny3D::Script::MaterialSystem::CullSoftware _internal_cull_software() const;
  void _internal_set_cull_software(::Tiny3D::Script::MaterialSystem::CullSoftware value);
  public:

  // .Tiny3D.Script.MaterialSystem.ShadingMode shading = 25;
  void clear_shading();
  ::Tiny3D::Script::MaterialSystem::ShadingMode shading() const;
  void set_shading(::Tiny3D::Script::MaterialSystem::ShadingMode value);
  private:
  ::Tiny3D::Script::MaterialSystem::ShadingMode _internal_shading() const;
  void _internal_set_shading(::Tiny3D::Script::MaterialSystem::ShadingMode value);
  public:

  // .Tiny3D.Script.MaterialSystem.PolygonMode polygon_mode = 26;
  void clear_polygon_mode();
  ::Tiny3D::Script::MaterialSystem::PolygonMode polygon_mode() const;
  void set_polygon_mode(::Tiny3D::Script::MaterialSystem::PolygonMode value);
  private:
  ::Tiny3D::Script::MaterialSystem::PolygonMode _internal_polygon_mode() const;
  void _internal_set_polygon_mode(::Tiny3D::Script::MaterialSystem::PolygonMode value);
  public:

  // uint32 max_lights = 30;
  void clear_max_lights();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_lights() const;
  void set_max_lights(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_lights() const;
  void _internal_set_max_lights(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 start_light = 31;
  void clear_start_light();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_light() const;
  void set_start_light(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_light() const;
  void _internal_set_start_light(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool color_write = 29;
  void clear_color_write();
  bool color_write() const;
  void set_color_write(bool value);
  private:
  bool _internal_color_write() const;
  void _internal_set_color_write(bool value);
  public:

  // bool point_sprites = 34;
  void clear_point_sprites();
  bool point_sprites() const;
  void set_point_sprites(bool value);
  private:
  bool _internal_point_sprites() const;
  void _internal_set_point_sprites(bool value);
  public:

  // float point_size = 33;
  void clear_point_size();
  float point_size() const;
  void set_point_size(float value);
  private:
  float _internal_point_size() const;
  void _internal_set_point_size(float value);
  public:

  // float point_size_min = 36;
  void clear_point_size_min();
  float point_size_min() const;
  void set_point_size_min(float value);
  private:
  float _internal_point_size_min() const;
  void _internal_set_point_size_min(float value);
  public:

  // float point_size_max = 37;
  void clear_point_size_max();
  float point_size_max() const;
  void set_point_size_max(float value);
  private:
  float _internal_point_size_max() const;
  void _internal_set_point_size_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.Pass)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Tiny3D::Script::MaterialSystem::LightColor* ambient_;
  ::Tiny3D::Script::MaterialSystem::LightColor* diffuse_;
  ::Tiny3D::Script::MaterialSystem::LightColor* specular_;
  ::Tiny3D::Script::MaterialSystem::LightColor* emissive_;
  ::Tiny3D::Script::MaterialSystem::BlendScene* scene_blend_;
  ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* separate_blend_scene_;
  ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* separate_scene_blend_op_;
  ::Tiny3D::Script::MaterialSystem::DepthBias* depth_bias_;
  ::Tiny3D::Script::MaterialSystem::AlphaRejection* alpha_rejection_;
  ::Tiny3D::Script::MaterialSystem::Fog* fog_;
  ::Tiny3D::Script::MaterialSystem::Iteration* iteration_;
  ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* point_size_attenuation_;
  ::Tiny3D::Script::MaterialSystem::GPUProgramRef* gpu_program_ref_;
  float shininess_;
  int scene_blend_op_;
  int depth_func_;
  bool depth_check_;
  bool depth_write_;
  bool alpha_to_coverage_;
  bool light_scissor_;
  float iteration_depth_bias_;
  int illumination_stage_;
  int transparent_sorting_;
  int cull_hardware_;
  bool light_clip_planes_;
  bool normailize_normals_;
  bool lighting_;
  bool polygon_mode_overrideable_;
  int cull_software_;
  int shading_;
  int polygon_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_lights_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_light_;
  bool color_write_;
  bool point_sprites_;
  float point_size_;
  float point_size_min_;
  float point_size_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class GPUVendorRule :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.GPUVendorRule) */ {
 public:
  GPUVendorRule();
  virtual ~GPUVendorRule();

  GPUVendorRule(const GPUVendorRule& from);
  GPUVendorRule(GPUVendorRule&& from) noexcept
    : GPUVendorRule() {
    *this = ::std::move(from);
  }

  inline GPUVendorRule& operator=(const GPUVendorRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUVendorRule& operator=(GPUVendorRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GPUVendorRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPUVendorRule* internal_default_instance() {
    return reinterpret_cast<const GPUVendorRule*>(
               &_GPUVendorRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GPUVendorRule& a, GPUVendorRule& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUVendorRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPUVendorRule* New() const final {
    return CreateMaybeMessage<GPUVendorRule>(nullptr);
  }

  GPUVendorRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPUVendorRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GPUVendorRule& from);
  void MergeFrom(const GPUVendorRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUVendorRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.GPUVendorRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 2,
    kRuleFieldNumber = 1,
  };
  // string vendor_name = 2;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  void set_vendor_name(const std::string& value);
  void set_vendor_name(std::string&& value);
  void set_vendor_name(const char* value);
  void set_vendor_name(const char* value, size_t size);
  std::string* mutable_vendor_name();
  std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);
  private:
  const std::string& _internal_vendor_name() const;
  void _internal_set_vendor_name(const std::string& value);
  std::string* _internal_mutable_vendor_name();
  public:

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  void clear_rule();
  ::Tiny3D::Script::MaterialSystem::GPURuleType rule() const;
  void set_rule(::Tiny3D::Script::MaterialSystem::GPURuleType value);
  private:
  ::Tiny3D::Script::MaterialSystem::GPURuleType _internal_rule() const;
  void _internal_set_rule(::Tiny3D::Script::MaterialSystem::GPURuleType value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.GPUVendorRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
  int rule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class GPUDeviceRule :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.GPUDeviceRule) */ {
 public:
  GPUDeviceRule();
  virtual ~GPUDeviceRule();

  GPUDeviceRule(const GPUDeviceRule& from);
  GPUDeviceRule(GPUDeviceRule&& from) noexcept
    : GPUDeviceRule() {
    *this = ::std::move(from);
  }

  inline GPUDeviceRule& operator=(const GPUDeviceRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUDeviceRule& operator=(GPUDeviceRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GPUDeviceRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPUDeviceRule* internal_default_instance() {
    return reinterpret_cast<const GPUDeviceRule*>(
               &_GPUDeviceRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GPUDeviceRule& a, GPUDeviceRule& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUDeviceRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPUDeviceRule* New() const final {
    return CreateMaybeMessage<GPUDeviceRule>(nullptr);
  }

  GPUDeviceRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPUDeviceRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GPUDeviceRule& from);
  void MergeFrom(const GPUDeviceRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUDeviceRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.GPUDeviceRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicePatternFieldNumber = 2,
    kRuleFieldNumber = 1,
    kCaseSensitiveFieldNumber = 3,
  };
  // string device_pattern = 2;
  void clear_device_pattern();
  const std::string& device_pattern() const;
  void set_device_pattern(const std::string& value);
  void set_device_pattern(std::string&& value);
  void set_device_pattern(const char* value);
  void set_device_pattern(const char* value, size_t size);
  std::string* mutable_device_pattern();
  std::string* release_device_pattern();
  void set_allocated_device_pattern(std::string* device_pattern);
  private:
  const std::string& _internal_device_pattern() const;
  void _internal_set_device_pattern(const std::string& value);
  std::string* _internal_mutable_device_pattern();
  public:

  // .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
  void clear_rule();
  ::Tiny3D::Script::MaterialSystem::GPURuleType rule() const;
  void set_rule(::Tiny3D::Script::MaterialSystem::GPURuleType value);
  private:
  ::Tiny3D::Script::MaterialSystem::GPURuleType _internal_rule() const;
  void _internal_set_rule(::Tiny3D::Script::MaterialSystem::GPURuleType value);
  public:

  // bool case_sensitive = 3;
  void clear_case_sensitive();
  bool case_sensitive() const;
  void set_case_sensitive(bool value);
  private:
  bool _internal_case_sensitive() const;
  void _internal_set_case_sensitive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.GPUDeviceRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_pattern_;
  int rule_;
  bool case_sensitive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Technique :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.Technique) */ {
 public:
  Technique();
  virtual ~Technique();

  Technique(const Technique& from);
  Technique(Technique&& from) noexcept
    : Technique() {
    *this = ::std::move(from);
  }

  inline Technique& operator=(const Technique& from) {
    CopyFrom(from);
    return *this;
  }
  inline Technique& operator=(Technique&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Technique& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Technique* internal_default_instance() {
    return reinterpret_cast<const Technique*>(
               &_Technique_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Technique& a, Technique& b) {
    a.Swap(&b);
  }
  inline void Swap(Technique* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Technique* New() const final {
    return CreateMaybeMessage<Technique>(nullptr);
  }

  Technique* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Technique>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Technique& from);
  void MergeFrom(const Technique& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Technique* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.Technique";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemeFieldNumber = 4,
    kShadowCasterMaterialFieldNumber = 5,
    kShadowReceiverMaterialFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kGpuVendorRuleFieldNumber = 7,
    kGpuDeviceRuleFieldNumber = 8,
    kRenderQueueFieldNumber = 2,
    kLodIndexFieldNumber = 3,
  };
  // string scheme = 4;
  void clear_scheme();
  const std::string& scheme() const;
  void set_scheme(const std::string& value);
  void set_scheme(std::string&& value);
  void set_scheme(const char* value);
  void set_scheme(const char* value, size_t size);
  std::string* mutable_scheme();
  std::string* release_scheme();
  void set_allocated_scheme(std::string* scheme);
  private:
  const std::string& _internal_scheme() const;
  void _internal_set_scheme(const std::string& value);
  std::string* _internal_mutable_scheme();
  public:

  // string shadow_caster_material = 5;
  void clear_shadow_caster_material();
  const std::string& shadow_caster_material() const;
  void set_shadow_caster_material(const std::string& value);
  void set_shadow_caster_material(std::string&& value);
  void set_shadow_caster_material(const char* value);
  void set_shadow_caster_material(const char* value, size_t size);
  std::string* mutable_shadow_caster_material();
  std::string* release_shadow_caster_material();
  void set_allocated_shadow_caster_material(std::string* shadow_caster_material);
  private:
  const std::string& _internal_shadow_caster_material() const;
  void _internal_set_shadow_caster_material(const std::string& value);
  std::string* _internal_mutable_shadow_caster_material();
  public:

  // string shadow_receiver_material = 6;
  void clear_shadow_receiver_material();
  const std::string& shadow_receiver_material() const;
  void set_shadow_receiver_material(const std::string& value);
  void set_shadow_receiver_material(std::string&& value);
  void set_shadow_receiver_material(const char* value);
  void set_shadow_receiver_material(const char* value, size_t size);
  std::string* mutable_shadow_receiver_material();
  std::string* release_shadow_receiver_material();
  void set_allocated_shadow_receiver_material(std::string* shadow_receiver_material);
  private:
  const std::string& _internal_shadow_receiver_material() const;
  void _internal_set_shadow_receiver_material(const std::string& value);
  std::string* _internal_mutable_shadow_receiver_material();
  public:

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::MaterialSystem::Header& header() const;
  ::Tiny3D::Script::MaterialSystem::Header* release_header();
  ::Tiny3D::Script::MaterialSystem::Header* mutable_header();
  void set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header);
  private:
  const ::Tiny3D::Script::MaterialSystem::Header& _internal_header() const;
  ::Tiny3D::Script::MaterialSystem::Header* _internal_mutable_header();
  public:

  // .Tiny3D.Script.MaterialSystem.GPUVendorRule gpu_vendor_rule = 7;
  bool has_gpu_vendor_rule() const;
  private:
  bool _internal_has_gpu_vendor_rule() const;
  public:
  void clear_gpu_vendor_rule();
  const ::Tiny3D::Script::MaterialSystem::GPUVendorRule& gpu_vendor_rule() const;
  ::Tiny3D::Script::MaterialSystem::GPUVendorRule* release_gpu_vendor_rule();
  ::Tiny3D::Script::MaterialSystem::GPUVendorRule* mutable_gpu_vendor_rule();
  void set_allocated_gpu_vendor_rule(::Tiny3D::Script::MaterialSystem::GPUVendorRule* gpu_vendor_rule);
  private:
  const ::Tiny3D::Script::MaterialSystem::GPUVendorRule& _internal_gpu_vendor_rule() const;
  ::Tiny3D::Script::MaterialSystem::GPUVendorRule* _internal_mutable_gpu_vendor_rule();
  public:

  // .Tiny3D.Script.MaterialSystem.GPUDeviceRule gpu_device_rule = 8;
  bool has_gpu_device_rule() const;
  private:
  bool _internal_has_gpu_device_rule() const;
  public:
  void clear_gpu_device_rule();
  const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule& gpu_device_rule() const;
  ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* release_gpu_device_rule();
  ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* mutable_gpu_device_rule();
  void set_allocated_gpu_device_rule(::Tiny3D::Script::MaterialSystem::GPUDeviceRule* gpu_device_rule);
  private:
  const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule& _internal_gpu_device_rule() const;
  ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* _internal_mutable_gpu_device_rule();
  public:

  // uint32 render_queue = 2;
  void clear_render_queue();
  ::PROTOBUF_NAMESPACE_ID::uint32 render_queue() const;
  void set_render_queue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_render_queue() const;
  void _internal_set_render_queue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lod_index = 3;
  void clear_lod_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 lod_index() const;
  void set_lod_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lod_index() const;
  void _internal_set_lod_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.Technique)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheme_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shadow_caster_material_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shadow_receiver_material_;
  ::Tiny3D::Script::MaterialSystem::Header* header_;
  ::Tiny3D::Script::MaterialSystem::GPUVendorRule* gpu_vendor_rule_;
  ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* gpu_device_rule_;
  ::PROTOBUF_NAMESPACE_ID::uint32 render_queue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lod_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class LODValues :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.LODValues) */ {
 public:
  LODValues();
  virtual ~LODValues();

  LODValues(const LODValues& from);
  LODValues(LODValues&& from) noexcept
    : LODValues() {
    *this = ::std::move(from);
  }

  inline LODValues& operator=(const LODValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline LODValues& operator=(LODValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LODValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LODValues* internal_default_instance() {
    return reinterpret_cast<const LODValues*>(
               &_LODValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(LODValues& a, LODValues& b) {
    a.Swap(&b);
  }
  inline void Swap(LODValues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LODValues* New() const final {
    return CreateMaybeMessage<LODValues>(nullptr);
  }

  LODValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LODValues>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LODValues& from);
  void MergeFrom(const LODValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LODValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.LODValues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kStrategyFieldNumber = 3,
    kNumberFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // string strategy = 3;
  void clear_strategy();
  const std::string& strategy() const;
  void set_strategy(const std::string& value);
  void set_strategy(std::string&& value);
  void set_strategy(const char* value);
  void set_strategy(const char* value, size_t size);
  std::string* mutable_strategy();
  std::string* release_strategy();
  void set_allocated_strategy(std::string* strategy);
  private:
  const std::string& _internal_strategy() const;
  void _internal_set_strategy(const std::string& value);
  std::string* _internal_mutable_strategy();
  public:

  // uint32 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.LODValues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class TextureAlias :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.TextureAlias) */ {
 public:
  TextureAlias();
  virtual ~TextureAlias();

  TextureAlias(const TextureAlias& from);
  TextureAlias(TextureAlias&& from) noexcept
    : TextureAlias() {
    *this = ::std::move(from);
  }

  inline TextureAlias& operator=(const TextureAlias& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureAlias& operator=(TextureAlias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TextureAlias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextureAlias* internal_default_instance() {
    return reinterpret_cast<const TextureAlias*>(
               &_TextureAlias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TextureAlias& a, TextureAlias& b) {
    a.Swap(&b);
  }
  inline void Swap(TextureAlias* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextureAlias* New() const final {
    return CreateMaybeMessage<TextureAlias>(nullptr);
  }

  TextureAlias* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextureAlias>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TextureAlias& from);
  void MergeFrom(const TextureAlias& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TextureAlias* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.TextureAlias";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliasNameFieldNumber = 1,
    kTextureNameFieldNumber = 2,
  };
  // string aliasName = 1;
  void clear_aliasname();
  const std::string& aliasname() const;
  void set_aliasname(const std::string& value);
  void set_aliasname(std::string&& value);
  void set_aliasname(const char* value);
  void set_aliasname(const char* value, size_t size);
  std::string* mutable_aliasname();
  std::string* release_aliasname();
  void set_allocated_aliasname(std::string* aliasname);
  private:
  const std::string& _internal_aliasname() const;
  void _internal_set_aliasname(const std::string& value);
  std::string* _internal_mutable_aliasname();
  public:

  // string textureName = 2;
  void clear_texturename();
  const std::string& texturename() const;
  void set_texturename(const std::string& value);
  void set_texturename(std::string&& value);
  void set_texturename(const char* value);
  void set_texturename(const char* value, size_t size);
  std::string* mutable_texturename();
  std::string* release_texturename();
  void set_allocated_texturename(std::string* texturename);
  private:
  const std::string& _internal_texturename() const;
  void _internal_set_texturename(const std::string& value);
  std::string* _internal_mutable_texturename();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.TextureAlias)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aliasname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texturename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Material :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Tiny3D.Script.MaterialSystem.Material) */ {
 public:
  Material();
  virtual ~Material();

  Material(const Material& from);
  Material(Material&& from) noexcept
    : Material() {
    *this = ::std::move(from);
  }

  inline Material& operator=(const Material& from) {
    CopyFrom(from);
    return *this;
  }
  inline Material& operator=(Material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material* internal_default_instance() {
    return reinterpret_cast<const Material*>(
               &_Material_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Material& a, Material& b) {
    a.Swap(&b);
  }
  inline void Swap(Material* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Material* New() const final {
    return CreateMaybeMessage<Material>(nullptr);
  }

  Material* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Material>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Material& from);
  void MergeFrom(const Material& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Material* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.MaterialSystem.Material";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTechniquesFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kValuesFieldNumber = 2,
    kTextureAliasFieldNumber = 5,
    kReceiveShadowsFieldNumber = 3,
    kTransparencyCastsShadowsFieldNumber = 4,
  };
  // repeated .Tiny3D.Script.MaterialSystem.Technique techniques = 6;
  int techniques_size() const;
  private:
  int _internal_techniques_size() const;
  public:
  void clear_techniques();
  ::Tiny3D::Script::MaterialSystem::Technique* mutable_techniques(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Technique >*
      mutable_techniques();
  private:
  const ::Tiny3D::Script::MaterialSystem::Technique& _internal_techniques(int index) const;
  ::Tiny3D::Script::MaterialSystem::Technique* _internal_add_techniques();
  public:
  const ::Tiny3D::Script::MaterialSystem::Technique& techniques(int index) const;
  ::Tiny3D::Script::MaterialSystem::Technique* add_techniques();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Technique >&
      techniques() const;

  // .Tiny3D.Script.MaterialSystem.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::MaterialSystem::Header& header() const;
  ::Tiny3D::Script::MaterialSystem::Header* release_header();
  ::Tiny3D::Script::MaterialSystem::Header* mutable_header();
  void set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header);
  private:
  const ::Tiny3D::Script::MaterialSystem::Header& _internal_header() const;
  ::Tiny3D::Script::MaterialSystem::Header* _internal_mutable_header();
  public:

  // .Tiny3D.Script.MaterialSystem.LODValues values = 2;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::Tiny3D::Script::MaterialSystem::LODValues& values() const;
  ::Tiny3D::Script::MaterialSystem::LODValues* release_values();
  ::Tiny3D::Script::MaterialSystem::LODValues* mutable_values();
  void set_allocated_values(::Tiny3D::Script::MaterialSystem::LODValues* values);
  private:
  const ::Tiny3D::Script::MaterialSystem::LODValues& _internal_values() const;
  ::Tiny3D::Script::MaterialSystem::LODValues* _internal_mutable_values();
  public:

  // .Tiny3D.Script.MaterialSystem.TextureAlias texture_alias = 5;
  bool has_texture_alias() const;
  private:
  bool _internal_has_texture_alias() const;
  public:
  void clear_texture_alias();
  const ::Tiny3D::Script::MaterialSystem::TextureAlias& texture_alias() const;
  ::Tiny3D::Script::MaterialSystem::TextureAlias* release_texture_alias();
  ::Tiny3D::Script::MaterialSystem::TextureAlias* mutable_texture_alias();
  void set_allocated_texture_alias(::Tiny3D::Script::MaterialSystem::TextureAlias* texture_alias);
  private:
  const ::Tiny3D::Script::MaterialSystem::TextureAlias& _internal_texture_alias() const;
  ::Tiny3D::Script::MaterialSystem::TextureAlias* _internal_mutable_texture_alias();
  public:

  // bool receive_shadows = 3;
  void clear_receive_shadows();
  bool receive_shadows() const;
  void set_receive_shadows(bool value);
  private:
  bool _internal_receive_shadows() const;
  void _internal_set_receive_shadows(bool value);
  public:

  // bool transparency_casts_shadows = 4;
  void clear_transparency_casts_shadows();
  bool transparency_casts_shadows() const;
  void set_transparency_casts_shadows(bool value);
  private:
  bool _internal_transparency_casts_shadows() const;
  void _internal_set_transparency_casts_shadows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.MaterialSystem.Material)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Technique > techniques_;
  ::Tiny3D::Script::MaterialSystem::Header* header_;
  ::Tiny3D::Script::MaterialSystem::LODValues* values_;
  ::Tiny3D::Script::MaterialSystem::TextureAlias* texture_alias_;
  bool receive_shadows_;
  bool transparency_casts_shadows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MaterialScriptObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// uint32 ID = 1;
inline void Header::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::id() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Header.ID)
  return _internal_id();
}
inline void Header::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Header::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Header.ID)
}

// string name = 3;
inline void Header::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Header::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Header.name)
  return _internal_name();
}
inline void Header::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Header.name)
}
inline std::string* Header::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Header.name)
  return _internal_mutable_name();
}
inline const std::string& Header::_internal_name() const {
  return name_.GetNoArena();
}
inline void Header::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Header::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.Header.name)
}
inline void Header::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.Header.name)
}
inline void Header::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.Header.name)
}
inline std::string* Header::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Header::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Header.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Header.name)
}

// -------------------------------------------------------------------

// Shader

// .Tiny3D.Script.MaterialSystem.Header header = 1;
inline bool Shader::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Shader::has_header() const {
  return _internal_has_header();
}
inline void Shader::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Header& Shader::_internal_header() const {
  const ::Tiny3D::Script::MaterialSystem::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Header*>(
      &::Tiny3D::Script::MaterialSystem::_Header_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Header& Shader::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Shader.header)
  return _internal_header();
}
inline ::Tiny3D::Script::MaterialSystem::Header* Shader::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Shader.header)
  
  ::Tiny3D::Script::MaterialSystem::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Header* Shader::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::MaterialSystem::Header* Shader::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Shader.header)
  return _internal_mutable_header();
}
inline void Shader::set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Shader.header)
}

// string source = 2;
inline void Shader::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Shader::source() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Shader.source)
  return _internal_source();
}
inline void Shader::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Shader.source)
}
inline std::string* Shader::mutable_source() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Shader.source)
  return _internal_mutable_source();
}
inline const std::string& Shader::_internal_source() const {
  return source_.GetNoArena();
}
inline void Shader::_internal_set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Shader::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.Shader.source)
}
inline void Shader::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.Shader.source)
}
inline void Shader::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.Shader.source)
}
inline std::string* Shader::_internal_mutable_source() {
  
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Shader::release_source() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Shader.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Shader::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Shader.source)
}

// string target = 3;
inline void Shader::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Shader::target() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Shader.target)
  return _internal_target();
}
inline void Shader::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Shader.target)
}
inline std::string* Shader::mutable_target() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Shader.target)
  return _internal_mutable_target();
}
inline const std::string& Shader::_internal_target() const {
  return target_.GetNoArena();
}
inline void Shader::_internal_set_target(const std::string& value) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Shader::set_target(std::string&& value) {
  
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.Shader.target)
}
inline void Shader::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.Shader.target)
}
inline void Shader::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.Shader.target)
}
inline std::string* Shader::_internal_mutable_target() {
  
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Shader::release_target() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Shader.target)
  
  return target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Shader::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Shader.target)
}

// string entry = 4;
inline void Shader::clear_entry() {
  entry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Shader::entry() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Shader.entry)
  return _internal_entry();
}
inline void Shader::set_entry(const std::string& value) {
  _internal_set_entry(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Shader.entry)
}
inline std::string* Shader::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Shader.entry)
  return _internal_mutable_entry();
}
inline const std::string& Shader::_internal_entry() const {
  return entry_.GetNoArena();
}
inline void Shader::_internal_set_entry(const std::string& value) {
  
  entry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Shader::set_entry(std::string&& value) {
  
  entry_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.Shader.entry)
}
inline void Shader::set_entry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.Shader.entry)
}
inline void Shader::set_entry(const char* value, size_t size) {
  
  entry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.Shader.entry)
}
inline std::string* Shader::_internal_mutable_entry() {
  
  return entry_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Shader::release_entry() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Shader.entry)
  
  return entry_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Shader::set_allocated_entry(std::string* entry) {
  if (entry != nullptr) {
    
  } else {
    
  }
  entry_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Shader.entry)
}

// string stage = 5;
inline void Shader::clear_stage() {
  stage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Shader::stage() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Shader.stage)
  return _internal_stage();
}
inline void Shader::set_stage(const std::string& value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Shader.stage)
}
inline std::string* Shader::mutable_stage() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Shader.stage)
  return _internal_mutable_stage();
}
inline const std::string& Shader::_internal_stage() const {
  return stage_.GetNoArena();
}
inline void Shader::_internal_set_stage(const std::string& value) {
  
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Shader::set_stage(std::string&& value) {
  
  stage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.Shader.stage)
}
inline void Shader::set_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.Shader.stage)
}
inline void Shader::set_stage(const char* value, size_t size) {
  
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.Shader.stage)
}
inline std::string* Shader::_internal_mutable_stage() {
  
  return stage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Shader::release_stage() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Shader.stage)
  
  return stage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Shader::set_allocated_stage(std::string* stage) {
  if (stage != nullptr) {
    
  } else {
    
  }
  stage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stage);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Shader.stage)
}

// -------------------------------------------------------------------

// GPUProgram

// .Tiny3D.Script.MaterialSystem.Header header = 1;
inline bool GPUProgram::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GPUProgram::has_header() const {
  return _internal_has_header();
}
inline void GPUProgram::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Header& GPUProgram::_internal_header() const {
  const ::Tiny3D::Script::MaterialSystem::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Header*>(
      &::Tiny3D::Script::MaterialSystem::_Header_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Header& GPUProgram::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUProgram.header)
  return _internal_header();
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUProgram::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.GPUProgram.header)
  
  ::Tiny3D::Script::MaterialSystem::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUProgram::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUProgram::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUProgram.header)
  return _internal_mutable_header();
}
inline void GPUProgram::set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.GPUProgram.header)
}

// repeated .Tiny3D.Script.MaterialSystem.Shader shaders = 2;
inline int GPUProgram::_internal_shaders_size() const {
  return shaders_.size();
}
inline int GPUProgram::shaders_size() const {
  return _internal_shaders_size();
}
inline void GPUProgram::clear_shaders() {
  shaders_.Clear();
}
inline ::Tiny3D::Script::MaterialSystem::Shader* GPUProgram::mutable_shaders(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUProgram.shaders)
  return shaders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Shader >*
GPUProgram::mutable_shaders() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.GPUProgram.shaders)
  return &shaders_;
}
inline const ::Tiny3D::Script::MaterialSystem::Shader& GPUProgram::_internal_shaders(int index) const {
  return shaders_.Get(index);
}
inline const ::Tiny3D::Script::MaterialSystem::Shader& GPUProgram::shaders(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUProgram.shaders)
  return _internal_shaders(index);
}
inline ::Tiny3D::Script::MaterialSystem::Shader* GPUProgram::_internal_add_shaders() {
  return shaders_.Add();
}
inline ::Tiny3D::Script::MaterialSystem::Shader* GPUProgram::add_shaders() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.GPUProgram.shaders)
  return _internal_add_shaders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Shader >&
GPUProgram::shaders() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.GPUProgram.shaders)
  return shaders_;
}

// -------------------------------------------------------------------

// GPUConstantBufferRef

// .Tiny3D.Script.MaterialSystem.Header header = 1;
inline bool GPUConstantBufferRef::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GPUConstantBufferRef::has_header() const {
  return _internal_has_header();
}
inline void GPUConstantBufferRef::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Header& GPUConstantBufferRef::_internal_header() const {
  const ::Tiny3D::Script::MaterialSystem::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Header*>(
      &::Tiny3D::Script::MaterialSystem::_Header_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Header& GPUConstantBufferRef::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef.header)
  return _internal_header();
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUConstantBufferRef::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef.header)
  
  ::Tiny3D::Script::MaterialSystem::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUConstantBufferRef::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUConstantBufferRef::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef.header)
  return _internal_mutable_header();
}
inline void GPUConstantBufferRef::set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef.header)
}

// uint32 slot = 2;
inline void GPUConstantBufferRef::clear_slot() {
  slot_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPUConstantBufferRef::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPUConstantBufferRef::slot() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef.slot)
  return _internal_slot();
}
inline void GPUConstantBufferRef::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  slot_ = value;
}
inline void GPUConstantBufferRef::set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.GPUConstantBufferRef.slot)
}

// -------------------------------------------------------------------

// GPUProgramRef

// .Tiny3D.Script.MaterialSystem.Header header = 1;
inline bool GPUProgramRef::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GPUProgramRef::has_header() const {
  return _internal_has_header();
}
inline void GPUProgramRef::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Header& GPUProgramRef::_internal_header() const {
  const ::Tiny3D::Script::MaterialSystem::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Header*>(
      &::Tiny3D::Script::MaterialSystem::_Header_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Header& GPUProgramRef::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUProgramRef.header)
  return _internal_header();
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUProgramRef::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.GPUProgramRef.header)
  
  ::Tiny3D::Script::MaterialSystem::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUProgramRef::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUProgramRef::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUProgramRef.header)
  return _internal_mutable_header();
}
inline void GPUProgramRef::set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.GPUProgramRef.header)
}

// repeated .Tiny3D.Script.MaterialSystem.GPUConstantBufferRef gpu_cbuffer_ref = 2;
inline int GPUProgramRef::_internal_gpu_cbuffer_ref_size() const {
  return gpu_cbuffer_ref_.size();
}
inline int GPUProgramRef::gpu_cbuffer_ref_size() const {
  return _internal_gpu_cbuffer_ref_size();
}
inline void GPUProgramRef::clear_gpu_cbuffer_ref() {
  gpu_cbuffer_ref_.Clear();
}
inline ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* GPUProgramRef::mutable_gpu_cbuffer_ref(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUProgramRef.gpu_cbuffer_ref)
  return gpu_cbuffer_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef >*
GPUProgramRef::mutable_gpu_cbuffer_ref() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.GPUProgramRef.gpu_cbuffer_ref)
  return &gpu_cbuffer_ref_;
}
inline const ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef& GPUProgramRef::_internal_gpu_cbuffer_ref(int index) const {
  return gpu_cbuffer_ref_.Get(index);
}
inline const ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef& GPUProgramRef::gpu_cbuffer_ref(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUProgramRef.gpu_cbuffer_ref)
  return _internal_gpu_cbuffer_ref(index);
}
inline ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* GPUProgramRef::_internal_add_gpu_cbuffer_ref() {
  return gpu_cbuffer_ref_.Add();
}
inline ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef* GPUProgramRef::add_gpu_cbuffer_ref() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.GPUProgramRef.gpu_cbuffer_ref)
  return _internal_add_gpu_cbuffer_ref();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::GPUConstantBufferRef >&
GPUProgramRef::gpu_cbuffer_ref() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.GPUProgramRef.gpu_cbuffer_ref)
  return gpu_cbuffer_ref_;
}

// -------------------------------------------------------------------

// ParamIndexed

// uint32 index = 1;
inline void ParamIndexed::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamIndexed::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamIndexed::index() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamIndexed.index)
  return _internal_index();
}
inline void ParamIndexed::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void ParamIndexed::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamIndexed.index)
}

// .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
inline void ParamIndexed::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BuiltInType ParamIndexed::_internal_type() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BuiltInType >(type_);
}
inline ::Tiny3D::Script::MaterialSystem::BuiltInType ParamIndexed::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamIndexed.type)
  return _internal_type();
}
inline void ParamIndexed::_internal_set_type(::Tiny3D::Script::MaterialSystem::BuiltInType value) {
  
  type_ = value;
}
inline void ParamIndexed::set_type(::Tiny3D::Script::MaterialSystem::BuiltInType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamIndexed.type)
}

// uint32 num_values = 3;
inline void ParamIndexed::clear_num_values() {
  num_values_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamIndexed::_internal_num_values() const {
  return num_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamIndexed::num_values() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamIndexed.num_values)
  return _internal_num_values();
}
inline void ParamIndexed::_internal_set_num_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_values_ = value;
}
inline void ParamIndexed::set_num_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_values(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamIndexed.num_values)
}

// repeated float values = 4;
inline int ParamIndexed::_internal_values_size() const {
  return values_.size();
}
inline int ParamIndexed::values_size() const {
  return _internal_values_size();
}
inline void ParamIndexed::clear_values() {
  values_.Clear();
}
inline float ParamIndexed::_internal_values(int index) const {
  return values_.Get(index);
}
inline float ParamIndexed::values(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamIndexed.values)
  return _internal_values(index);
}
inline void ParamIndexed::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamIndexed.values)
}
inline void ParamIndexed::_internal_add_values(float value) {
  values_.Add(value);
}
inline void ParamIndexed::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.ParamIndexed.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamIndexed::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamIndexed::values() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.ParamIndexed.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamIndexed::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamIndexed::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.ParamIndexed.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// ParamIndexedAuto

// uint32 index = 1;
inline void ParamIndexedAuto::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamIndexedAuto::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamIndexedAuto::index() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.index)
  return _internal_index();
}
inline void ParamIndexedAuto::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void ParamIndexedAuto::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.index)
}

// uint32 value_code = 2;
inline void ParamIndexedAuto::clear_value_code() {
  value_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamIndexedAuto::_internal_value_code() const {
  return value_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamIndexedAuto::value_code() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.value_code)
  return _internal_value_code();
}
inline void ParamIndexedAuto::_internal_set_value_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_code_ = value;
}
inline void ParamIndexedAuto::set_value_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value_code(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.value_code)
}

// bytes extra_params = 3;
inline void ParamIndexedAuto::clear_extra_params() {
  extra_params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParamIndexedAuto::extra_params() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.extra_params)
  return _internal_extra_params();
}
inline void ParamIndexedAuto::set_extra_params(const std::string& value) {
  _internal_set_extra_params(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.extra_params)
}
inline std::string* ParamIndexedAuto::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.extra_params)
  return _internal_mutable_extra_params();
}
inline const std::string& ParamIndexedAuto::_internal_extra_params() const {
  return extra_params_.GetNoArena();
}
inline void ParamIndexedAuto::_internal_set_extra_params(const std::string& value) {
  
  extra_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParamIndexedAuto::set_extra_params(std::string&& value) {
  
  extra_params_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.extra_params)
}
inline void ParamIndexedAuto::set_extra_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.extra_params)
}
inline void ParamIndexedAuto::set_extra_params(const void* value, size_t size) {
  
  extra_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.extra_params)
}
inline std::string* ParamIndexedAuto::_internal_mutable_extra_params() {
  
  return extra_params_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParamIndexedAuto::release_extra_params() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.extra_params)
  
  return extra_params_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParamIndexedAuto::set_allocated_extra_params(std::string* extra_params) {
  if (extra_params != nullptr) {
    
  } else {
    
  }
  extra_params_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_params);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.ParamIndexedAuto.extra_params)
}

// -------------------------------------------------------------------

// ParamNamed

// string name = 1;
inline void ParamNamed::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParamNamed::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamNamed.name)
  return _internal_name();
}
inline void ParamNamed::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamNamed.name)
}
inline std::string* ParamNamed::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.ParamNamed.name)
  return _internal_mutable_name();
}
inline const std::string& ParamNamed::_internal_name() const {
  return name_.GetNoArena();
}
inline void ParamNamed::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParamNamed::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.ParamNamed.name)
}
inline void ParamNamed::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.ParamNamed.name)
}
inline void ParamNamed::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.ParamNamed.name)
}
inline std::string* ParamNamed::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParamNamed::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.ParamNamed.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParamNamed::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.ParamNamed.name)
}

// .Tiny3D.Script.MaterialSystem.BuiltInType type = 2;
inline void ParamNamed::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BuiltInType ParamNamed::_internal_type() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BuiltInType >(type_);
}
inline ::Tiny3D::Script::MaterialSystem::BuiltInType ParamNamed::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamNamed.type)
  return _internal_type();
}
inline void ParamNamed::_internal_set_type(::Tiny3D::Script::MaterialSystem::BuiltInType value) {
  
  type_ = value;
}
inline void ParamNamed::set_type(::Tiny3D::Script::MaterialSystem::BuiltInType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamNamed.type)
}

// uint32 num_values = 3;
inline void ParamNamed::clear_num_values() {
  num_values_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamNamed::_internal_num_values() const {
  return num_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamNamed::num_values() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamNamed.num_values)
  return _internal_num_values();
}
inline void ParamNamed::_internal_set_num_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_values_ = value;
}
inline void ParamNamed::set_num_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_values(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamNamed.num_values)
}

// repeated float values = 4;
inline int ParamNamed::_internal_values_size() const {
  return values_.size();
}
inline int ParamNamed::values_size() const {
  return _internal_values_size();
}
inline void ParamNamed::clear_values() {
  values_.Clear();
}
inline float ParamNamed::_internal_values(int index) const {
  return values_.Get(index);
}
inline float ParamNamed::values(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamNamed.values)
  return _internal_values(index);
}
inline void ParamNamed::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamNamed.values)
}
inline void ParamNamed::_internal_add_values(float value) {
  values_.Add(value);
}
inline void ParamNamed::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.ParamNamed.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamNamed::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamNamed::values() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.ParamNamed.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamNamed::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamNamed::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.ParamNamed.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// ParamNamedAuto

// string name = 1;
inline void ParamNamedAuto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParamNamedAuto::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamNamedAuto.name)
  return _internal_name();
}
inline void ParamNamedAuto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamNamedAuto.name)
}
inline std::string* ParamNamedAuto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.ParamNamedAuto.name)
  return _internal_mutable_name();
}
inline const std::string& ParamNamedAuto::_internal_name() const {
  return name_.GetNoArena();
}
inline void ParamNamedAuto::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParamNamedAuto::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.ParamNamedAuto.name)
}
inline void ParamNamedAuto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.ParamNamedAuto.name)
}
inline void ParamNamedAuto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.ParamNamedAuto.name)
}
inline std::string* ParamNamedAuto::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParamNamedAuto::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.ParamNamedAuto.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParamNamedAuto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.ParamNamedAuto.name)
}

// uint32 value_code = 2;
inline void ParamNamedAuto::clear_value_code() {
  value_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamNamedAuto::_internal_value_code() const {
  return value_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamNamedAuto::value_code() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamNamedAuto.value_code)
  return _internal_value_code();
}
inline void ParamNamedAuto::_internal_set_value_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_code_ = value;
}
inline void ParamNamedAuto::set_value_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value_code(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamNamedAuto.value_code)
}

// bytes extra_params = 3;
inline void ParamNamedAuto::clear_extra_params() {
  extra_params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParamNamedAuto::extra_params() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.ParamNamedAuto.extra_params)
  return _internal_extra_params();
}
inline void ParamNamedAuto::set_extra_params(const std::string& value) {
  _internal_set_extra_params(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.ParamNamedAuto.extra_params)
}
inline std::string* ParamNamedAuto::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.ParamNamedAuto.extra_params)
  return _internal_mutable_extra_params();
}
inline const std::string& ParamNamedAuto::_internal_extra_params() const {
  return extra_params_.GetNoArena();
}
inline void ParamNamedAuto::_internal_set_extra_params(const std::string& value) {
  
  extra_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParamNamedAuto::set_extra_params(std::string&& value) {
  
  extra_params_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.ParamNamedAuto.extra_params)
}
inline void ParamNamedAuto::set_extra_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.ParamNamedAuto.extra_params)
}
inline void ParamNamedAuto::set_extra_params(const void* value, size_t size) {
  
  extra_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.ParamNamedAuto.extra_params)
}
inline std::string* ParamNamedAuto::_internal_mutable_extra_params() {
  
  return extra_params_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParamNamedAuto::release_extra_params() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.ParamNamedAuto.extra_params)
  
  return extra_params_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParamNamedAuto::set_allocated_extra_params(std::string* extra_params) {
  if (extra_params != nullptr) {
    
  } else {
    
  }
  extra_params_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_params);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.ParamNamedAuto.extra_params)
}

// -------------------------------------------------------------------

// GPUConstantBuffer

// .Tiny3D.Script.MaterialSystem.Header header = 1;
inline bool GPUConstantBuffer::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GPUConstantBuffer::has_header() const {
  return _internal_has_header();
}
inline void GPUConstantBuffer::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Header& GPUConstantBuffer::_internal_header() const {
  const ::Tiny3D::Script::MaterialSystem::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Header*>(
      &::Tiny3D::Script::MaterialSystem::_Header_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Header& GPUConstantBuffer::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.header)
  return _internal_header();
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUConstantBuffer::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.header)
  
  ::Tiny3D::Script::MaterialSystem::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUConstantBuffer::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::MaterialSystem::Header* GPUConstantBuffer::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.header)
  return _internal_mutable_header();
}
inline void GPUConstantBuffer::set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.header)
}

// repeated .Tiny3D.Script.MaterialSystem.ParamIndexed param_indexed = 2;
inline int GPUConstantBuffer::_internal_param_indexed_size() const {
  return param_indexed_.size();
}
inline int GPUConstantBuffer::param_indexed_size() const {
  return _internal_param_indexed_size();
}
inline void GPUConstantBuffer::clear_param_indexed() {
  param_indexed_.Clear();
}
inline ::Tiny3D::Script::MaterialSystem::ParamIndexed* GPUConstantBuffer::mutable_param_indexed(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed)
  return param_indexed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexed >*
GPUConstantBuffer::mutable_param_indexed() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed)
  return &param_indexed_;
}
inline const ::Tiny3D::Script::MaterialSystem::ParamIndexed& GPUConstantBuffer::_internal_param_indexed(int index) const {
  return param_indexed_.Get(index);
}
inline const ::Tiny3D::Script::MaterialSystem::ParamIndexed& GPUConstantBuffer::param_indexed(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed)
  return _internal_param_indexed(index);
}
inline ::Tiny3D::Script::MaterialSystem::ParamIndexed* GPUConstantBuffer::_internal_add_param_indexed() {
  return param_indexed_.Add();
}
inline ::Tiny3D::Script::MaterialSystem::ParamIndexed* GPUConstantBuffer::add_param_indexed() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed)
  return _internal_add_param_indexed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexed >&
GPUConstantBuffer::param_indexed() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed)
  return param_indexed_;
}

// repeated .Tiny3D.Script.MaterialSystem.ParamIndexedAuto param_indexed_auto = 3;
inline int GPUConstantBuffer::_internal_param_indexed_auto_size() const {
  return param_indexed_auto_.size();
}
inline int GPUConstantBuffer::param_indexed_auto_size() const {
  return _internal_param_indexed_auto_size();
}
inline void GPUConstantBuffer::clear_param_indexed_auto() {
  param_indexed_auto_.Clear();
}
inline ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto* GPUConstantBuffer::mutable_param_indexed_auto(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed_auto)
  return param_indexed_auto_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto >*
GPUConstantBuffer::mutable_param_indexed_auto() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed_auto)
  return &param_indexed_auto_;
}
inline const ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto& GPUConstantBuffer::_internal_param_indexed_auto(int index) const {
  return param_indexed_auto_.Get(index);
}
inline const ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto& GPUConstantBuffer::param_indexed_auto(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed_auto)
  return _internal_param_indexed_auto(index);
}
inline ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto* GPUConstantBuffer::_internal_add_param_indexed_auto() {
  return param_indexed_auto_.Add();
}
inline ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto* GPUConstantBuffer::add_param_indexed_auto() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed_auto)
  return _internal_add_param_indexed_auto();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamIndexedAuto >&
GPUConstantBuffer::param_indexed_auto() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_indexed_auto)
  return param_indexed_auto_;
}

// repeated .Tiny3D.Script.MaterialSystem.ParamNamed param_named = 4;
inline int GPUConstantBuffer::_internal_param_named_size() const {
  return param_named_.size();
}
inline int GPUConstantBuffer::param_named_size() const {
  return _internal_param_named_size();
}
inline void GPUConstantBuffer::clear_param_named() {
  param_named_.Clear();
}
inline ::Tiny3D::Script::MaterialSystem::ParamNamed* GPUConstantBuffer::mutable_param_named(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named)
  return param_named_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamed >*
GPUConstantBuffer::mutable_param_named() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named)
  return &param_named_;
}
inline const ::Tiny3D::Script::MaterialSystem::ParamNamed& GPUConstantBuffer::_internal_param_named(int index) const {
  return param_named_.Get(index);
}
inline const ::Tiny3D::Script::MaterialSystem::ParamNamed& GPUConstantBuffer::param_named(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named)
  return _internal_param_named(index);
}
inline ::Tiny3D::Script::MaterialSystem::ParamNamed* GPUConstantBuffer::_internal_add_param_named() {
  return param_named_.Add();
}
inline ::Tiny3D::Script::MaterialSystem::ParamNamed* GPUConstantBuffer::add_param_named() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named)
  return _internal_add_param_named();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamed >&
GPUConstantBuffer::param_named() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named)
  return param_named_;
}

// repeated .Tiny3D.Script.MaterialSystem.ParamNamedAuto param_named_auto = 5;
inline int GPUConstantBuffer::_internal_param_named_auto_size() const {
  return param_named_auto_.size();
}
inline int GPUConstantBuffer::param_named_auto_size() const {
  return _internal_param_named_auto_size();
}
inline void GPUConstantBuffer::clear_param_named_auto() {
  param_named_auto_.Clear();
}
inline ::Tiny3D::Script::MaterialSystem::ParamNamedAuto* GPUConstantBuffer::mutable_param_named_auto(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named_auto)
  return param_named_auto_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamedAuto >*
GPUConstantBuffer::mutable_param_named_auto() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named_auto)
  return &param_named_auto_;
}
inline const ::Tiny3D::Script::MaterialSystem::ParamNamedAuto& GPUConstantBuffer::_internal_param_named_auto(int index) const {
  return param_named_auto_.Get(index);
}
inline const ::Tiny3D::Script::MaterialSystem::ParamNamedAuto& GPUConstantBuffer::param_named_auto(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named_auto)
  return _internal_param_named_auto(index);
}
inline ::Tiny3D::Script::MaterialSystem::ParamNamedAuto* GPUConstantBuffer::_internal_add_param_named_auto() {
  return param_named_auto_.Add();
}
inline ::Tiny3D::Script::MaterialSystem::ParamNamedAuto* GPUConstantBuffer::add_param_named_auto() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named_auto)
  return _internal_add_param_named_auto();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::ParamNamedAuto >&
GPUConstantBuffer::param_named_auto() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.GPUConstantBuffer.param_named_auto)
  return param_named_auto_;
}

// -------------------------------------------------------------------

// Color

// float r = 1;
inline void Color::clear_r() {
  r_ = 0;
}
inline float Color::_internal_r() const {
  return r_;
}
inline float Color::r() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(float value) {
  
  r_ = value;
}
inline void Color::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Color.r)
}

// float g = 2;
inline void Color::clear_g() {
  g_ = 0;
}
inline float Color::_internal_g() const {
  return g_;
}
inline float Color::g() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(float value) {
  
  g_ = value;
}
inline void Color::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Color.g)
}

// float b = 3;
inline void Color::clear_b() {
  b_ = 0;
}
inline float Color::_internal_b() const {
  return b_;
}
inline float Color::b() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(float value) {
  
  b_ = value;
}
inline void Color::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Color.b)
}

// float a = 4;
inline void Color::clear_a() {
  a_ = 0;
}
inline float Color::_internal_a() const {
  return a_;
}
inline float Color::a() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Color.a)
  return _internal_a();
}
inline void Color::_internal_set_a(float value) {
  
  a_ = value;
}
inline void Color::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Color.a)
}

// -------------------------------------------------------------------

// LightColor

// .Tiny3D.Script.MaterialSystem.Color color = 1;
inline bool LightColor::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool LightColor::has_color() const {
  return _internal_has_color();
}
inline void LightColor::clear_color() {
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Color& LightColor::_internal_color() const {
  const ::Tiny3D::Script::MaterialSystem::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Color*>(
      &::Tiny3D::Script::MaterialSystem::_Color_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Color& LightColor::color() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.LightColor.color)
  return _internal_color();
}
inline ::Tiny3D::Script::MaterialSystem::Color* LightColor::release_color() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.LightColor.color)
  
  ::Tiny3D::Script::MaterialSystem::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Color* LightColor::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  return color_;
}
inline ::Tiny3D::Script::MaterialSystem::Color* LightColor::mutable_color() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.LightColor.color)
  return _internal_mutable_color();
}
inline void LightColor::set_allocated_color(::Tiny3D::Script::MaterialSystem::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.LightColor.color)
}

// bool vertex_color = 2;
inline void LightColor::clear_vertex_color() {
  vertex_color_ = false;
}
inline bool LightColor::_internal_vertex_color() const {
  return vertex_color_;
}
inline bool LightColor::vertex_color() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.LightColor.vertex_color)
  return _internal_vertex_color();
}
inline void LightColor::_internal_set_vertex_color(bool value) {
  
  vertex_color_ = value;
}
inline void LightColor::set_vertex_color(bool value) {
  _internal_set_vertex_color(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.LightColor.vertex_color)
}

// -------------------------------------------------------------------

// BlendSceneFactor

// .Tiny3D.Script.MaterialSystem.BlendFactor src_factor = 1;
inline void BlendSceneFactor::clear_src_factor() {
  src_factor_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor BlendSceneFactor::_internal_src_factor() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendFactor >(src_factor_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor BlendSceneFactor::src_factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.BlendSceneFactor.src_factor)
  return _internal_src_factor();
}
inline void BlendSceneFactor::_internal_set_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  
  src_factor_ = value;
}
inline void BlendSceneFactor::set_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  _internal_set_src_factor(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.BlendSceneFactor.src_factor)
}

// .Tiny3D.Script.MaterialSystem.BlendFactor dest_factor = 2;
inline void BlendSceneFactor::clear_dest_factor() {
  dest_factor_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor BlendSceneFactor::_internal_dest_factor() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendFactor >(dest_factor_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor BlendSceneFactor::dest_factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.BlendSceneFactor.dest_factor)
  return _internal_dest_factor();
}
inline void BlendSceneFactor::_internal_set_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  
  dest_factor_ = value;
}
inline void BlendSceneFactor::set_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  _internal_set_dest_factor(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.BlendSceneFactor.dest_factor)
}

// -------------------------------------------------------------------

// BlendScene

// .Tiny3D.Script.MaterialSystem.BlendType blend_type = 1;
inline bool BlendScene::_internal_has_blend_type() const {
  return BlendSceneOneOf_case() == kBlendType;
}
inline void BlendScene::set_has_blend_type() {
  _oneof_case_[0] = kBlendType;
}
inline void BlendScene::clear_blend_type() {
  if (_internal_has_blend_type()) {
    BlendSceneOneOf_.blend_type_ = 0;
    clear_has_BlendSceneOneOf();
  }
}
inline ::Tiny3D::Script::MaterialSystem::BlendType BlendScene::_internal_blend_type() const {
  if (_internal_has_blend_type()) {
    return static_cast< ::Tiny3D::Script::MaterialSystem::BlendType >(BlendSceneOneOf_.blend_type_);
  }
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendType >(0);
}
inline ::Tiny3D::Script::MaterialSystem::BlendType BlendScene::blend_type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.BlendScene.blend_type)
  return _internal_blend_type();
}
inline void BlendScene::_internal_set_blend_type(::Tiny3D::Script::MaterialSystem::BlendType value) {
  if (!_internal_has_blend_type()) {
    clear_BlendSceneOneOf();
    set_has_blend_type();
  }
  BlendSceneOneOf_.blend_type_ = value;
}
inline void BlendScene::set_blend_type(::Tiny3D::Script::MaterialSystem::BlendType value) {
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.BlendScene.blend_type)
  _internal_set_blend_type(value);
}

// .Tiny3D.Script.MaterialSystem.BlendSceneFactor blend_factor = 2;
inline bool BlendScene::_internal_has_blend_factor() const {
  return BlendSceneOneOf_case() == kBlendFactor;
}
inline bool BlendScene::has_blend_factor() const {
  return _internal_has_blend_factor();
}
inline void BlendScene::set_has_blend_factor() {
  _oneof_case_[0] = kBlendFactor;
}
inline void BlendScene::clear_blend_factor() {
  if (_internal_has_blend_factor()) {
    delete BlendSceneOneOf_.blend_factor_;
    clear_has_BlendSceneOneOf();
  }
}
inline ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* BlendScene::release_blend_factor() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.BlendScene.blend_factor)
  if (_internal_has_blend_factor()) {
    clear_has_BlendSceneOneOf();
      ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* temp = BlendSceneOneOf_.blend_factor_;
    BlendSceneOneOf_.blend_factor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor& BlendScene::_internal_blend_factor() const {
  return _internal_has_blend_factor()
      ? *BlendSceneOneOf_.blend_factor_
      : *reinterpret_cast< ::Tiny3D::Script::MaterialSystem::BlendSceneFactor*>(&::Tiny3D::Script::MaterialSystem::_BlendSceneFactor_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::BlendSceneFactor& BlendScene::blend_factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.BlendScene.blend_factor)
  return _internal_blend_factor();
}
inline ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* BlendScene::_internal_mutable_blend_factor() {
  if (!_internal_has_blend_factor()) {
    clear_BlendSceneOneOf();
    set_has_blend_factor();
    BlendSceneOneOf_.blend_factor_ = CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::BlendSceneFactor >(
        GetArenaNoVirtual());
  }
  return BlendSceneOneOf_.blend_factor_;
}
inline ::Tiny3D::Script::MaterialSystem::BlendSceneFactor* BlendScene::mutable_blend_factor() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.BlendScene.blend_factor)
  return _internal_mutable_blend_factor();
}

inline bool BlendScene::has_BlendSceneOneOf() const {
  return BlendSceneOneOf_case() != BLENDSCENEONEOF_NOT_SET;
}
inline void BlendScene::clear_has_BlendSceneOneOf() {
  _oneof_case_[0] = BLENDSCENEONEOF_NOT_SET;
}
inline BlendScene::BlendSceneOneOfCase BlendScene::BlendSceneOneOf_case() const {
  return BlendScene::BlendSceneOneOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SimpleBlendType

// .Tiny3D.Script.MaterialSystem.BlendType color_blend = 1;
inline void SimpleBlendType::clear_color_blend() {
  color_blend_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendType SimpleBlendType::_internal_color_blend() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendType >(color_blend_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendType SimpleBlendType::color_blend() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SimpleBlendType.color_blend)
  return _internal_color_blend();
}
inline void SimpleBlendType::_internal_set_color_blend(::Tiny3D::Script::MaterialSystem::BlendType value) {
  
  color_blend_ = value;
}
inline void SimpleBlendType::set_color_blend(::Tiny3D::Script::MaterialSystem::BlendType value) {
  _internal_set_color_blend(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.SimpleBlendType.color_blend)
}

// .Tiny3D.Script.MaterialSystem.BlendType alpha_blend = 2;
inline void SimpleBlendType::clear_alpha_blend() {
  alpha_blend_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendType SimpleBlendType::_internal_alpha_blend() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendType >(alpha_blend_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendType SimpleBlendType::alpha_blend() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SimpleBlendType.alpha_blend)
  return _internal_alpha_blend();
}
inline void SimpleBlendType::_internal_set_alpha_blend(::Tiny3D::Script::MaterialSystem::BlendType value) {
  
  alpha_blend_ = value;
}
inline void SimpleBlendType::set_alpha_blend(::Tiny3D::Script::MaterialSystem::BlendType value) {
  _internal_set_alpha_blend(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.SimpleBlendType.alpha_blend)
}

// -------------------------------------------------------------------

// SimpleBlendSceneFactor

// .Tiny3D.Script.MaterialSystem.BlendFactor color_src_factor = 1;
inline void SimpleBlendSceneFactor::clear_color_src_factor() {
  color_src_factor_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor SimpleBlendSceneFactor::_internal_color_src_factor() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendFactor >(color_src_factor_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor SimpleBlendSceneFactor::color_src_factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor.color_src_factor)
  return _internal_color_src_factor();
}
inline void SimpleBlendSceneFactor::_internal_set_color_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  
  color_src_factor_ = value;
}
inline void SimpleBlendSceneFactor::set_color_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  _internal_set_color_src_factor(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor.color_src_factor)
}

// .Tiny3D.Script.MaterialSystem.BlendFactor color_dest_factor = 2;
inline void SimpleBlendSceneFactor::clear_color_dest_factor() {
  color_dest_factor_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor SimpleBlendSceneFactor::_internal_color_dest_factor() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendFactor >(color_dest_factor_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor SimpleBlendSceneFactor::color_dest_factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor.color_dest_factor)
  return _internal_color_dest_factor();
}
inline void SimpleBlendSceneFactor::_internal_set_color_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  
  color_dest_factor_ = value;
}
inline void SimpleBlendSceneFactor::set_color_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  _internal_set_color_dest_factor(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor.color_dest_factor)
}

// .Tiny3D.Script.MaterialSystem.BlendFactor alpha_src_factor = 3;
inline void SimpleBlendSceneFactor::clear_alpha_src_factor() {
  alpha_src_factor_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor SimpleBlendSceneFactor::_internal_alpha_src_factor() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendFactor >(alpha_src_factor_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor SimpleBlendSceneFactor::alpha_src_factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor.alpha_src_factor)
  return _internal_alpha_src_factor();
}
inline void SimpleBlendSceneFactor::_internal_set_alpha_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  
  alpha_src_factor_ = value;
}
inline void SimpleBlendSceneFactor::set_alpha_src_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  _internal_set_alpha_src_factor(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor.alpha_src_factor)
}

// .Tiny3D.Script.MaterialSystem.BlendFactor alpha_dest_factor = 4;
inline void SimpleBlendSceneFactor::clear_alpha_dest_factor() {
  alpha_dest_factor_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor SimpleBlendSceneFactor::_internal_alpha_dest_factor() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendFactor >(alpha_dest_factor_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendFactor SimpleBlendSceneFactor::alpha_dest_factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor.alpha_dest_factor)
  return _internal_alpha_dest_factor();
}
inline void SimpleBlendSceneFactor::_internal_set_alpha_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  
  alpha_dest_factor_ = value;
}
inline void SimpleBlendSceneFactor::set_alpha_dest_factor(::Tiny3D::Script::MaterialSystem::BlendFactor value) {
  _internal_set_alpha_dest_factor(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor.alpha_dest_factor)
}

// -------------------------------------------------------------------

// SeparateBlendScene

// .Tiny3D.Script.MaterialSystem.SimpleBlendType blend_type = 1;
inline bool SeparateBlendScene::_internal_has_blend_type() const {
  return SeparateBlendSceneOneOf_case() == kBlendType;
}
inline bool SeparateBlendScene::has_blend_type() const {
  return _internal_has_blend_type();
}
inline void SeparateBlendScene::set_has_blend_type() {
  _oneof_case_[0] = kBlendType;
}
inline void SeparateBlendScene::clear_blend_type() {
  if (_internal_has_blend_type()) {
    delete SeparateBlendSceneOneOf_.blend_type_;
    clear_has_SeparateBlendSceneOneOf();
  }
}
inline ::Tiny3D::Script::MaterialSystem::SimpleBlendType* SeparateBlendScene::release_blend_type() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_type)
  if (_internal_has_blend_type()) {
    clear_has_SeparateBlendSceneOneOf();
      ::Tiny3D::Script::MaterialSystem::SimpleBlendType* temp = SeparateBlendSceneOneOf_.blend_type_;
    SeparateBlendSceneOneOf_.blend_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::MaterialSystem::SimpleBlendType& SeparateBlendScene::_internal_blend_type() const {
  return _internal_has_blend_type()
      ? *SeparateBlendSceneOneOf_.blend_type_
      : *reinterpret_cast< ::Tiny3D::Script::MaterialSystem::SimpleBlendType*>(&::Tiny3D::Script::MaterialSystem::_SimpleBlendType_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::SimpleBlendType& SeparateBlendScene::blend_type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_type)
  return _internal_blend_type();
}
inline ::Tiny3D::Script::MaterialSystem::SimpleBlendType* SeparateBlendScene::_internal_mutable_blend_type() {
  if (!_internal_has_blend_type()) {
    clear_SeparateBlendSceneOneOf();
    set_has_blend_type();
    SeparateBlendSceneOneOf_.blend_type_ = CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SimpleBlendType >(
        GetArenaNoVirtual());
  }
  return SeparateBlendSceneOneOf_.blend_type_;
}
inline ::Tiny3D::Script::MaterialSystem::SimpleBlendType* SeparateBlendScene::mutable_blend_type() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_type)
  return _internal_mutable_blend_type();
}

// .Tiny3D.Script.MaterialSystem.SimpleBlendSceneFactor blend_factor = 2;
inline bool SeparateBlendScene::_internal_has_blend_factor() const {
  return SeparateBlendSceneOneOf_case() == kBlendFactor;
}
inline bool SeparateBlendScene::has_blend_factor() const {
  return _internal_has_blend_factor();
}
inline void SeparateBlendScene::set_has_blend_factor() {
  _oneof_case_[0] = kBlendFactor;
}
inline void SeparateBlendScene::clear_blend_factor() {
  if (_internal_has_blend_factor()) {
    delete SeparateBlendSceneOneOf_.blend_factor_;
    clear_has_SeparateBlendSceneOneOf();
  }
}
inline ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* SeparateBlendScene::release_blend_factor() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_factor)
  if (_internal_has_blend_factor()) {
    clear_has_SeparateBlendSceneOneOf();
      ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* temp = SeparateBlendSceneOneOf_.blend_factor_;
    SeparateBlendSceneOneOf_.blend_factor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor& SeparateBlendScene::_internal_blend_factor() const {
  return _internal_has_blend_factor()
      ? *SeparateBlendSceneOneOf_.blend_factor_
      : *reinterpret_cast< ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor*>(&::Tiny3D::Script::MaterialSystem::_SimpleBlendSceneFactor_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor& SeparateBlendScene::blend_factor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_factor)
  return _internal_blend_factor();
}
inline ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* SeparateBlendScene::_internal_mutable_blend_factor() {
  if (!_internal_has_blend_factor()) {
    clear_SeparateBlendSceneOneOf();
    set_has_blend_factor();
    SeparateBlendSceneOneOf_.blend_factor_ = CreateMaybeMessage< ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor >(
        GetArenaNoVirtual());
  }
  return SeparateBlendSceneOneOf_.blend_factor_;
}
inline ::Tiny3D::Script::MaterialSystem::SimpleBlendSceneFactor* SeparateBlendScene::mutable_blend_factor() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.SeparateBlendScene.blend_factor)
  return _internal_mutable_blend_factor();
}

inline bool SeparateBlendScene::has_SeparateBlendSceneOneOf() const {
  return SeparateBlendSceneOneOf_case() != SEPARATEBLENDSCENEONEOF_NOT_SET;
}
inline void SeparateBlendScene::clear_has_SeparateBlendSceneOneOf() {
  _oneof_case_[0] = SEPARATEBLENDSCENEONEOF_NOT_SET;
}
inline SeparateBlendScene::SeparateBlendSceneOneOfCase SeparateBlendScene::SeparateBlendSceneOneOf_case() const {
  return SeparateBlendScene::SeparateBlendSceneOneOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SeparateSceneBlendOperation

// .Tiny3D.Script.MaterialSystem.BlendOperation color_op = 1;
inline void SeparateSceneBlendOperation::clear_color_op() {
  color_op_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendOperation SeparateSceneBlendOperation::_internal_color_op() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendOperation >(color_op_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendOperation SeparateSceneBlendOperation::color_op() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation.color_op)
  return _internal_color_op();
}
inline void SeparateSceneBlendOperation::_internal_set_color_op(::Tiny3D::Script::MaterialSystem::BlendOperation value) {
  
  color_op_ = value;
}
inline void SeparateSceneBlendOperation::set_color_op(::Tiny3D::Script::MaterialSystem::BlendOperation value) {
  _internal_set_color_op(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation.color_op)
}

// .Tiny3D.Script.MaterialSystem.BlendOperation alpha_op = 2;
inline void SeparateSceneBlendOperation::clear_alpha_op() {
  alpha_op_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendOperation SeparateSceneBlendOperation::_internal_alpha_op() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendOperation >(alpha_op_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendOperation SeparateSceneBlendOperation::alpha_op() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation.alpha_op)
  return _internal_alpha_op();
}
inline void SeparateSceneBlendOperation::_internal_set_alpha_op(::Tiny3D::Script::MaterialSystem::BlendOperation value) {
  
  alpha_op_ = value;
}
inline void SeparateSceneBlendOperation::set_alpha_op(::Tiny3D::Script::MaterialSystem::BlendOperation value) {
  _internal_set_alpha_op(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation.alpha_op)
}

// -------------------------------------------------------------------

// DepthBias

// float constant_bias = 1;
inline void DepthBias::clear_constant_bias() {
  constant_bias_ = 0;
}
inline float DepthBias::_internal_constant_bias() const {
  return constant_bias_;
}
inline float DepthBias::constant_bias() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.DepthBias.constant_bias)
  return _internal_constant_bias();
}
inline void DepthBias::_internal_set_constant_bias(float value) {
  
  constant_bias_ = value;
}
inline void DepthBias::set_constant_bias(float value) {
  _internal_set_constant_bias(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.DepthBias.constant_bias)
}

// float slopescale_bias = 2;
inline void DepthBias::clear_slopescale_bias() {
  slopescale_bias_ = 0;
}
inline float DepthBias::_internal_slopescale_bias() const {
  return slopescale_bias_;
}
inline float DepthBias::slopescale_bias() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.DepthBias.slopescale_bias)
  return _internal_slopescale_bias();
}
inline void DepthBias::_internal_set_slopescale_bias(float value) {
  
  slopescale_bias_ = value;
}
inline void DepthBias::set_slopescale_bias(float value) {
  _internal_set_slopescale_bias(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.DepthBias.slopescale_bias)
}

// -------------------------------------------------------------------

// AlphaRejection

// .Tiny3D.Script.MaterialSystem.CompareFunction function = 1;
inline void AlphaRejection::clear_function() {
  function_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::CompareFunction AlphaRejection::_internal_function() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::CompareFunction >(function_);
}
inline ::Tiny3D::Script::MaterialSystem::CompareFunction AlphaRejection::function() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.AlphaRejection.function)
  return _internal_function();
}
inline void AlphaRejection::_internal_set_function(::Tiny3D::Script::MaterialSystem::CompareFunction value) {
  
  function_ = value;
}
inline void AlphaRejection::set_function(::Tiny3D::Script::MaterialSystem::CompareFunction value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.AlphaRejection.function)
}

// uint32 value = 2;
inline void AlphaRejection::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlphaRejection::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlphaRejection::value() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.AlphaRejection.value)
  return _internal_value();
}
inline void AlphaRejection::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void AlphaRejection::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.AlphaRejection.value)
}

// -------------------------------------------------------------------

// Fog

// bool overridable = 1;
inline void Fog::clear_overridable() {
  overridable_ = false;
}
inline bool Fog::_internal_overridable() const {
  return overridable_;
}
inline bool Fog::overridable() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Fog.overridable)
  return _internal_overridable();
}
inline void Fog::_internal_set_overridable(bool value) {
  
  overridable_ = value;
}
inline void Fog::set_overridable(bool value) {
  _internal_set_overridable(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Fog.overridable)
}

// .Tiny3D.Script.MaterialSystem.FogType type = 2;
inline void Fog::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::FogType Fog::_internal_type() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::FogType >(type_);
}
inline ::Tiny3D::Script::MaterialSystem::FogType Fog::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Fog.type)
  return _internal_type();
}
inline void Fog::_internal_set_type(::Tiny3D::Script::MaterialSystem::FogType value) {
  
  type_ = value;
}
inline void Fog::set_type(::Tiny3D::Script::MaterialSystem::FogType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Fog.type)
}

// .Tiny3D.Script.MaterialSystem.Color color = 3;
inline bool Fog::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Fog::has_color() const {
  return _internal_has_color();
}
inline void Fog::clear_color() {
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Color& Fog::_internal_color() const {
  const ::Tiny3D::Script::MaterialSystem::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Color*>(
      &::Tiny3D::Script::MaterialSystem::_Color_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Color& Fog::color() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Fog.color)
  return _internal_color();
}
inline ::Tiny3D::Script::MaterialSystem::Color* Fog::release_color() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Fog.color)
  
  ::Tiny3D::Script::MaterialSystem::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Color* Fog::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  return color_;
}
inline ::Tiny3D::Script::MaterialSystem::Color* Fog::mutable_color() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Fog.color)
  return _internal_mutable_color();
}
inline void Fog::set_allocated_color(::Tiny3D::Script::MaterialSystem::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Fog.color)
}

// float density = 4;
inline void Fog::clear_density() {
  density_ = 0;
}
inline float Fog::_internal_density() const {
  return density_;
}
inline float Fog::density() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Fog.density)
  return _internal_density();
}
inline void Fog::_internal_set_density(float value) {
  
  density_ = value;
}
inline void Fog::set_density(float value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Fog.density)
}

// float start = 5;
inline void Fog::clear_start() {
  start_ = 0;
}
inline float Fog::_internal_start() const {
  return start_;
}
inline float Fog::start() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Fog.start)
  return _internal_start();
}
inline void Fog::_internal_set_start(float value) {
  
  start_ = value;
}
inline void Fog::set_start(float value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Fog.start)
}

// float end = 6;
inline void Fog::clear_end() {
  end_ = 0;
}
inline float Fog::_internal_end() const {
  return end_;
}
inline float Fog::end() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Fog.end)
  return _internal_end();
}
inline void Fog::_internal_set_end(float value) {
  
  end_ = value;
}
inline void Fog::set_end(float value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Fog.end)
}

// -------------------------------------------------------------------

// Iteration

// .Tiny3D.Script.MaterialSystem.IterationType type = 1;
inline void Iteration::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::IterationType Iteration::_internal_type() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::IterationType >(type_);
}
inline ::Tiny3D::Script::MaterialSystem::IterationType Iteration::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Iteration.type)
  return _internal_type();
}
inline void Iteration::_internal_set_type(::Tiny3D::Script::MaterialSystem::IterationType value) {
  
  type_ = value;
}
inline void Iteration::set_type(::Tiny3D::Script::MaterialSystem::IterationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Iteration.type)
}

// uint32 number = 2;
inline void Iteration::clear_number() {
  number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Iteration::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Iteration::number() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Iteration.number)
  return _internal_number();
}
inline void Iteration::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_ = value;
}
inline void Iteration::set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Iteration.number)
}

// .Tiny3D.Script.MaterialSystem.LightType light_type = 3;
inline void Iteration::clear_light_type() {
  light_type_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::LightType Iteration::_internal_light_type() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::LightType >(light_type_);
}
inline ::Tiny3D::Script::MaterialSystem::LightType Iteration::light_type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Iteration.light_type)
  return _internal_light_type();
}
inline void Iteration::_internal_set_light_type(::Tiny3D::Script::MaterialSystem::LightType value) {
  
  light_type_ = value;
}
inline void Iteration::set_light_type(::Tiny3D::Script::MaterialSystem::LightType value) {
  _internal_set_light_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Iteration.light_type)
}

// uint32 num_lights = 4;
inline void Iteration::clear_num_lights() {
  num_lights_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Iteration::_internal_num_lights() const {
  return num_lights_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Iteration::num_lights() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Iteration.num_lights)
  return _internal_num_lights();
}
inline void Iteration::_internal_set_num_lights(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_lights_ = value;
}
inline void Iteration::set_num_lights(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_lights(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Iteration.num_lights)
}

// -------------------------------------------------------------------

// PointSizeAttenuation

// bool enable = 1;
inline void PointSizeAttenuation::clear_enable() {
  enable_ = false;
}
inline bool PointSizeAttenuation::_internal_enable() const {
  return enable_;
}
inline bool PointSizeAttenuation::enable() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.PointSizeAttenuation.enable)
  return _internal_enable();
}
inline void PointSizeAttenuation::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void PointSizeAttenuation::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.PointSizeAttenuation.enable)
}

// float constant = 2;
inline void PointSizeAttenuation::clear_constant() {
  constant_ = 0;
}
inline float PointSizeAttenuation::_internal_constant() const {
  return constant_;
}
inline float PointSizeAttenuation::constant() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.PointSizeAttenuation.constant)
  return _internal_constant();
}
inline void PointSizeAttenuation::_internal_set_constant(float value) {
  
  constant_ = value;
}
inline void PointSizeAttenuation::set_constant(float value) {
  _internal_set_constant(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.PointSizeAttenuation.constant)
}

// float linear = 3;
inline void PointSizeAttenuation::clear_linear() {
  linear_ = 0;
}
inline float PointSizeAttenuation::_internal_linear() const {
  return linear_;
}
inline float PointSizeAttenuation::linear() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.PointSizeAttenuation.linear)
  return _internal_linear();
}
inline void PointSizeAttenuation::_internal_set_linear(float value) {
  
  linear_ = value;
}
inline void PointSizeAttenuation::set_linear(float value) {
  _internal_set_linear(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.PointSizeAttenuation.linear)
}

// float quadratic = 4;
inline void PointSizeAttenuation::clear_quadratic() {
  quadratic_ = 0;
}
inline float PointSizeAttenuation::_internal_quadratic() const {
  return quadratic_;
}
inline float PointSizeAttenuation::quadratic() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.PointSizeAttenuation.quadratic)
  return _internal_quadratic();
}
inline void PointSizeAttenuation::_internal_set_quadratic(float value) {
  
  quadratic_ = value;
}
inline void PointSizeAttenuation::set_quadratic(float value) {
  _internal_set_quadratic(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.PointSizeAttenuation.quadratic)
}

// -------------------------------------------------------------------

// Pass

// .Tiny3D.Script.MaterialSystem.LightColor ambient = 1;
inline bool Pass::_internal_has_ambient() const {
  return this != internal_default_instance() && ambient_ != nullptr;
}
inline bool Pass::has_ambient() const {
  return _internal_has_ambient();
}
inline void Pass::clear_ambient() {
  if (GetArenaNoVirtual() == nullptr && ambient_ != nullptr) {
    delete ambient_;
  }
  ambient_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::LightColor& Pass::_internal_ambient() const {
  const ::Tiny3D::Script::MaterialSystem::LightColor* p = ambient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::LightColor*>(
      &::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::LightColor& Pass::ambient() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.ambient)
  return _internal_ambient();
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::release_ambient() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.ambient)
  
  ::Tiny3D::Script::MaterialSystem::LightColor* temp = ambient_;
  ambient_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::_internal_mutable_ambient() {
  
  if (ambient_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::LightColor>(GetArenaNoVirtual());
    ambient_ = p;
  }
  return ambient_;
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::mutable_ambient() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.ambient)
  return _internal_mutable_ambient();
}
inline void Pass::set_allocated_ambient(::Tiny3D::Script::MaterialSystem::LightColor* ambient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ambient_;
  }
  if (ambient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ambient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ambient, submessage_arena);
    }
    
  } else {
    
  }
  ambient_ = ambient;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.ambient)
}

// .Tiny3D.Script.MaterialSystem.LightColor diffuse = 2;
inline bool Pass::_internal_has_diffuse() const {
  return this != internal_default_instance() && diffuse_ != nullptr;
}
inline bool Pass::has_diffuse() const {
  return _internal_has_diffuse();
}
inline void Pass::clear_diffuse() {
  if (GetArenaNoVirtual() == nullptr && diffuse_ != nullptr) {
    delete diffuse_;
  }
  diffuse_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::LightColor& Pass::_internal_diffuse() const {
  const ::Tiny3D::Script::MaterialSystem::LightColor* p = diffuse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::LightColor*>(
      &::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::LightColor& Pass::diffuse() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.diffuse)
  return _internal_diffuse();
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::release_diffuse() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.diffuse)
  
  ::Tiny3D::Script::MaterialSystem::LightColor* temp = diffuse_;
  diffuse_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::_internal_mutable_diffuse() {
  
  if (diffuse_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::LightColor>(GetArenaNoVirtual());
    diffuse_ = p;
  }
  return diffuse_;
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::mutable_diffuse() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.diffuse)
  return _internal_mutable_diffuse();
}
inline void Pass::set_allocated_diffuse(::Tiny3D::Script::MaterialSystem::LightColor* diffuse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diffuse_;
  }
  if (diffuse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diffuse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffuse, submessage_arena);
    }
    
  } else {
    
  }
  diffuse_ = diffuse;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.diffuse)
}

// .Tiny3D.Script.MaterialSystem.LightColor specular = 3;
inline bool Pass::_internal_has_specular() const {
  return this != internal_default_instance() && specular_ != nullptr;
}
inline bool Pass::has_specular() const {
  return _internal_has_specular();
}
inline void Pass::clear_specular() {
  if (GetArenaNoVirtual() == nullptr && specular_ != nullptr) {
    delete specular_;
  }
  specular_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::LightColor& Pass::_internal_specular() const {
  const ::Tiny3D::Script::MaterialSystem::LightColor* p = specular_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::LightColor*>(
      &::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::LightColor& Pass::specular() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.specular)
  return _internal_specular();
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::release_specular() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.specular)
  
  ::Tiny3D::Script::MaterialSystem::LightColor* temp = specular_;
  specular_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::_internal_mutable_specular() {
  
  if (specular_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::LightColor>(GetArenaNoVirtual());
    specular_ = p;
  }
  return specular_;
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::mutable_specular() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.specular)
  return _internal_mutable_specular();
}
inline void Pass::set_allocated_specular(::Tiny3D::Script::MaterialSystem::LightColor* specular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete specular_;
  }
  if (specular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      specular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specular, submessage_arena);
    }
    
  } else {
    
  }
  specular_ = specular;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.specular)
}

// .Tiny3D.Script.MaterialSystem.LightColor emissive = 4;
inline bool Pass::_internal_has_emissive() const {
  return this != internal_default_instance() && emissive_ != nullptr;
}
inline bool Pass::has_emissive() const {
  return _internal_has_emissive();
}
inline void Pass::clear_emissive() {
  if (GetArenaNoVirtual() == nullptr && emissive_ != nullptr) {
    delete emissive_;
  }
  emissive_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::LightColor& Pass::_internal_emissive() const {
  const ::Tiny3D::Script::MaterialSystem::LightColor* p = emissive_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::LightColor*>(
      &::Tiny3D::Script::MaterialSystem::_LightColor_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::LightColor& Pass::emissive() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.emissive)
  return _internal_emissive();
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::release_emissive() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.emissive)
  
  ::Tiny3D::Script::MaterialSystem::LightColor* temp = emissive_;
  emissive_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::_internal_mutable_emissive() {
  
  if (emissive_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::LightColor>(GetArenaNoVirtual());
    emissive_ = p;
  }
  return emissive_;
}
inline ::Tiny3D::Script::MaterialSystem::LightColor* Pass::mutable_emissive() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.emissive)
  return _internal_mutable_emissive();
}
inline void Pass::set_allocated_emissive(::Tiny3D::Script::MaterialSystem::LightColor* emissive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete emissive_;
  }
  if (emissive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emissive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emissive, submessage_arena);
    }
    
  } else {
    
  }
  emissive_ = emissive;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.emissive)
}

// float shininess = 5;
inline void Pass::clear_shininess() {
  shininess_ = 0;
}
inline float Pass::_internal_shininess() const {
  return shininess_;
}
inline float Pass::shininess() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.shininess)
  return _internal_shininess();
}
inline void Pass::_internal_set_shininess(float value) {
  
  shininess_ = value;
}
inline void Pass::set_shininess(float value) {
  _internal_set_shininess(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.shininess)
}

// .Tiny3D.Script.MaterialSystem.BlendScene scene_blend = 6;
inline bool Pass::_internal_has_scene_blend() const {
  return this != internal_default_instance() && scene_blend_ != nullptr;
}
inline bool Pass::has_scene_blend() const {
  return _internal_has_scene_blend();
}
inline void Pass::clear_scene_blend() {
  if (GetArenaNoVirtual() == nullptr && scene_blend_ != nullptr) {
    delete scene_blend_;
  }
  scene_blend_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::BlendScene& Pass::_internal_scene_blend() const {
  const ::Tiny3D::Script::MaterialSystem::BlendScene* p = scene_blend_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::BlendScene*>(
      &::Tiny3D::Script::MaterialSystem::_BlendScene_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::BlendScene& Pass::scene_blend() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.scene_blend)
  return _internal_scene_blend();
}
inline ::Tiny3D::Script::MaterialSystem::BlendScene* Pass::release_scene_blend() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.scene_blend)
  
  ::Tiny3D::Script::MaterialSystem::BlendScene* temp = scene_blend_;
  scene_blend_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::BlendScene* Pass::_internal_mutable_scene_blend() {
  
  if (scene_blend_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::BlendScene>(GetArenaNoVirtual());
    scene_blend_ = p;
  }
  return scene_blend_;
}
inline ::Tiny3D::Script::MaterialSystem::BlendScene* Pass::mutable_scene_blend() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.scene_blend)
  return _internal_mutable_scene_blend();
}
inline void Pass::set_allocated_scene_blend(::Tiny3D::Script::MaterialSystem::BlendScene* scene_blend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scene_blend_;
  }
  if (scene_blend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scene_blend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene_blend, submessage_arena);
    }
    
  } else {
    
  }
  scene_blend_ = scene_blend;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.scene_blend)
}

// .Tiny3D.Script.MaterialSystem.SeparateBlendScene separate_blend_scene = 7;
inline bool Pass::_internal_has_separate_blend_scene() const {
  return this != internal_default_instance() && separate_blend_scene_ != nullptr;
}
inline bool Pass::has_separate_blend_scene() const {
  return _internal_has_separate_blend_scene();
}
inline void Pass::clear_separate_blend_scene() {
  if (GetArenaNoVirtual() == nullptr && separate_blend_scene_ != nullptr) {
    delete separate_blend_scene_;
  }
  separate_blend_scene_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene& Pass::_internal_separate_blend_scene() const {
  const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* p = separate_blend_scene_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene*>(
      &::Tiny3D::Script::MaterialSystem::_SeparateBlendScene_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::SeparateBlendScene& Pass::separate_blend_scene() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.separate_blend_scene)
  return _internal_separate_blend_scene();
}
inline ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* Pass::release_separate_blend_scene() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.separate_blend_scene)
  
  ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* temp = separate_blend_scene_;
  separate_blend_scene_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* Pass::_internal_mutable_separate_blend_scene() {
  
  if (separate_blend_scene_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::SeparateBlendScene>(GetArenaNoVirtual());
    separate_blend_scene_ = p;
  }
  return separate_blend_scene_;
}
inline ::Tiny3D::Script::MaterialSystem::SeparateBlendScene* Pass::mutable_separate_blend_scene() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.separate_blend_scene)
  return _internal_mutable_separate_blend_scene();
}
inline void Pass::set_allocated_separate_blend_scene(::Tiny3D::Script::MaterialSystem::SeparateBlendScene* separate_blend_scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete separate_blend_scene_;
  }
  if (separate_blend_scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      separate_blend_scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, separate_blend_scene, submessage_arena);
    }
    
  } else {
    
  }
  separate_blend_scene_ = separate_blend_scene;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.separate_blend_scene)
}

// .Tiny3D.Script.MaterialSystem.BlendOperation scene_blend_op = 8;
inline void Pass::clear_scene_blend_op() {
  scene_blend_op_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::BlendOperation Pass::_internal_scene_blend_op() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::BlendOperation >(scene_blend_op_);
}
inline ::Tiny3D::Script::MaterialSystem::BlendOperation Pass::scene_blend_op() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.scene_blend_op)
  return _internal_scene_blend_op();
}
inline void Pass::_internal_set_scene_blend_op(::Tiny3D::Script::MaterialSystem::BlendOperation value) {
  
  scene_blend_op_ = value;
}
inline void Pass::set_scene_blend_op(::Tiny3D::Script::MaterialSystem::BlendOperation value) {
  _internal_set_scene_blend_op(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.scene_blend_op)
}

// .Tiny3D.Script.MaterialSystem.SeparateSceneBlendOperation separate_scene_blend_op = 9;
inline bool Pass::_internal_has_separate_scene_blend_op() const {
  return this != internal_default_instance() && separate_scene_blend_op_ != nullptr;
}
inline bool Pass::has_separate_scene_blend_op() const {
  return _internal_has_separate_scene_blend_op();
}
inline void Pass::clear_separate_scene_blend_op() {
  if (GetArenaNoVirtual() == nullptr && separate_scene_blend_op_ != nullptr) {
    delete separate_scene_blend_op_;
  }
  separate_scene_blend_op_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation& Pass::_internal_separate_scene_blend_op() const {
  const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* p = separate_scene_blend_op_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation*>(
      &::Tiny3D::Script::MaterialSystem::_SeparateSceneBlendOperation_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation& Pass::separate_scene_blend_op() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.separate_scene_blend_op)
  return _internal_separate_scene_blend_op();
}
inline ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* Pass::release_separate_scene_blend_op() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.separate_scene_blend_op)
  
  ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* temp = separate_scene_blend_op_;
  separate_scene_blend_op_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* Pass::_internal_mutable_separate_scene_blend_op() {
  
  if (separate_scene_blend_op_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation>(GetArenaNoVirtual());
    separate_scene_blend_op_ = p;
  }
  return separate_scene_blend_op_;
}
inline ::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* Pass::mutable_separate_scene_blend_op() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.separate_scene_blend_op)
  return _internal_mutable_separate_scene_blend_op();
}
inline void Pass::set_allocated_separate_scene_blend_op(::Tiny3D::Script::MaterialSystem::SeparateSceneBlendOperation* separate_scene_blend_op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete separate_scene_blend_op_;
  }
  if (separate_scene_blend_op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      separate_scene_blend_op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, separate_scene_blend_op, submessage_arena);
    }
    
  } else {
    
  }
  separate_scene_blend_op_ = separate_scene_blend_op;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.separate_scene_blend_op)
}

// bool depth_check = 10;
inline void Pass::clear_depth_check() {
  depth_check_ = false;
}
inline bool Pass::_internal_depth_check() const {
  return depth_check_;
}
inline bool Pass::depth_check() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.depth_check)
  return _internal_depth_check();
}
inline void Pass::_internal_set_depth_check(bool value) {
  
  depth_check_ = value;
}
inline void Pass::set_depth_check(bool value) {
  _internal_set_depth_check(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.depth_check)
}

// bool depth_write = 11;
inline void Pass::clear_depth_write() {
  depth_write_ = false;
}
inline bool Pass::_internal_depth_write() const {
  return depth_write_;
}
inline bool Pass::depth_write() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.depth_write)
  return _internal_depth_write();
}
inline void Pass::_internal_set_depth_write(bool value) {
  
  depth_write_ = value;
}
inline void Pass::set_depth_write(bool value) {
  _internal_set_depth_write(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.depth_write)
}

// .Tiny3D.Script.MaterialSystem.CompareFunction depth_func = 12;
inline void Pass::clear_depth_func() {
  depth_func_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::CompareFunction Pass::_internal_depth_func() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::CompareFunction >(depth_func_);
}
inline ::Tiny3D::Script::MaterialSystem::CompareFunction Pass::depth_func() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.depth_func)
  return _internal_depth_func();
}
inline void Pass::_internal_set_depth_func(::Tiny3D::Script::MaterialSystem::CompareFunction value) {
  
  depth_func_ = value;
}
inline void Pass::set_depth_func(::Tiny3D::Script::MaterialSystem::CompareFunction value) {
  _internal_set_depth_func(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.depth_func)
}

// .Tiny3D.Script.MaterialSystem.DepthBias depth_bias = 13;
inline bool Pass::_internal_has_depth_bias() const {
  return this != internal_default_instance() && depth_bias_ != nullptr;
}
inline bool Pass::has_depth_bias() const {
  return _internal_has_depth_bias();
}
inline void Pass::clear_depth_bias() {
  if (GetArenaNoVirtual() == nullptr && depth_bias_ != nullptr) {
    delete depth_bias_;
  }
  depth_bias_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::DepthBias& Pass::_internal_depth_bias() const {
  const ::Tiny3D::Script::MaterialSystem::DepthBias* p = depth_bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::DepthBias*>(
      &::Tiny3D::Script::MaterialSystem::_DepthBias_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::DepthBias& Pass::depth_bias() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.depth_bias)
  return _internal_depth_bias();
}
inline ::Tiny3D::Script::MaterialSystem::DepthBias* Pass::release_depth_bias() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.depth_bias)
  
  ::Tiny3D::Script::MaterialSystem::DepthBias* temp = depth_bias_;
  depth_bias_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::DepthBias* Pass::_internal_mutable_depth_bias() {
  
  if (depth_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::DepthBias>(GetArenaNoVirtual());
    depth_bias_ = p;
  }
  return depth_bias_;
}
inline ::Tiny3D::Script::MaterialSystem::DepthBias* Pass::mutable_depth_bias() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.depth_bias)
  return _internal_mutable_depth_bias();
}
inline void Pass::set_allocated_depth_bias(::Tiny3D::Script::MaterialSystem::DepthBias* depth_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete depth_bias_;
  }
  if (depth_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      depth_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depth_bias, submessage_arena);
    }
    
  } else {
    
  }
  depth_bias_ = depth_bias;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.depth_bias)
}

// float iteration_depth_bias = 14;
inline void Pass::clear_iteration_depth_bias() {
  iteration_depth_bias_ = 0;
}
inline float Pass::_internal_iteration_depth_bias() const {
  return iteration_depth_bias_;
}
inline float Pass::iteration_depth_bias() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.iteration_depth_bias)
  return _internal_iteration_depth_bias();
}
inline void Pass::_internal_set_iteration_depth_bias(float value) {
  
  iteration_depth_bias_ = value;
}
inline void Pass::set_iteration_depth_bias(float value) {
  _internal_set_iteration_depth_bias(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.iteration_depth_bias)
}

// .Tiny3D.Script.MaterialSystem.AlphaRejection alpha_rejection = 15;
inline bool Pass::_internal_has_alpha_rejection() const {
  return this != internal_default_instance() && alpha_rejection_ != nullptr;
}
inline bool Pass::has_alpha_rejection() const {
  return _internal_has_alpha_rejection();
}
inline void Pass::clear_alpha_rejection() {
  if (GetArenaNoVirtual() == nullptr && alpha_rejection_ != nullptr) {
    delete alpha_rejection_;
  }
  alpha_rejection_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::AlphaRejection& Pass::_internal_alpha_rejection() const {
  const ::Tiny3D::Script::MaterialSystem::AlphaRejection* p = alpha_rejection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::AlphaRejection*>(
      &::Tiny3D::Script::MaterialSystem::_AlphaRejection_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::AlphaRejection& Pass::alpha_rejection() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.alpha_rejection)
  return _internal_alpha_rejection();
}
inline ::Tiny3D::Script::MaterialSystem::AlphaRejection* Pass::release_alpha_rejection() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.alpha_rejection)
  
  ::Tiny3D::Script::MaterialSystem::AlphaRejection* temp = alpha_rejection_;
  alpha_rejection_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::AlphaRejection* Pass::_internal_mutable_alpha_rejection() {
  
  if (alpha_rejection_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::AlphaRejection>(GetArenaNoVirtual());
    alpha_rejection_ = p;
  }
  return alpha_rejection_;
}
inline ::Tiny3D::Script::MaterialSystem::AlphaRejection* Pass::mutable_alpha_rejection() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.alpha_rejection)
  return _internal_mutable_alpha_rejection();
}
inline void Pass::set_allocated_alpha_rejection(::Tiny3D::Script::MaterialSystem::AlphaRejection* alpha_rejection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alpha_rejection_;
  }
  if (alpha_rejection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alpha_rejection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alpha_rejection, submessage_arena);
    }
    
  } else {
    
  }
  alpha_rejection_ = alpha_rejection;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.alpha_rejection)
}

// bool alpha_to_coverage = 16;
inline void Pass::clear_alpha_to_coverage() {
  alpha_to_coverage_ = false;
}
inline bool Pass::_internal_alpha_to_coverage() const {
  return alpha_to_coverage_;
}
inline bool Pass::alpha_to_coverage() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.alpha_to_coverage)
  return _internal_alpha_to_coverage();
}
inline void Pass::_internal_set_alpha_to_coverage(bool value) {
  
  alpha_to_coverage_ = value;
}
inline void Pass::set_alpha_to_coverage(bool value) {
  _internal_set_alpha_to_coverage(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.alpha_to_coverage)
}

// bool light_scissor = 17;
inline void Pass::clear_light_scissor() {
  light_scissor_ = false;
}
inline bool Pass::_internal_light_scissor() const {
  return light_scissor_;
}
inline bool Pass::light_scissor() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.light_scissor)
  return _internal_light_scissor();
}
inline void Pass::_internal_set_light_scissor(bool value) {
  
  light_scissor_ = value;
}
inline void Pass::set_light_scissor(bool value) {
  _internal_set_light_scissor(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.light_scissor)
}

// bool light_clip_planes = 18;
inline void Pass::clear_light_clip_planes() {
  light_clip_planes_ = false;
}
inline bool Pass::_internal_light_clip_planes() const {
  return light_clip_planes_;
}
inline bool Pass::light_clip_planes() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.light_clip_planes)
  return _internal_light_clip_planes();
}
inline void Pass::_internal_set_light_clip_planes(bool value) {
  
  light_clip_planes_ = value;
}
inline void Pass::set_light_clip_planes(bool value) {
  _internal_set_light_clip_planes(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.light_clip_planes)
}

// .Tiny3D.Script.MaterialSystem.IlluminationStage illumination_stage = 19;
inline void Pass::clear_illumination_stage() {
  illumination_stage_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::IlluminationStage Pass::_internal_illumination_stage() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::IlluminationStage >(illumination_stage_);
}
inline ::Tiny3D::Script::MaterialSystem::IlluminationStage Pass::illumination_stage() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.illumination_stage)
  return _internal_illumination_stage();
}
inline void Pass::_internal_set_illumination_stage(::Tiny3D::Script::MaterialSystem::IlluminationStage value) {
  
  illumination_stage_ = value;
}
inline void Pass::set_illumination_stage(::Tiny3D::Script::MaterialSystem::IlluminationStage value) {
  _internal_set_illumination_stage(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.illumination_stage)
}

// bool normailize_normals = 20;
inline void Pass::clear_normailize_normals() {
  normailize_normals_ = false;
}
inline bool Pass::_internal_normailize_normals() const {
  return normailize_normals_;
}
inline bool Pass::normailize_normals() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.normailize_normals)
  return _internal_normailize_normals();
}
inline void Pass::_internal_set_normailize_normals(bool value) {
  
  normailize_normals_ = value;
}
inline void Pass::set_normailize_normals(bool value) {
  _internal_set_normailize_normals(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.normailize_normals)
}

// .Tiny3D.Script.MaterialSystem.TransparentSorting transparent_sorting = 21;
inline void Pass::clear_transparent_sorting() {
  transparent_sorting_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::TransparentSorting Pass::_internal_transparent_sorting() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::TransparentSorting >(transparent_sorting_);
}
inline ::Tiny3D::Script::MaterialSystem::TransparentSorting Pass::transparent_sorting() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.transparent_sorting)
  return _internal_transparent_sorting();
}
inline void Pass::_internal_set_transparent_sorting(::Tiny3D::Script::MaterialSystem::TransparentSorting value) {
  
  transparent_sorting_ = value;
}
inline void Pass::set_transparent_sorting(::Tiny3D::Script::MaterialSystem::TransparentSorting value) {
  _internal_set_transparent_sorting(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.transparent_sorting)
}

// .Tiny3D.Script.MaterialSystem.CullHardware cull_hardware = 22;
inline void Pass::clear_cull_hardware() {
  cull_hardware_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::CullHardware Pass::_internal_cull_hardware() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::CullHardware >(cull_hardware_);
}
inline ::Tiny3D::Script::MaterialSystem::CullHardware Pass::cull_hardware() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.cull_hardware)
  return _internal_cull_hardware();
}
inline void Pass::_internal_set_cull_hardware(::Tiny3D::Script::MaterialSystem::CullHardware value) {
  
  cull_hardware_ = value;
}
inline void Pass::set_cull_hardware(::Tiny3D::Script::MaterialSystem::CullHardware value) {
  _internal_set_cull_hardware(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.cull_hardware)
}

// .Tiny3D.Script.MaterialSystem.CullSoftware cull_software = 23;
inline void Pass::clear_cull_software() {
  cull_software_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::CullSoftware Pass::_internal_cull_software() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::CullSoftware >(cull_software_);
}
inline ::Tiny3D::Script::MaterialSystem::CullSoftware Pass::cull_software() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.cull_software)
  return _internal_cull_software();
}
inline void Pass::_internal_set_cull_software(::Tiny3D::Script::MaterialSystem::CullSoftware value) {
  
  cull_software_ = value;
}
inline void Pass::set_cull_software(::Tiny3D::Script::MaterialSystem::CullSoftware value) {
  _internal_set_cull_software(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.cull_software)
}

// bool lighting = 24;
inline void Pass::clear_lighting() {
  lighting_ = false;
}
inline bool Pass::_internal_lighting() const {
  return lighting_;
}
inline bool Pass::lighting() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.lighting)
  return _internal_lighting();
}
inline void Pass::_internal_set_lighting(bool value) {
  
  lighting_ = value;
}
inline void Pass::set_lighting(bool value) {
  _internal_set_lighting(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.lighting)
}

// .Tiny3D.Script.MaterialSystem.ShadingMode shading = 25;
inline void Pass::clear_shading() {
  shading_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::ShadingMode Pass::_internal_shading() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::ShadingMode >(shading_);
}
inline ::Tiny3D::Script::MaterialSystem::ShadingMode Pass::shading() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.shading)
  return _internal_shading();
}
inline void Pass::_internal_set_shading(::Tiny3D::Script::MaterialSystem::ShadingMode value) {
  
  shading_ = value;
}
inline void Pass::set_shading(::Tiny3D::Script::MaterialSystem::ShadingMode value) {
  _internal_set_shading(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.shading)
}

// .Tiny3D.Script.MaterialSystem.PolygonMode polygon_mode = 26;
inline void Pass::clear_polygon_mode() {
  polygon_mode_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::PolygonMode Pass::_internal_polygon_mode() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::PolygonMode >(polygon_mode_);
}
inline ::Tiny3D::Script::MaterialSystem::PolygonMode Pass::polygon_mode() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.polygon_mode)
  return _internal_polygon_mode();
}
inline void Pass::_internal_set_polygon_mode(::Tiny3D::Script::MaterialSystem::PolygonMode value) {
  
  polygon_mode_ = value;
}
inline void Pass::set_polygon_mode(::Tiny3D::Script::MaterialSystem::PolygonMode value) {
  _internal_set_polygon_mode(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.polygon_mode)
}

// bool polygon_mode_overrideable = 27;
inline void Pass::clear_polygon_mode_overrideable() {
  polygon_mode_overrideable_ = false;
}
inline bool Pass::_internal_polygon_mode_overrideable() const {
  return polygon_mode_overrideable_;
}
inline bool Pass::polygon_mode_overrideable() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.polygon_mode_overrideable)
  return _internal_polygon_mode_overrideable();
}
inline void Pass::_internal_set_polygon_mode_overrideable(bool value) {
  
  polygon_mode_overrideable_ = value;
}
inline void Pass::set_polygon_mode_overrideable(bool value) {
  _internal_set_polygon_mode_overrideable(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.polygon_mode_overrideable)
}

// .Tiny3D.Script.MaterialSystem.Fog fog = 28;
inline bool Pass::_internal_has_fog() const {
  return this != internal_default_instance() && fog_ != nullptr;
}
inline bool Pass::has_fog() const {
  return _internal_has_fog();
}
inline void Pass::clear_fog() {
  if (GetArenaNoVirtual() == nullptr && fog_ != nullptr) {
    delete fog_;
  }
  fog_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Fog& Pass::_internal_fog() const {
  const ::Tiny3D::Script::MaterialSystem::Fog* p = fog_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Fog*>(
      &::Tiny3D::Script::MaterialSystem::_Fog_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Fog& Pass::fog() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.fog)
  return _internal_fog();
}
inline ::Tiny3D::Script::MaterialSystem::Fog* Pass::release_fog() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.fog)
  
  ::Tiny3D::Script::MaterialSystem::Fog* temp = fog_;
  fog_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Fog* Pass::_internal_mutable_fog() {
  
  if (fog_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Fog>(GetArenaNoVirtual());
    fog_ = p;
  }
  return fog_;
}
inline ::Tiny3D::Script::MaterialSystem::Fog* Pass::mutable_fog() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.fog)
  return _internal_mutable_fog();
}
inline void Pass::set_allocated_fog(::Tiny3D::Script::MaterialSystem::Fog* fog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fog_;
  }
  if (fog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fog, submessage_arena);
    }
    
  } else {
    
  }
  fog_ = fog;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.fog)
}

// bool color_write = 29;
inline void Pass::clear_color_write() {
  color_write_ = false;
}
inline bool Pass::_internal_color_write() const {
  return color_write_;
}
inline bool Pass::color_write() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.color_write)
  return _internal_color_write();
}
inline void Pass::_internal_set_color_write(bool value) {
  
  color_write_ = value;
}
inline void Pass::set_color_write(bool value) {
  _internal_set_color_write(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.color_write)
}

// uint32 max_lights = 30;
inline void Pass::clear_max_lights() {
  max_lights_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pass::_internal_max_lights() const {
  return max_lights_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pass::max_lights() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.max_lights)
  return _internal_max_lights();
}
inline void Pass::_internal_set_max_lights(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_lights_ = value;
}
inline void Pass::set_max_lights(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_lights(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.max_lights)
}

// uint32 start_light = 31;
inline void Pass::clear_start_light() {
  start_light_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pass::_internal_start_light() const {
  return start_light_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pass::start_light() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.start_light)
  return _internal_start_light();
}
inline void Pass::_internal_set_start_light(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_light_ = value;
}
inline void Pass::set_start_light(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_light(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.start_light)
}

// .Tiny3D.Script.MaterialSystem.Iteration iteration = 32;
inline bool Pass::_internal_has_iteration() const {
  return this != internal_default_instance() && iteration_ != nullptr;
}
inline bool Pass::has_iteration() const {
  return _internal_has_iteration();
}
inline void Pass::clear_iteration() {
  if (GetArenaNoVirtual() == nullptr && iteration_ != nullptr) {
    delete iteration_;
  }
  iteration_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Iteration& Pass::_internal_iteration() const {
  const ::Tiny3D::Script::MaterialSystem::Iteration* p = iteration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Iteration*>(
      &::Tiny3D::Script::MaterialSystem::_Iteration_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Iteration& Pass::iteration() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.iteration)
  return _internal_iteration();
}
inline ::Tiny3D::Script::MaterialSystem::Iteration* Pass::release_iteration() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.iteration)
  
  ::Tiny3D::Script::MaterialSystem::Iteration* temp = iteration_;
  iteration_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Iteration* Pass::_internal_mutable_iteration() {
  
  if (iteration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Iteration>(GetArenaNoVirtual());
    iteration_ = p;
  }
  return iteration_;
}
inline ::Tiny3D::Script::MaterialSystem::Iteration* Pass::mutable_iteration() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.iteration)
  return _internal_mutable_iteration();
}
inline void Pass::set_allocated_iteration(::Tiny3D::Script::MaterialSystem::Iteration* iteration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete iteration_;
  }
  if (iteration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iteration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteration, submessage_arena);
    }
    
  } else {
    
  }
  iteration_ = iteration;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.iteration)
}

// float point_size = 33;
inline void Pass::clear_point_size() {
  point_size_ = 0;
}
inline float Pass::_internal_point_size() const {
  return point_size_;
}
inline float Pass::point_size() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.point_size)
  return _internal_point_size();
}
inline void Pass::_internal_set_point_size(float value) {
  
  point_size_ = value;
}
inline void Pass::set_point_size(float value) {
  _internal_set_point_size(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.point_size)
}

// bool point_sprites = 34;
inline void Pass::clear_point_sprites() {
  point_sprites_ = false;
}
inline bool Pass::_internal_point_sprites() const {
  return point_sprites_;
}
inline bool Pass::point_sprites() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.point_sprites)
  return _internal_point_sprites();
}
inline void Pass::_internal_set_point_sprites(bool value) {
  
  point_sprites_ = value;
}
inline void Pass::set_point_sprites(bool value) {
  _internal_set_point_sprites(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.point_sprites)
}

// .Tiny3D.Script.MaterialSystem.PointSizeAttenuation point_size_attenuation = 35;
inline bool Pass::_internal_has_point_size_attenuation() const {
  return this != internal_default_instance() && point_size_attenuation_ != nullptr;
}
inline bool Pass::has_point_size_attenuation() const {
  return _internal_has_point_size_attenuation();
}
inline void Pass::clear_point_size_attenuation() {
  if (GetArenaNoVirtual() == nullptr && point_size_attenuation_ != nullptr) {
    delete point_size_attenuation_;
  }
  point_size_attenuation_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation& Pass::_internal_point_size_attenuation() const {
  const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* p = point_size_attenuation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation*>(
      &::Tiny3D::Script::MaterialSystem::_PointSizeAttenuation_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation& Pass::point_size_attenuation() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.point_size_attenuation)
  return _internal_point_size_attenuation();
}
inline ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* Pass::release_point_size_attenuation() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.point_size_attenuation)
  
  ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* temp = point_size_attenuation_;
  point_size_attenuation_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* Pass::_internal_mutable_point_size_attenuation() {
  
  if (point_size_attenuation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::PointSizeAttenuation>(GetArenaNoVirtual());
    point_size_attenuation_ = p;
  }
  return point_size_attenuation_;
}
inline ::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* Pass::mutable_point_size_attenuation() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.point_size_attenuation)
  return _internal_mutable_point_size_attenuation();
}
inline void Pass::set_allocated_point_size_attenuation(::Tiny3D::Script::MaterialSystem::PointSizeAttenuation* point_size_attenuation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point_size_attenuation_;
  }
  if (point_size_attenuation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point_size_attenuation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_size_attenuation, submessage_arena);
    }
    
  } else {
    
  }
  point_size_attenuation_ = point_size_attenuation;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.point_size_attenuation)
}

// float point_size_min = 36;
inline void Pass::clear_point_size_min() {
  point_size_min_ = 0;
}
inline float Pass::_internal_point_size_min() const {
  return point_size_min_;
}
inline float Pass::point_size_min() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.point_size_min)
  return _internal_point_size_min();
}
inline void Pass::_internal_set_point_size_min(float value) {
  
  point_size_min_ = value;
}
inline void Pass::set_point_size_min(float value) {
  _internal_set_point_size_min(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.point_size_min)
}

// float point_size_max = 37;
inline void Pass::clear_point_size_max() {
  point_size_max_ = 0;
}
inline float Pass::_internal_point_size_max() const {
  return point_size_max_;
}
inline float Pass::point_size_max() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.point_size_max)
  return _internal_point_size_max();
}
inline void Pass::_internal_set_point_size_max(float value) {
  
  point_size_max_ = value;
}
inline void Pass::set_point_size_max(float value) {
  _internal_set_point_size_max(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Pass.point_size_max)
}

// .Tiny3D.Script.MaterialSystem.GPUProgramRef gpu_program_ref = 38;
inline bool Pass::_internal_has_gpu_program_ref() const {
  return this != internal_default_instance() && gpu_program_ref_ != nullptr;
}
inline bool Pass::has_gpu_program_ref() const {
  return _internal_has_gpu_program_ref();
}
inline void Pass::clear_gpu_program_ref() {
  if (GetArenaNoVirtual() == nullptr && gpu_program_ref_ != nullptr) {
    delete gpu_program_ref_;
  }
  gpu_program_ref_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::GPUProgramRef& Pass::_internal_gpu_program_ref() const {
  const ::Tiny3D::Script::MaterialSystem::GPUProgramRef* p = gpu_program_ref_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::GPUProgramRef*>(
      &::Tiny3D::Script::MaterialSystem::_GPUProgramRef_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::GPUProgramRef& Pass::gpu_program_ref() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Pass.gpu_program_ref)
  return _internal_gpu_program_ref();
}
inline ::Tiny3D::Script::MaterialSystem::GPUProgramRef* Pass::release_gpu_program_ref() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Pass.gpu_program_ref)
  
  ::Tiny3D::Script::MaterialSystem::GPUProgramRef* temp = gpu_program_ref_;
  gpu_program_ref_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::GPUProgramRef* Pass::_internal_mutable_gpu_program_ref() {
  
  if (gpu_program_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUProgramRef>(GetArenaNoVirtual());
    gpu_program_ref_ = p;
  }
  return gpu_program_ref_;
}
inline ::Tiny3D::Script::MaterialSystem::GPUProgramRef* Pass::mutable_gpu_program_ref() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Pass.gpu_program_ref)
  return _internal_mutable_gpu_program_ref();
}
inline void Pass::set_allocated_gpu_program_ref(::Tiny3D::Script::MaterialSystem::GPUProgramRef* gpu_program_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gpu_program_ref_;
  }
  if (gpu_program_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_program_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_program_ref, submessage_arena);
    }
    
  } else {
    
  }
  gpu_program_ref_ = gpu_program_ref;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Pass.gpu_program_ref)
}

// -------------------------------------------------------------------

// GPUVendorRule

// .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
inline void GPUVendorRule::clear_rule() {
  rule_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::GPURuleType GPUVendorRule::_internal_rule() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::GPURuleType >(rule_);
}
inline ::Tiny3D::Script::MaterialSystem::GPURuleType GPUVendorRule::rule() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUVendorRule.rule)
  return _internal_rule();
}
inline void GPUVendorRule::_internal_set_rule(::Tiny3D::Script::MaterialSystem::GPURuleType value) {
  
  rule_ = value;
}
inline void GPUVendorRule::set_rule(::Tiny3D::Script::MaterialSystem::GPURuleType value) {
  _internal_set_rule(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.GPUVendorRule.rule)
}

// string vendor_name = 2;
inline void GPUVendorRule::clear_vendor_name() {
  vendor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPUVendorRule::vendor_name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name)
  return _internal_vendor_name();
}
inline void GPUVendorRule::set_vendor_name(const std::string& value) {
  _internal_set_vendor_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name)
}
inline std::string* GPUVendorRule::mutable_vendor_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name)
  return _internal_mutable_vendor_name();
}
inline const std::string& GPUVendorRule::_internal_vendor_name() const {
  return vendor_name_.GetNoArena();
}
inline void GPUVendorRule::_internal_set_vendor_name(const std::string& value) {
  
  vendor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GPUVendorRule::set_vendor_name(std::string&& value) {
  
  vendor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name)
}
inline void GPUVendorRule::set_vendor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name)
}
inline void GPUVendorRule::set_vendor_name(const char* value, size_t size) {
  
  vendor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name)
}
inline std::string* GPUVendorRule::_internal_mutable_vendor_name() {
  
  return vendor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPUVendorRule::release_vendor_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name)
  
  return vendor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPUVendorRule::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    
  } else {
    
  }
  vendor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.GPUVendorRule.vendor_name)
}

// -------------------------------------------------------------------

// GPUDeviceRule

// .Tiny3D.Script.MaterialSystem.GPURuleType rule = 1;
inline void GPUDeviceRule::clear_rule() {
  rule_ = 0;
}
inline ::Tiny3D::Script::MaterialSystem::GPURuleType GPUDeviceRule::_internal_rule() const {
  return static_cast< ::Tiny3D::Script::MaterialSystem::GPURuleType >(rule_);
}
inline ::Tiny3D::Script::MaterialSystem::GPURuleType GPUDeviceRule::rule() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUDeviceRule.rule)
  return _internal_rule();
}
inline void GPUDeviceRule::_internal_set_rule(::Tiny3D::Script::MaterialSystem::GPURuleType value) {
  
  rule_ = value;
}
inline void GPUDeviceRule::set_rule(::Tiny3D::Script::MaterialSystem::GPURuleType value) {
  _internal_set_rule(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.GPUDeviceRule.rule)
}

// string device_pattern = 2;
inline void GPUDeviceRule::clear_device_pattern() {
  device_pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPUDeviceRule::device_pattern() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern)
  return _internal_device_pattern();
}
inline void GPUDeviceRule::set_device_pattern(const std::string& value) {
  _internal_set_device_pattern(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern)
}
inline std::string* GPUDeviceRule::mutable_device_pattern() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern)
  return _internal_mutable_device_pattern();
}
inline const std::string& GPUDeviceRule::_internal_device_pattern() const {
  return device_pattern_.GetNoArena();
}
inline void GPUDeviceRule::_internal_set_device_pattern(const std::string& value) {
  
  device_pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GPUDeviceRule::set_device_pattern(std::string&& value) {
  
  device_pattern_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern)
}
inline void GPUDeviceRule::set_device_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern)
}
inline void GPUDeviceRule::set_device_pattern(const char* value, size_t size) {
  
  device_pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern)
}
inline std::string* GPUDeviceRule::_internal_mutable_device_pattern() {
  
  return device_pattern_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPUDeviceRule::release_device_pattern() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern)
  
  return device_pattern_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPUDeviceRule::set_allocated_device_pattern(std::string* device_pattern) {
  if (device_pattern != nullptr) {
    
  } else {
    
  }
  device_pattern_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_pattern);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.GPUDeviceRule.device_pattern)
}

// bool case_sensitive = 3;
inline void GPUDeviceRule::clear_case_sensitive() {
  case_sensitive_ = false;
}
inline bool GPUDeviceRule::_internal_case_sensitive() const {
  return case_sensitive_;
}
inline bool GPUDeviceRule::case_sensitive() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.GPUDeviceRule.case_sensitive)
  return _internal_case_sensitive();
}
inline void GPUDeviceRule::_internal_set_case_sensitive(bool value) {
  
  case_sensitive_ = value;
}
inline void GPUDeviceRule::set_case_sensitive(bool value) {
  _internal_set_case_sensitive(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.GPUDeviceRule.case_sensitive)
}

// -------------------------------------------------------------------

// Technique

// .Tiny3D.Script.MaterialSystem.Header header = 1;
inline bool Technique::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Technique::has_header() const {
  return _internal_has_header();
}
inline void Technique::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Header& Technique::_internal_header() const {
  const ::Tiny3D::Script::MaterialSystem::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Header*>(
      &::Tiny3D::Script::MaterialSystem::_Header_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Header& Technique::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Technique.header)
  return _internal_header();
}
inline ::Tiny3D::Script::MaterialSystem::Header* Technique::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Technique.header)
  
  ::Tiny3D::Script::MaterialSystem::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Header* Technique::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::MaterialSystem::Header* Technique::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Technique.header)
  return _internal_mutable_header();
}
inline void Technique::set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Technique.header)
}

// uint32 render_queue = 2;
inline void Technique::clear_render_queue() {
  render_queue_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Technique::_internal_render_queue() const {
  return render_queue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Technique::render_queue() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Technique.render_queue)
  return _internal_render_queue();
}
inline void Technique::_internal_set_render_queue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  render_queue_ = value;
}
inline void Technique::set_render_queue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_render_queue(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Technique.render_queue)
}

// uint32 lod_index = 3;
inline void Technique::clear_lod_index() {
  lod_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Technique::_internal_lod_index() const {
  return lod_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Technique::lod_index() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Technique.lod_index)
  return _internal_lod_index();
}
inline void Technique::_internal_set_lod_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lod_index_ = value;
}
inline void Technique::set_lod_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lod_index(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Technique.lod_index)
}

// string scheme = 4;
inline void Technique::clear_scheme() {
  scheme_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Technique::scheme() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Technique.scheme)
  return _internal_scheme();
}
inline void Technique::set_scheme(const std::string& value) {
  _internal_set_scheme(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Technique.scheme)
}
inline std::string* Technique::mutable_scheme() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Technique.scheme)
  return _internal_mutable_scheme();
}
inline const std::string& Technique::_internal_scheme() const {
  return scheme_.GetNoArena();
}
inline void Technique::_internal_set_scheme(const std::string& value) {
  
  scheme_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Technique::set_scheme(std::string&& value) {
  
  scheme_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.Technique.scheme)
}
inline void Technique::set_scheme(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scheme_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.Technique.scheme)
}
inline void Technique::set_scheme(const char* value, size_t size) {
  
  scheme_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.Technique.scheme)
}
inline std::string* Technique::_internal_mutable_scheme() {
  
  return scheme_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Technique::release_scheme() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Technique.scheme)
  
  return scheme_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Technique::set_allocated_scheme(std::string* scheme) {
  if (scheme != nullptr) {
    
  } else {
    
  }
  scheme_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheme);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Technique.scheme)
}

// string shadow_caster_material = 5;
inline void Technique::clear_shadow_caster_material() {
  shadow_caster_material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Technique::shadow_caster_material() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material)
  return _internal_shadow_caster_material();
}
inline void Technique::set_shadow_caster_material(const std::string& value) {
  _internal_set_shadow_caster_material(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material)
}
inline std::string* Technique::mutable_shadow_caster_material() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material)
  return _internal_mutable_shadow_caster_material();
}
inline const std::string& Technique::_internal_shadow_caster_material() const {
  return shadow_caster_material_.GetNoArena();
}
inline void Technique::_internal_set_shadow_caster_material(const std::string& value) {
  
  shadow_caster_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Technique::set_shadow_caster_material(std::string&& value) {
  
  shadow_caster_material_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material)
}
inline void Technique::set_shadow_caster_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shadow_caster_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material)
}
inline void Technique::set_shadow_caster_material(const char* value, size_t size) {
  
  shadow_caster_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material)
}
inline std::string* Technique::_internal_mutable_shadow_caster_material() {
  
  return shadow_caster_material_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Technique::release_shadow_caster_material() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material)
  
  return shadow_caster_material_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Technique::set_allocated_shadow_caster_material(std::string* shadow_caster_material) {
  if (shadow_caster_material != nullptr) {
    
  } else {
    
  }
  shadow_caster_material_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shadow_caster_material);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Technique.shadow_caster_material)
}

// string shadow_receiver_material = 6;
inline void Technique::clear_shadow_receiver_material() {
  shadow_receiver_material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Technique::shadow_receiver_material() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material)
  return _internal_shadow_receiver_material();
}
inline void Technique::set_shadow_receiver_material(const std::string& value) {
  _internal_set_shadow_receiver_material(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material)
}
inline std::string* Technique::mutable_shadow_receiver_material() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material)
  return _internal_mutable_shadow_receiver_material();
}
inline const std::string& Technique::_internal_shadow_receiver_material() const {
  return shadow_receiver_material_.GetNoArena();
}
inline void Technique::_internal_set_shadow_receiver_material(const std::string& value) {
  
  shadow_receiver_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Technique::set_shadow_receiver_material(std::string&& value) {
  
  shadow_receiver_material_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material)
}
inline void Technique::set_shadow_receiver_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shadow_receiver_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material)
}
inline void Technique::set_shadow_receiver_material(const char* value, size_t size) {
  
  shadow_receiver_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material)
}
inline std::string* Technique::_internal_mutable_shadow_receiver_material() {
  
  return shadow_receiver_material_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Technique::release_shadow_receiver_material() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material)
  
  return shadow_receiver_material_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Technique::set_allocated_shadow_receiver_material(std::string* shadow_receiver_material) {
  if (shadow_receiver_material != nullptr) {
    
  } else {
    
  }
  shadow_receiver_material_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shadow_receiver_material);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Technique.shadow_receiver_material)
}

// .Tiny3D.Script.MaterialSystem.GPUVendorRule gpu_vendor_rule = 7;
inline bool Technique::_internal_has_gpu_vendor_rule() const {
  return this != internal_default_instance() && gpu_vendor_rule_ != nullptr;
}
inline bool Technique::has_gpu_vendor_rule() const {
  return _internal_has_gpu_vendor_rule();
}
inline void Technique::clear_gpu_vendor_rule() {
  if (GetArenaNoVirtual() == nullptr && gpu_vendor_rule_ != nullptr) {
    delete gpu_vendor_rule_;
  }
  gpu_vendor_rule_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::GPUVendorRule& Technique::_internal_gpu_vendor_rule() const {
  const ::Tiny3D::Script::MaterialSystem::GPUVendorRule* p = gpu_vendor_rule_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::GPUVendorRule*>(
      &::Tiny3D::Script::MaterialSystem::_GPUVendorRule_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::GPUVendorRule& Technique::gpu_vendor_rule() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Technique.gpu_vendor_rule)
  return _internal_gpu_vendor_rule();
}
inline ::Tiny3D::Script::MaterialSystem::GPUVendorRule* Technique::release_gpu_vendor_rule() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Technique.gpu_vendor_rule)
  
  ::Tiny3D::Script::MaterialSystem::GPUVendorRule* temp = gpu_vendor_rule_;
  gpu_vendor_rule_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::GPUVendorRule* Technique::_internal_mutable_gpu_vendor_rule() {
  
  if (gpu_vendor_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUVendorRule>(GetArenaNoVirtual());
    gpu_vendor_rule_ = p;
  }
  return gpu_vendor_rule_;
}
inline ::Tiny3D::Script::MaterialSystem::GPUVendorRule* Technique::mutable_gpu_vendor_rule() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Technique.gpu_vendor_rule)
  return _internal_mutable_gpu_vendor_rule();
}
inline void Technique::set_allocated_gpu_vendor_rule(::Tiny3D::Script::MaterialSystem::GPUVendorRule* gpu_vendor_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gpu_vendor_rule_;
  }
  if (gpu_vendor_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_vendor_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_vendor_rule, submessage_arena);
    }
    
  } else {
    
  }
  gpu_vendor_rule_ = gpu_vendor_rule;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Technique.gpu_vendor_rule)
}

// .Tiny3D.Script.MaterialSystem.GPUDeviceRule gpu_device_rule = 8;
inline bool Technique::_internal_has_gpu_device_rule() const {
  return this != internal_default_instance() && gpu_device_rule_ != nullptr;
}
inline bool Technique::has_gpu_device_rule() const {
  return _internal_has_gpu_device_rule();
}
inline void Technique::clear_gpu_device_rule() {
  if (GetArenaNoVirtual() == nullptr && gpu_device_rule_ != nullptr) {
    delete gpu_device_rule_;
  }
  gpu_device_rule_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule& Technique::_internal_gpu_device_rule() const {
  const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* p = gpu_device_rule_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule*>(
      &::Tiny3D::Script::MaterialSystem::_GPUDeviceRule_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::GPUDeviceRule& Technique::gpu_device_rule() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Technique.gpu_device_rule)
  return _internal_gpu_device_rule();
}
inline ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* Technique::release_gpu_device_rule() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Technique.gpu_device_rule)
  
  ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* temp = gpu_device_rule_;
  gpu_device_rule_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* Technique::_internal_mutable_gpu_device_rule() {
  
  if (gpu_device_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::GPUDeviceRule>(GetArenaNoVirtual());
    gpu_device_rule_ = p;
  }
  return gpu_device_rule_;
}
inline ::Tiny3D::Script::MaterialSystem::GPUDeviceRule* Technique::mutable_gpu_device_rule() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Technique.gpu_device_rule)
  return _internal_mutable_gpu_device_rule();
}
inline void Technique::set_allocated_gpu_device_rule(::Tiny3D::Script::MaterialSystem::GPUDeviceRule* gpu_device_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gpu_device_rule_;
  }
  if (gpu_device_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_device_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_device_rule, submessage_arena);
    }
    
  } else {
    
  }
  gpu_device_rule_ = gpu_device_rule;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Technique.gpu_device_rule)
}

// -------------------------------------------------------------------

// LODValues

// uint32 number = 1;
inline void LODValues::clear_number() {
  number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LODValues::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LODValues::number() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.LODValues.number)
  return _internal_number();
}
inline void LODValues::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_ = value;
}
inline void LODValues::set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.LODValues.number)
}

// repeated float values = 2;
inline int LODValues::_internal_values_size() const {
  return values_.size();
}
inline int LODValues::values_size() const {
  return _internal_values_size();
}
inline void LODValues::clear_values() {
  values_.Clear();
}
inline float LODValues::_internal_values(int index) const {
  return values_.Get(index);
}
inline float LODValues::values(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.LODValues.values)
  return _internal_values(index);
}
inline void LODValues::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.LODValues.values)
}
inline void LODValues::_internal_add_values(float value) {
  values_.Add(value);
}
inline void LODValues::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.LODValues.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LODValues::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LODValues::values() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.LODValues.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LODValues::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LODValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.LODValues.values)
  return _internal_mutable_values();
}

// string strategy = 3;
inline void LODValues::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LODValues::strategy() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.LODValues.strategy)
  return _internal_strategy();
}
inline void LODValues::set_strategy(const std::string& value) {
  _internal_set_strategy(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.LODValues.strategy)
}
inline std::string* LODValues::mutable_strategy() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.LODValues.strategy)
  return _internal_mutable_strategy();
}
inline const std::string& LODValues::_internal_strategy() const {
  return strategy_.GetNoArena();
}
inline void LODValues::_internal_set_strategy(const std::string& value) {
  
  strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LODValues::set_strategy(std::string&& value) {
  
  strategy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.LODValues.strategy)
}
inline void LODValues::set_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.LODValues.strategy)
}
inline void LODValues::set_strategy(const char* value, size_t size) {
  
  strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.LODValues.strategy)
}
inline std::string* LODValues::_internal_mutable_strategy() {
  
  return strategy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LODValues::release_strategy() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.LODValues.strategy)
  
  return strategy_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LODValues::set_allocated_strategy(std::string* strategy) {
  if (strategy != nullptr) {
    
  } else {
    
  }
  strategy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.LODValues.strategy)
}

// -------------------------------------------------------------------

// TextureAlias

// string aliasName = 1;
inline void TextureAlias::clear_aliasname() {
  aliasname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TextureAlias::aliasname() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.TextureAlias.aliasName)
  return _internal_aliasname();
}
inline void TextureAlias::set_aliasname(const std::string& value) {
  _internal_set_aliasname(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.TextureAlias.aliasName)
}
inline std::string* TextureAlias::mutable_aliasname() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.TextureAlias.aliasName)
  return _internal_mutable_aliasname();
}
inline const std::string& TextureAlias::_internal_aliasname() const {
  return aliasname_.GetNoArena();
}
inline void TextureAlias::_internal_set_aliasname(const std::string& value) {
  
  aliasname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TextureAlias::set_aliasname(std::string&& value) {
  
  aliasname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.TextureAlias.aliasName)
}
inline void TextureAlias::set_aliasname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aliasname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.TextureAlias.aliasName)
}
inline void TextureAlias::set_aliasname(const char* value, size_t size) {
  
  aliasname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.TextureAlias.aliasName)
}
inline std::string* TextureAlias::_internal_mutable_aliasname() {
  
  return aliasname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TextureAlias::release_aliasname() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.TextureAlias.aliasName)
  
  return aliasname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TextureAlias::set_allocated_aliasname(std::string* aliasname) {
  if (aliasname != nullptr) {
    
  } else {
    
  }
  aliasname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aliasname);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.TextureAlias.aliasName)
}

// string textureName = 2;
inline void TextureAlias::clear_texturename() {
  texturename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TextureAlias::texturename() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.TextureAlias.textureName)
  return _internal_texturename();
}
inline void TextureAlias::set_texturename(const std::string& value) {
  _internal_set_texturename(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.TextureAlias.textureName)
}
inline std::string* TextureAlias::mutable_texturename() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.TextureAlias.textureName)
  return _internal_mutable_texturename();
}
inline const std::string& TextureAlias::_internal_texturename() const {
  return texturename_.GetNoArena();
}
inline void TextureAlias::_internal_set_texturename(const std::string& value) {
  
  texturename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TextureAlias::set_texturename(std::string&& value) {
  
  texturename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.MaterialSystem.TextureAlias.textureName)
}
inline void TextureAlias::set_texturename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  texturename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.MaterialSystem.TextureAlias.textureName)
}
inline void TextureAlias::set_texturename(const char* value, size_t size) {
  
  texturename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.MaterialSystem.TextureAlias.textureName)
}
inline std::string* TextureAlias::_internal_mutable_texturename() {
  
  return texturename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TextureAlias::release_texturename() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.TextureAlias.textureName)
  
  return texturename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TextureAlias::set_allocated_texturename(std::string* texturename) {
  if (texturename != nullptr) {
    
  } else {
    
  }
  texturename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texturename);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.TextureAlias.textureName)
}

// -------------------------------------------------------------------

// Material

// .Tiny3D.Script.MaterialSystem.Header header = 1;
inline bool Material::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Material::has_header() const {
  return _internal_has_header();
}
inline void Material::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::Header& Material::_internal_header() const {
  const ::Tiny3D::Script::MaterialSystem::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Header*>(
      &::Tiny3D::Script::MaterialSystem::_Header_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Header& Material::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Material.header)
  return _internal_header();
}
inline ::Tiny3D::Script::MaterialSystem::Header* Material::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Material.header)
  
  ::Tiny3D::Script::MaterialSystem::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Header* Material::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::MaterialSystem::Header* Material::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Material.header)
  return _internal_mutable_header();
}
inline void Material::set_allocated_header(::Tiny3D::Script::MaterialSystem::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Material.header)
}

// .Tiny3D.Script.MaterialSystem.LODValues values = 2;
inline bool Material::_internal_has_values() const {
  return this != internal_default_instance() && values_ != nullptr;
}
inline bool Material::has_values() const {
  return _internal_has_values();
}
inline void Material::clear_values() {
  if (GetArenaNoVirtual() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::LODValues& Material::_internal_values() const {
  const ::Tiny3D::Script::MaterialSystem::LODValues* p = values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::LODValues*>(
      &::Tiny3D::Script::MaterialSystem::_LODValues_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::LODValues& Material::values() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Material.values)
  return _internal_values();
}
inline ::Tiny3D::Script::MaterialSystem::LODValues* Material::release_values() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Material.values)
  
  ::Tiny3D::Script::MaterialSystem::LODValues* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::LODValues* Material::_internal_mutable_values() {
  
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::LODValues>(GetArenaNoVirtual());
    values_ = p;
  }
  return values_;
}
inline ::Tiny3D::Script::MaterialSystem::LODValues* Material::mutable_values() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Material.values)
  return _internal_mutable_values();
}
inline void Material::set_allocated_values(::Tiny3D::Script::MaterialSystem::LODValues* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    
  } else {
    
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Material.values)
}

// bool receive_shadows = 3;
inline void Material::clear_receive_shadows() {
  receive_shadows_ = false;
}
inline bool Material::_internal_receive_shadows() const {
  return receive_shadows_;
}
inline bool Material::receive_shadows() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Material.receive_shadows)
  return _internal_receive_shadows();
}
inline void Material::_internal_set_receive_shadows(bool value) {
  
  receive_shadows_ = value;
}
inline void Material::set_receive_shadows(bool value) {
  _internal_set_receive_shadows(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Material.receive_shadows)
}

// bool transparency_casts_shadows = 4;
inline void Material::clear_transparency_casts_shadows() {
  transparency_casts_shadows_ = false;
}
inline bool Material::_internal_transparency_casts_shadows() const {
  return transparency_casts_shadows_;
}
inline bool Material::transparency_casts_shadows() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Material.transparency_casts_shadows)
  return _internal_transparency_casts_shadows();
}
inline void Material::_internal_set_transparency_casts_shadows(bool value) {
  
  transparency_casts_shadows_ = value;
}
inline void Material::set_transparency_casts_shadows(bool value) {
  _internal_set_transparency_casts_shadows(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.MaterialSystem.Material.transparency_casts_shadows)
}

// .Tiny3D.Script.MaterialSystem.TextureAlias texture_alias = 5;
inline bool Material::_internal_has_texture_alias() const {
  return this != internal_default_instance() && texture_alias_ != nullptr;
}
inline bool Material::has_texture_alias() const {
  return _internal_has_texture_alias();
}
inline void Material::clear_texture_alias() {
  if (GetArenaNoVirtual() == nullptr && texture_alias_ != nullptr) {
    delete texture_alias_;
  }
  texture_alias_ = nullptr;
}
inline const ::Tiny3D::Script::MaterialSystem::TextureAlias& Material::_internal_texture_alias() const {
  const ::Tiny3D::Script::MaterialSystem::TextureAlias* p = texture_alias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::TextureAlias*>(
      &::Tiny3D::Script::MaterialSystem::_TextureAlias_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::TextureAlias& Material::texture_alias() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Material.texture_alias)
  return _internal_texture_alias();
}
inline ::Tiny3D::Script::MaterialSystem::TextureAlias* Material::release_texture_alias() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.MaterialSystem.Material.texture_alias)
  
  ::Tiny3D::Script::MaterialSystem::TextureAlias* temp = texture_alias_;
  texture_alias_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::TextureAlias* Material::_internal_mutable_texture_alias() {
  
  if (texture_alias_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::TextureAlias>(GetArenaNoVirtual());
    texture_alias_ = p;
  }
  return texture_alias_;
}
inline ::Tiny3D::Script::MaterialSystem::TextureAlias* Material::mutable_texture_alias() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Material.texture_alias)
  return _internal_mutable_texture_alias();
}
inline void Material::set_allocated_texture_alias(::Tiny3D::Script::MaterialSystem::TextureAlias* texture_alias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete texture_alias_;
  }
  if (texture_alias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texture_alias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture_alias, submessage_arena);
    }
    
  } else {
    
  }
  texture_alias_ = texture_alias;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.MaterialSystem.Material.texture_alias)
}

// repeated .Tiny3D.Script.MaterialSystem.Technique techniques = 6;
inline int Material::_internal_techniques_size() const {
  return techniques_.size();
}
inline int Material::techniques_size() const {
  return _internal_techniques_size();
}
inline void Material::clear_techniques() {
  techniques_.Clear();
}
inline ::Tiny3D::Script::MaterialSystem::Technique* Material::mutable_techniques(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.MaterialSystem.Material.techniques)
  return techniques_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Technique >*
Material::mutable_techniques() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.MaterialSystem.Material.techniques)
  return &techniques_;
}
inline const ::Tiny3D::Script::MaterialSystem::Technique& Material::_internal_techniques(int index) const {
  return techniques_.Get(index);
}
inline const ::Tiny3D::Script::MaterialSystem::Technique& Material::techniques(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.MaterialSystem.Material.techniques)
  return _internal_techniques(index);
}
inline ::Tiny3D::Script::MaterialSystem::Technique* Material::_internal_add_techniques() {
  return techniques_.Add();
}
inline ::Tiny3D::Script::MaterialSystem::Technique* Material::add_techniques() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.MaterialSystem.Material.techniques)
  return _internal_add_techniques();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::MaterialSystem::Technique >&
Material::techniques() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.MaterialSystem.Material.techniques)
  return techniques_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MaterialSystem
}  // namespace Script
}  // namespace Tiny3D

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::BuiltInType> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::BlendType> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::BlendFactor> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::BlendOperation> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::CompareFunction> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::IlluminationStage> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::TransparentSorting> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::CullHardware> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::CullSoftware> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::ShadingMode> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::PolygonMode> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::FogType> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::IterationType> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::LightType> : ::std::true_type {};
template <> struct is_proto_enum< ::Tiny3D::Script::MaterialSystem::GPURuleType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MaterialScriptObject_2eproto
