// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShaderScriptObject.proto

#include "ShaderScriptObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bool_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Float_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Blend_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendState_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendStateRenderTarget_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ColorMask_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorMaskState1_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorMaskState2_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompiledProgram_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthBias_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Fallback_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Pass_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pass_TagsEntry_DoNotUse_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Program_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Property_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PropertyValue_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Range_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceProgram_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_State_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stencil_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StencilOp_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubShader_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ShaderScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubShader_TagsEntry_DoNotUse_ShaderScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_String_CommonScriptObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CommonScriptObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector4_CommonScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace ShaderSystem {
class ShaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shader> _instance;
} _Shader_default_instance_;
class RangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Range> _instance;
} _Range_default_instance_;
class PropertyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyValue> _instance;
  const ::Tiny3D::Script::Int32* ival_;
  const ::Tiny3D::Script::Float* fval_;
  const ::Tiny3D::Script::ShaderSystem::Range* rval_;
  const ::Tiny3D::Script::String* tex2d_;
  const ::Tiny3D::Script::String* tex2d_array_;
  const ::Tiny3D::Script::String* tex3d_;
  const ::Tiny3D::Script::String* cubemap_;
  const ::Tiny3D::Script::String* cubemap_array_;
  const ::Tiny3D::Script::Color* color_;
  const ::Tiny3D::Script::Vector4* vector_;
} _PropertyValue_default_instance_;
class PropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Property> _instance;
} _Property_default_instance_;
class FallbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fallback> _instance;
  const ::Tiny3D::Script::Bool* enable_;
  const ::Tiny3D::Script::String* name_;
} _Fallback_default_instance_;
class SubShader_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubShader_TagsEntry_DoNotUse> _instance;
} _SubShader_TagsEntry_DoNotUse_default_instance_;
class SubShaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubShader> _instance;
  const ::Tiny3D::Script::ShaderSystem::State* state_;
  const ::Tiny3D::Script::String* use_pass_;
  const ::Tiny3D::Script::String* grab_pass_;
} _SubShader_default_instance_;
class Pass_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pass_TagsEntry_DoNotUse> _instance;
} _Pass_TagsEntry_DoNotUse_default_instance_;
class PassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pass> _instance;
  const ::Tiny3D::Script::ShaderSystem::State* state_;
  const ::Tiny3D::Script::String* use_pass_;
  const ::Tiny3D::Script::String* grab_pass_;
} _Pass_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class BlendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Blend> _instance;
  const ::Tiny3D::Script::ShaderSystem::BlendState* state_;
  const ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* target_;
} _Blend_default_instance_;
class BlendStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendState> _instance;
} _BlendState_default_instance_;
class BlendStateRenderTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendStateRenderTarget> _instance;
} _BlendStateRenderTarget_default_instance_;
class ColorMaskState1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorMaskState1> _instance;
} _ColorMaskState1_default_instance_;
class ColorMaskState2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorMaskState2> _instance;
} _ColorMaskState2_default_instance_;
class ColorMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorMask> _instance;
  const ::Tiny3D::Script::ShaderSystem::ColorMaskState1* state1_;
  const ::Tiny3D::Script::ShaderSystem::ColorMaskState2* state2_;
} _ColorMask_default_instance_;
class DepthBiasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthBias> _instance;
} _DepthBias_default_instance_;
class StencilDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stencil> _instance;
} _Stencil_default_instance_;
class StencilOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StencilOp> _instance;
} _StencilOp_default_instance_;
class ProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Program> _instance;
  const ::Tiny3D::Script::ShaderSystem::SourceProgram* source_;
  const ::Tiny3D::Script::ShaderSystem::CompiledProgram* compiled_;
} _Program_default_instance_;
class SourceProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceProgram> _instance;
} _SourceProgram_default_instance_;
class CompiledProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompiledProgram> _instance;
} _CompiledProgram_default_instance_;
}  // namespace ShaderSystem
}  // namespace Script
}  // namespace Tiny3D
static void InitDefaultsscc_info_Blend_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Blend_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Blend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::Blend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Blend_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Blend_ShaderScriptObject_2eproto}, {
      &scc_info_BlendState_ShaderScriptObject_2eproto.base,
      &scc_info_BlendStateRenderTarget_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_BlendState_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_BlendState_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::BlendState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::BlendState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendState_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlendState_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_BlendStateRenderTarget_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_BlendStateRenderTarget_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendStateRenderTarget_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlendStateRenderTarget_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_ColorMask_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_ColorMask_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::ColorMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::ColorMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ColorMask_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ColorMask_ShaderScriptObject_2eproto}, {
      &scc_info_ColorMaskState1_ShaderScriptObject_2eproto.base,
      &scc_info_ColorMaskState2_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_ColorMaskState1_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_ColorMaskState1_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::ColorMaskState1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::ColorMaskState1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorMaskState1_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorMaskState1_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_ColorMaskState2_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_ColorMaskState2_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::ColorMaskState2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::ColorMaskState2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorMaskState2_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorMaskState2_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_CompiledProgram_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_CompiledProgram_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::CompiledProgram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::CompiledProgram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompiledProgram_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompiledProgram_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_DepthBias_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_DepthBias_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::DepthBias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::DepthBias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthBias_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepthBias_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Fallback_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Fallback_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Fallback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::Fallback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Fallback_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Fallback_ShaderScriptObject_2eproto}, {
      &scc_info_Bool_CommonScriptObject_2eproto.base,
      &scc_info_String_CommonScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Pass_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Pass_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Pass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::Pass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Pass_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Pass_ShaderScriptObject_2eproto}, {
      &scc_info_Pass_TagsEntry_DoNotUse_ShaderScriptObject_2eproto.base,
      &scc_info_State_ShaderScriptObject_2eproto.base,
      &scc_info_String_CommonScriptObject_2eproto.base,
      &scc_info_Program_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Pass_TagsEntry_DoNotUse_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Pass_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse();
  }
  ::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pass_TagsEntry_DoNotUse_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pass_TagsEntry_DoNotUse_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Program_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Program_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Program();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::Program::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Program_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Program_ShaderScriptObject_2eproto}, {
      &scc_info_SourceProgram_ShaderScriptObject_2eproto.base,
      &scc_info_CompiledProgram_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Property_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Property_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Property();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::Property::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Property_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Property_ShaderScriptObject_2eproto}, {
      &scc_info_PropertyValue_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_PropertyValue_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::PropertyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::PropertyValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PropertyValue_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_PropertyValue_ShaderScriptObject_2eproto}, {
      &scc_info_Int32_CommonScriptObject_2eproto.base,
      &scc_info_Float_CommonScriptObject_2eproto.base,
      &scc_info_Range_ShaderScriptObject_2eproto.base,
      &scc_info_String_CommonScriptObject_2eproto.base,
      &scc_info_Color_CommonScriptObject_2eproto.base,
      &scc_info_Vector4_CommonScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Range_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Range_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Range();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::Range::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Range_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Range_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_Shader_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Shader_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Shader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::Shader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Shader_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Shader_ShaderScriptObject_2eproto}, {
      &scc_info_Property_ShaderScriptObject_2eproto.base,
      &scc_info_SubShader_ShaderScriptObject_2eproto.base,
      &scc_info_Fallback_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_SourceProgram_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_SourceProgram_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::SourceProgram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::SourceProgram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceProgram_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceProgram_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_State_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_State_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_State_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_State_ShaderScriptObject_2eproto}, {
      &scc_info_Blend_ShaderScriptObject_2eproto.base,
      &scc_info_ColorMask_ShaderScriptObject_2eproto.base,
      &scc_info_DepthBias_ShaderScriptObject_2eproto.base,
      &scc_info_Stencil_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_Stencil_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_Stencil_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::Stencil();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::Stencil::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stencil_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stencil_ShaderScriptObject_2eproto}, {
      &scc_info_StencilOp_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_StencilOp_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_StencilOp_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::StencilOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::StencilOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StencilOp_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StencilOp_ShaderScriptObject_2eproto}, {}};

static void InitDefaultsscc_info_SubShader_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_SubShader_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::SubShader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tiny3D::Script::ShaderSystem::SubShader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubShader_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SubShader_ShaderScriptObject_2eproto}, {
      &scc_info_SubShader_TagsEntry_DoNotUse_ShaderScriptObject_2eproto.base,
      &scc_info_State_ShaderScriptObject_2eproto.base,
      &scc_info_String_CommonScriptObject_2eproto.base,
      &scc_info_Pass_ShaderScriptObject_2eproto.base,}};

static void InitDefaultsscc_info_SubShader_TagsEntry_DoNotUse_ShaderScriptObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Tiny3D::Script::ShaderSystem::_SubShader_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse();
  }
  ::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubShader_TagsEntry_DoNotUse_ShaderScriptObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubShader_TagsEntry_DoNotUse_ShaderScriptObject_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ShaderScriptObject_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ShaderScriptObject_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ShaderScriptObject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ShaderScriptObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Shader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Shader, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Shader, properties_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Shader, subshaders_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Shader, fallback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Range, value_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Range, lower_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Range, upper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::PropertyValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, ival_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, fval_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, rval_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, tex2d_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, tex2d_array_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, tex3d_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, cubemap_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, cubemap_array_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, color_),
  offsetof(::Tiny3D::Script::ShaderSystem::PropertyValueDefaultTypeInternal, vector_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::PropertyValue, PropertyValueOneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Property, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Property, display_name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Property, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Fallback, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Fallback, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Tiny3D::Script::ShaderSystem::FallbackDefaultTypeInternal, enable_),
  offsetof(::Tiny3D::Script::ShaderSystem::FallbackDefaultTypeInternal, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Fallback, FallbackOneof_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader, lod_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader, tags_),
  offsetof(::Tiny3D::Script::ShaderSystem::SubShaderDefaultTypeInternal, state_),
  offsetof(::Tiny3D::Script::ShaderSystem::SubShaderDefaultTypeInternal, use_pass_),
  offsetof(::Tiny3D::Script::ShaderSystem::SubShaderDefaultTypeInternal, grab_pass_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader, passes_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SubShader, Command_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass, name_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass, tags_),
  offsetof(::Tiny3D::Script::ShaderSystem::PassDefaultTypeInternal, state_),
  offsetof(::Tiny3D::Script::ShaderSystem::PassDefaultTypeInternal, use_pass_),
  offsetof(::Tiny3D::Script::ShaderSystem::PassDefaultTypeInternal, grab_pass_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass, program_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Pass, Command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, alpha2mask_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, blend_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, blend_op_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, color_mask_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, conservative_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, cull_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, depth_bias_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, stencil_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, z_clip_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, z_test_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::State, z_write_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Blend, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Blend, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Tiny3D::Script::ShaderSystem::BlendDefaultTypeInternal, state_),
  offsetof(::Tiny3D::Script::ShaderSystem::BlendDefaultTypeInternal, target_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Blend, BlendOneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendState, src_rgb_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendState, dst_rgb_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendState, src_alpha_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendState, dst_alpha_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget, target_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget, src_rgb_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget, dst_rgb_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget, src_alpha_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget, dst_alpha_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::ColorMaskState1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::ColorMaskState1, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::ColorMaskState2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::ColorMaskState2, channels_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::ColorMaskState2, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::ColorMask, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::ColorMask, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Tiny3D::Script::ShaderSystem::ColorMaskDefaultTypeInternal, state1_),
  offsetof(::Tiny3D::Script::ShaderSystem::ColorMaskDefaultTypeInternal, state2_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::ColorMask, ColorMaskOneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::DepthBias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::DepthBias, factor_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::DepthBias, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Stencil, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Stencil, ref_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Stencil, read_mask_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Stencil, write_mask_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Stencil, op_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Stencil, op_back_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Stencil, op_front_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::StencilOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::StencilOp, comp_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::StencilOp, pass_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::StencilOp, fail_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::StencilOp, z_fail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Program, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Program, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Tiny3D::Script::ShaderSystem::ProgramDefaultTypeInternal, source_),
  offsetof(::Tiny3D::Script::ShaderSystem::ProgramDefaultTypeInternal, compiled_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::Program, ProgramOneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SourceProgram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SourceProgram, type_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::SourceProgram, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::CompiledProgram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::CompiledProgram, source_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::CompiledProgram, stage_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::CompiledProgram, entry_),
  PROTOBUF_FIELD_OFFSET(::Tiny3D::Script::ShaderSystem::CompiledProgram, keywords_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Tiny3D::Script::ShaderSystem::Shader)},
  { 9, -1, sizeof(::Tiny3D::Script::ShaderSystem::Range)},
  { 17, -1, sizeof(::Tiny3D::Script::ShaderSystem::PropertyValue)},
  { 33, -1, sizeof(::Tiny3D::Script::ShaderSystem::Property)},
  { 41, -1, sizeof(::Tiny3D::Script::ShaderSystem::Fallback)},
  { 49, 56, sizeof(::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse)},
  { 58, -1, sizeof(::Tiny3D::Script::ShaderSystem::SubShader)},
  { 70, 77, sizeof(::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse)},
  { 79, -1, sizeof(::Tiny3D::Script::ShaderSystem::Pass)},
  { 91, -1, sizeof(::Tiny3D::Script::ShaderSystem::State)},
  { 107, -1, sizeof(::Tiny3D::Script::ShaderSystem::Blend)},
  { 115, -1, sizeof(::Tiny3D::Script::ShaderSystem::BlendState)},
  { 124, -1, sizeof(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget)},
  { 134, -1, sizeof(::Tiny3D::Script::ShaderSystem::ColorMaskState1)},
  { 140, -1, sizeof(::Tiny3D::Script::ShaderSystem::ColorMaskState2)},
  { 147, -1, sizeof(::Tiny3D::Script::ShaderSystem::ColorMask)},
  { 155, -1, sizeof(::Tiny3D::Script::ShaderSystem::DepthBias)},
  { 162, -1, sizeof(::Tiny3D::Script::ShaderSystem::Stencil)},
  { 173, -1, sizeof(::Tiny3D::Script::ShaderSystem::StencilOp)},
  { 182, -1, sizeof(::Tiny3D::Script::ShaderSystem::Program)},
  { 190, -1, sizeof(::Tiny3D::Script::ShaderSystem::SourceProgram)},
  { 197, -1, sizeof(::Tiny3D::Script::ShaderSystem::CompiledProgram)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Shader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Property_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Fallback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_SubShader_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_SubShader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Pass_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Pass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Blend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_BlendState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_BlendStateRenderTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_ColorMaskState1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_ColorMaskState2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_ColorMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_DepthBias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Stencil_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_StencilOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_Program_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_SourceProgram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Tiny3D::Script::ShaderSystem::_CompiledProgram_default_instance_),
};

const char descriptor_table_protodef_ShaderScriptObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030ShaderScriptObject.proto\022\032Tiny3D.Scrip"
  "t.ShaderSystem\032\030CommonScriptObject.proto"
  "\"\303\001\n\006Shader\022\014\n\004name\030\001 \001(\t\0228\n\nproperties\030"
  "\002 \003(\0132$.Tiny3D.Script.ShaderSystem.Prope"
  "rty\0229\n\nsubshaders\030\003 \003(\0132%.Tiny3D.Script."
  "ShaderSystem.SubShader\0226\n\010fallback\030\004 \001(\013"
  "2$.Tiny3D.Script.ShaderSystem.Fallback\"4"
  "\n\005Range\022\r\n\005value\030\001 \001(\002\022\r\n\005lower\030\002 \001(\002\022\r\n"
  "\005upper\030\003 \001(\002\"\315\003\n\rPropertyValue\022$\n\004ival\030\001"
  " \001(\0132\024.Tiny3D.Script.Int32H\000\022$\n\004fval\030\002 \001"
  "(\0132\024.Tiny3D.Script.FloatH\000\0221\n\004rval\030\003 \001(\013"
  "2!.Tiny3D.Script.ShaderSystem.RangeH\000\022&\n"
  "\005tex2d\030\004 \001(\0132\025.Tiny3D.Script.StringH\000\022,\n"
  "\013tex2d_array\030\005 \001(\0132\025.Tiny3D.Script.Strin"
  "gH\000\022&\n\005tex3d\030\006 \001(\0132\025.Tiny3D.Script.Strin"
  "gH\000\022(\n\007cubemap\030\007 \001(\0132\025.Tiny3D.Script.Str"
  "ingH\000\022.\n\rcubemap_array\030\010 \001(\0132\025.Tiny3D.Sc"
  "ript.StringH\000\022%\n\005color\030\t \001(\0132\024.Tiny3D.Sc"
  "ript.ColorH\000\022(\n\006vector\030\n \001(\0132\026.Tiny3D.Sc"
  "ript.Vector4H\000B\024\n\022PropertyValueOneof\"i\n\010"
  "Property\022\014\n\004name\030\001 \001(\t\022\024\n\014display_name\030\002"
  " \001(\t\0229\n\006values\030\003 \001(\0132).Tiny3D.Script.Sha"
  "derSystem.PropertyValue\"i\n\010Fallback\022%\n\006e"
  "nable\030\001 \001(\0132\023.Tiny3D.Script.BoolH\000\022%\n\004na"
  "me\030\002 \001(\0132\025.Tiny3D.Script.StringH\000B\017\n\rFal"
  "lbackOneof\"\314\002\n\tSubShader\022\013\n\003lod\030\001 \001(\021\022=\n"
  "\004tags\030\002 \003(\0132/.Tiny3D.Script.ShaderSystem"
  ".SubShader.TagsEntry\0222\n\005state\030\003 \001(\0132!.Ti"
  "ny3D.Script.ShaderSystem.StateH\000\022)\n\010use_"
  "pass\030\004 \001(\0132\025.Tiny3D.Script.StringH\000\022*\n\tg"
  "rab_pass\030\005 \001(\0132\025.Tiny3D.Script.StringH\000\022"
  "0\n\006passes\030\006 \003(\0132 .Tiny3D.Script.ShaderSy"
  "stem.Pass\032+\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001B\t\n\007Command\"\307\002\n\004Pass\022\014\n\004na"
  "me\030\001 \001(\t\0228\n\004tags\030\002 \003(\0132*.Tiny3D.Script.S"
  "haderSystem.Pass.TagsEntry\0222\n\005state\030\003 \001("
  "\0132!.Tiny3D.Script.ShaderSystem.StateH\000\022)"
  "\n\010use_pass\030\004 \001(\0132\025.Tiny3D.Script.StringH"
  "\000\022*\n\tgrab_pass\030\005 \001(\0132\025.Tiny3D.Script.Str"
  "ingH\000\0224\n\007program\030\006 \001(\0132#.Tiny3D.Script.S"
  "haderSystem.Program\032+\n\tTagsEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\t\n\007Command\"\311\003\n\005"
  "State\022\022\n\nalpha2Mask\030\001 \001(\010\0220\n\005blend\030\002 \001(\013"
  "2!.Tiny3D.Script.ShaderSystem.Blend\0225\n\010b"
  "lend_op\030\003 \001(\0162#.Tiny3D.Script.ShaderSyst"
  "em.BlendOp\0229\n\ncolor_mask\030\004 \001(\0132%.Tiny3D."
  "Script.ShaderSystem.ColorMask\022\024\n\014conserv"
  "ative\030\005 \001(\010\022.\n\004cull\030\006 \001(\0162 .Tiny3D.Scrip"
  "t.ShaderSystem.Cull\0229\n\ndepth_bias\030\007 \001(\0132"
  "%.Tiny3D.Script.ShaderSystem.DepthBias\0224"
  "\n\007stencil\030\010 \001(\0132#.Tiny3D.Script.ShaderSy"
  "stem.Stencil\022\016\n\006z_clip\030\t \001(\010\0220\n\006z_test\030\n"
  " \001(\0162 .Tiny3D.Script.ShaderSystem.Comp\022\017"
  "\n\007z_write\030\013 \001(\010\"\224\001\n\005Blend\0227\n\005state\030\001 \001(\013"
  "2&.Tiny3D.Script.ShaderSystem.BlendState"
  "H\000\022D\n\006target\030\002 \001(\01322.Tiny3D.Script.Shade"
  "rSystem.BlendStateRenderTargetH\000B\014\n\nBlen"
  "dOneof\"\370\001\n\nBlendState\0228\n\007src_rgb\030\001 \001(\0162\'"
  ".Tiny3D.Script.ShaderSystem.BlendFactor\022"
  "8\n\007dst_rgb\030\002 \001(\0162\'.Tiny3D.Script.ShaderS"
  "ystem.BlendFactor\022:\n\tsrc_alpha\030\003 \001(\0162\'.T"
  "iny3D.Script.ShaderSystem.BlendFactor\022:\n"
  "\tdst_alpha\030\004 \001(\0162\'.Tiny3D.Script.ShaderS"
  "ystem.BlendFactor\"\224\002\n\026BlendStateRenderTa"
  "rget\022\016\n\006target\030\001 \001(\021\0228\n\007src_rgb\030\002 \001(\0162\'."
  "Tiny3D.Script.ShaderSystem.BlendFactor\0228"
  "\n\007dst_rgb\030\003 \001(\0162\'.Tiny3D.Script.ShaderSy"
  "stem.BlendFactor\022:\n\tsrc_alpha\030\004 \001(\0162\'.Ti"
  "ny3D.Script.ShaderSystem.BlendFactor\022:\n\t"
  "dst_alpha\030\005 \001(\0162\'.Tiny3D.Script.ShaderSy"
  "stem.BlendFactor\"#\n\017ColorMaskState1\022\020\n\010c"
  "hannels\030\001 \001(\021\"3\n\017ColorMaskState2\022\020\n\010chan"
  "nels\030\001 \001(\021\022\016\n\006target\030\002 \001(\021\"\233\001\n\tColorMask"
  "\022=\n\006state1\030\001 \001(\0132+.Tiny3D.Script.ShaderS"
  "ystem.ColorMaskState1H\000\022=\n\006state2\030\002 \001(\0132"
  "+.Tiny3D.Script.ShaderSystem.ColorMaskSt"
  "ate2H\000B\020\n\016ColorMaskOneof\"*\n\tDepthBias\022\016\n"
  "\006factor\030\001 \001(\002\022\r\n\005units\030\002 \001(\002\"\341\001\n\007Stencil"
  "\022\013\n\003ref\030\001 \001(\021\022\021\n\tread_mask\030\002 \001(\021\022\022\n\nwrit"
  "e_mask\030\003 \001(\021\0221\n\002op\030\004 \001(\0132%.Tiny3D.Script"
  ".ShaderSystem.StencilOp\0226\n\007op_back\030\005 \001(\013"
  "2%.Tiny3D.Script.ShaderSystem.StencilOp\022"
  "7\n\010op_front\030\006 \001(\0132%.Tiny3D.Script.Shader"
  "System.StencilOp\"\322\002\n\tStencilOp\022.\n\004comp\030\001"
  " \001(\0162 .Tiny3D.Script.ShaderSystem.Comp\0226"
  "\n\004pass\030\002 \001(\0162(.Tiny3D.Script.ShaderSyste"
  "m.StencilOp.Op\0226\n\004fail\030\003 \001(\0162(.Tiny3D.Sc"
  "ript.ShaderSystem.StencilOp.Op\0228\n\006z_fail"
  "\030\004 \001(\0162(.Tiny3D.Script.ShaderSystem.Sten"
  "cilOp.Op\"k\n\002Op\022\010\n\004KEEP\020\000\022\010\n\004ZERO\020\001\022\013\n\007RE"
  "PLACE\020\002\022\014\n\010INCR_SAT\020\003\022\014\n\010DECR_SAT\020\004\022\n\n\006I"
  "NVERT\020\005\022\r\n\tINCR_WRAP\020\007\022\r\n\tDECR_WRAP\020\010\"\227\001"
  "\n\007Program\022;\n\006source\030\001 \001(\0132).Tiny3D.Scrip"
  "t.ShaderSystem.SourceProgramH\000\022\?\n\010compil"
  "ed\030\002 \001(\0132+.Tiny3D.Script.ShaderSystem.Co"
  "mpiledProgramH\000B\016\n\014ProgramOneof\"T\n\rSourc"
  "eProgram\0225\n\004type\030\001 \001(\0162\'.Tiny3D.Script.S"
  "haderSystem.ProgramType\022\014\n\004code\030\002 \001(\t\"Q\n"
  "\017CompiledProgram\022\016\n\006source\030\001 \001(\t\022\r\n\005stag"
  "e\030\002 \001(\t\022\r\n\005entry\030\003 \001(\t\022\020\n\010keywords\030\004 \003(\t"
  "*\300\001\n\013BlendFactor\022\010\n\004ZERO\020\000\022\007\n\003ONE\020\001\022\r\n\tS"
  "RC_COLOR\020\002\022\r\n\tSRC_ALPHA\020\003\022\r\n\tDST_COLOR\020\004"
  "\022\r\n\tDST_ALPHA\020\005\022\027\n\023ONE_MINUS_SRC_COLOR\020\006"
  "\022\027\n\023ONE_MINUS_SRC_ALPHA\020\007\022\027\n\023ONE_MINUS_D"
  "ST_COLOR\020\010\022\027\n\023ONE_MINUS_DST_ALPHA\020\t*\341\003\n\007"
  "BlendOp\022\007\n\003ADD\020\000\022\007\n\003SUB\020\001\022\013\n\007REV_SUB\020\002\022\007"
  "\n\003MIN\020\003\022\007\n\003MAX\020\004\022\t\n\005CLEAR\020\005\022\007\n\003SET\020\006\022\010\n\004"
  "COPY\020\007\022\021\n\rCOPY_INVERTED\020\010\022\010\n\004NOOP\020\t\022\n\n\006I"
  "NVERT\020\n\022\007\n\003AND\020\013\022\010\n\004NAND\020\014\022\006\n\002OR\020\r\022\007\n\003NO"
  "R\020\016\022\007\n\003XOR\020\017\022\t\n\005EQUIV\020\020\022\017\n\013AND_REVERSE\020\021"
  "\022\020\n\014AND_INVERTED\020\022\022\016\n\nOR_REVERSE\020\023\022\017\n\013OR"
  "_INVERTED\020\024\022\014\n\010MULTIPLY\020\025\022\n\n\006SCREEN\020\026\022\013\n"
  "\007OVERLAY\020\027\022\n\n\006DARKEN\020\030\022\013\n\007LIGHTEN\020\031\022\017\n\013C"
  "OLOR_DODGE\020\032\022\016\n\nCOLOR_BURN\020\033\022\016\n\nHARD_LIG"
  "HT\020\034\022\016\n\nSOFT_LIGHT\020\035\022\016\n\nDIFFERENCE\020\036\022\r\n\t"
  "EXCLUSION\020\037\022\013\n\007HSL_HUE\020 \022\022\n\016HSL_SATURATI"
  "ON\020!\022\r\n\tHSL_COLOR\020\"\022\022\n\016HSL_LUMINOSITY\020#*"
  "$\n\004Cull\022\007\n\003OFF\020\000\022\010\n\004BACK\020\001\022\t\n\005FRONT\020\002*w\n"
  "\004Comp\022\014\n\010DISABLED\020\000\022\t\n\005NEVER\020\001\022\010\n\004LESS\020\002"
  "\022\t\n\005EQUAL\020\003\022\013\n\007L_EQUAL\020\004\022\013\n\007GREATER\020\005\022\016\n"
  "\nNOT_EQUALT\020\006\022\013\n\007G_EQUAL\020\007\022\n\n\006ALWAYS\020\010*)"
  "\n\013ProgramType\022\006\n\002CG\020\000\022\010\n\004HLSL\020\001\022\010\n\004GLSL\020"
  "\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ShaderScriptObject_2eproto_deps[1] = {
  &::descriptor_table_CommonScriptObject_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ShaderScriptObject_2eproto_sccs[22] = {
  &scc_info_Blend_ShaderScriptObject_2eproto.base,
  &scc_info_BlendState_ShaderScriptObject_2eproto.base,
  &scc_info_BlendStateRenderTarget_ShaderScriptObject_2eproto.base,
  &scc_info_ColorMask_ShaderScriptObject_2eproto.base,
  &scc_info_ColorMaskState1_ShaderScriptObject_2eproto.base,
  &scc_info_ColorMaskState2_ShaderScriptObject_2eproto.base,
  &scc_info_CompiledProgram_ShaderScriptObject_2eproto.base,
  &scc_info_DepthBias_ShaderScriptObject_2eproto.base,
  &scc_info_Fallback_ShaderScriptObject_2eproto.base,
  &scc_info_Pass_ShaderScriptObject_2eproto.base,
  &scc_info_Pass_TagsEntry_DoNotUse_ShaderScriptObject_2eproto.base,
  &scc_info_Program_ShaderScriptObject_2eproto.base,
  &scc_info_Property_ShaderScriptObject_2eproto.base,
  &scc_info_PropertyValue_ShaderScriptObject_2eproto.base,
  &scc_info_Range_ShaderScriptObject_2eproto.base,
  &scc_info_Shader_ShaderScriptObject_2eproto.base,
  &scc_info_SourceProgram_ShaderScriptObject_2eproto.base,
  &scc_info_State_ShaderScriptObject_2eproto.base,
  &scc_info_Stencil_ShaderScriptObject_2eproto.base,
  &scc_info_StencilOp_ShaderScriptObject_2eproto.base,
  &scc_info_SubShader_ShaderScriptObject_2eproto.base,
  &scc_info_SubShader_TagsEntry_DoNotUse_ShaderScriptObject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ShaderScriptObject_2eproto_once;
static bool descriptor_table_ShaderScriptObject_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ShaderScriptObject_2eproto = {
  &descriptor_table_ShaderScriptObject_2eproto_initialized, descriptor_table_protodef_ShaderScriptObject_2eproto, "ShaderScriptObject.proto", 4889,
  &descriptor_table_ShaderScriptObject_2eproto_once, descriptor_table_ShaderScriptObject_2eproto_sccs, descriptor_table_ShaderScriptObject_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_ShaderScriptObject_2eproto::offsets,
  file_level_metadata_ShaderScriptObject_2eproto, 22, file_level_enum_descriptors_ShaderScriptObject_2eproto, file_level_service_descriptors_ShaderScriptObject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ShaderScriptObject_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ShaderScriptObject_2eproto), true);
namespace Tiny3D {
namespace Script {
namespace ShaderSystem {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StencilOp_Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ShaderScriptObject_2eproto);
  return file_level_enum_descriptors_ShaderScriptObject_2eproto[0];
}
bool StencilOp_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StencilOp_Op StencilOp::KEEP;
constexpr StencilOp_Op StencilOp::ZERO;
constexpr StencilOp_Op StencilOp::REPLACE;
constexpr StencilOp_Op StencilOp::INCR_SAT;
constexpr StencilOp_Op StencilOp::DECR_SAT;
constexpr StencilOp_Op StencilOp::INVERT;
constexpr StencilOp_Op StencilOp::INCR_WRAP;
constexpr StencilOp_Op StencilOp::DECR_WRAP;
constexpr StencilOp_Op StencilOp::Op_MIN;
constexpr StencilOp_Op StencilOp::Op_MAX;
constexpr int StencilOp::Op_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendFactor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ShaderScriptObject_2eproto);
  return file_level_enum_descriptors_ShaderScriptObject_2eproto[1];
}
bool BlendFactor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ShaderScriptObject_2eproto);
  return file_level_enum_descriptors_ShaderScriptObject_2eproto[2];
}
bool BlendOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cull_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ShaderScriptObject_2eproto);
  return file_level_enum_descriptors_ShaderScriptObject_2eproto[3];
}
bool Cull_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Comp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ShaderScriptObject_2eproto);
  return file_level_enum_descriptors_ShaderScriptObject_2eproto[4];
}
bool Comp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ShaderScriptObject_2eproto);
  return file_level_enum_descriptors_ShaderScriptObject_2eproto[5];
}
bool ProgramType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Shader::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_Shader_default_instance_._instance.get_mutable()->fallback_ = const_cast< ::Tiny3D::Script::ShaderSystem::Fallback*>(
      ::Tiny3D::Script::ShaderSystem::Fallback::internal_default_instance());
}
class Shader::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::Fallback& fallback(const Shader* msg);
};

const ::Tiny3D::Script::ShaderSystem::Fallback&
Shader::_Internal::fallback(const Shader* msg) {
  return *msg->fallback_;
}
Shader::Shader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.Shader)
}
Shader::Shader(const Shader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      properties_(from.properties_),
      subshaders_(from.subshaders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_fallback()) {
    fallback_ = new ::Tiny3D::Script::ShaderSystem::Fallback(*from.fallback_);
  } else {
    fallback_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.Shader)
}

void Shader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Shader_ShaderScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_ = nullptr;
}

Shader::~Shader() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.Shader)
  SharedDtor();
}

void Shader::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fallback_;
}

void Shader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shader& Shader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shader_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Shader::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.Shader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  subshaders_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && fallback_ != nullptr) {
    delete fallback_;
  }
  fallback_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Shader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.Shader.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ShaderSystem.Property properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ShaderSystem.SubShader subshaders = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subshaders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.Fallback fallback = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fallback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.Shader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.Shader.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .Tiny3D.Script.ShaderSystem.Property properties = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_properties(i), target, stream);
  }

  // repeated .Tiny3D.Script.ShaderSystem.SubShader subshaders = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subshaders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_subshaders(i), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.Fallback fallback = 4;
  if (this->has_fallback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fallback(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.Shader)
  return target;
}

size_t Shader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.Shader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tiny3D.Script.ShaderSystem.Property properties = 2;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Tiny3D.Script.ShaderSystem.SubShader subshaders = 3;
  total_size += 1UL * this->_internal_subshaders_size();
  for (const auto& msg : this->subshaders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Tiny3D.Script.ShaderSystem.Fallback fallback = 4;
  if (this->has_fallback()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fallback_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.Shader)
  GOOGLE_DCHECK_NE(&from, this);
  const Shader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.Shader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.Shader)
    MergeFrom(*source);
  }
}

void Shader::MergeFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.Shader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  subshaders_.MergeFrom(from.subshaders_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_fallback()) {
    _internal_mutable_fallback()->::Tiny3D::Script::ShaderSystem::Fallback::MergeFrom(from._internal_fallback());
  }
}

void Shader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shader::CopyFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shader::IsInitialized() const {
  return true;
}

void Shader::InternalSwap(Shader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  subshaders_.InternalSwap(&other->subshaders_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fallback_, other->fallback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Range::InitAsDefaultInstance() {
}
class Range::_Internal {
 public:
};

Range::Range()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_) -
    reinterpret_cast<char*>(&value_)) + sizeof(upper_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.Range)
}

void Range::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_) -
      reinterpret_cast<char*>(&value_)) + sizeof(upper_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.Range)
  SharedDtor();
}

void Range::SharedDtor() {
}

void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Range& Range::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Range_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_) -
      reinterpret_cast<char*>(&value_)) + sizeof(upper_));
  _internal_metadata_.Clear();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float upper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  // float lower = 2;
  if (!(this->lower() <= 0 && this->lower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lower(), target);
  }

  // float upper = 3;
  if (!(this->upper() <= 0 && this->upper() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_upper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  // float lower = 2;
  if (!(this->lower() <= 0 && this->lower() >= 0)) {
    total_size += 1 + 4;
  }

  // float upper = 3;
  if (!(this->upper() <= 0 && this->upper() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Range::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.Range)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (!(from.lower() <= 0 && from.lower() >= 0)) {
    _internal_set_lower(from._internal_lower());
  }
  if (!(from.upper() <= 0 && from.upper() >= 0)) {
    _internal_set_upper(from._internal_upper());
  }
}

void Range::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(lower_, other->lower_);
  swap(upper_, other->upper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyValue::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.ival_ = const_cast< ::Tiny3D::Script::Int32*>(
      ::Tiny3D::Script::Int32::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.fval_ = const_cast< ::Tiny3D::Script::Float*>(
      ::Tiny3D::Script::Float::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.rval_ = const_cast< ::Tiny3D::Script::ShaderSystem::Range*>(
      ::Tiny3D::Script::ShaderSystem::Range::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.tex2d_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.tex2d_array_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.tex3d_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.cubemap_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.cubemap_array_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.color_ = const_cast< ::Tiny3D::Script::Color*>(
      ::Tiny3D::Script::Color::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_PropertyValue_default_instance_.vector_ = const_cast< ::Tiny3D::Script::Vector4*>(
      ::Tiny3D::Script::Vector4::internal_default_instance());
}
class PropertyValue::_Internal {
 public:
  static const ::Tiny3D::Script::Int32& ival(const PropertyValue* msg);
  static const ::Tiny3D::Script::Float& fval(const PropertyValue* msg);
  static const ::Tiny3D::Script::ShaderSystem::Range& rval(const PropertyValue* msg);
  static const ::Tiny3D::Script::String& tex2d(const PropertyValue* msg);
  static const ::Tiny3D::Script::String& tex2d_array(const PropertyValue* msg);
  static const ::Tiny3D::Script::String& tex3d(const PropertyValue* msg);
  static const ::Tiny3D::Script::String& cubemap(const PropertyValue* msg);
  static const ::Tiny3D::Script::String& cubemap_array(const PropertyValue* msg);
  static const ::Tiny3D::Script::Color& color(const PropertyValue* msg);
  static const ::Tiny3D::Script::Vector4& vector(const PropertyValue* msg);
};

const ::Tiny3D::Script::Int32&
PropertyValue::_Internal::ival(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.ival_;
}
const ::Tiny3D::Script::Float&
PropertyValue::_Internal::fval(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.fval_;
}
const ::Tiny3D::Script::ShaderSystem::Range&
PropertyValue::_Internal::rval(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.rval_;
}
const ::Tiny3D::Script::String&
PropertyValue::_Internal::tex2d(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.tex2d_;
}
const ::Tiny3D::Script::String&
PropertyValue::_Internal::tex2d_array(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.tex2d_array_;
}
const ::Tiny3D::Script::String&
PropertyValue::_Internal::tex3d(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.tex3d_;
}
const ::Tiny3D::Script::String&
PropertyValue::_Internal::cubemap(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.cubemap_;
}
const ::Tiny3D::Script::String&
PropertyValue::_Internal::cubemap_array(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.cubemap_array_;
}
const ::Tiny3D::Script::Color&
PropertyValue::_Internal::color(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.color_;
}
const ::Tiny3D::Script::Vector4&
PropertyValue::_Internal::vector(const PropertyValue* msg) {
  return *msg->PropertyValueOneof_.vector_;
}
void PropertyValue::set_allocated_ival(::Tiny3D::Script::Int32* ival) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (ival) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ival = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ival, submessage_arena);
    }
    set_has_ival();
    PropertyValueOneof_.ival_ = ival;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.ival)
}
void PropertyValue::clear_ival() {
  if (_internal_has_ival()) {
    delete PropertyValueOneof_.ival_;
    clear_has_PropertyValueOneof();
  }
}
void PropertyValue::set_allocated_fval(::Tiny3D::Script::Float* fval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (fval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fval, submessage_arena);
    }
    set_has_fval();
    PropertyValueOneof_.fval_ = fval;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.fval)
}
void PropertyValue::clear_fval() {
  if (_internal_has_fval()) {
    delete PropertyValueOneof_.fval_;
    clear_has_PropertyValueOneof();
  }
}
void PropertyValue::set_allocated_rval(::Tiny3D::Script::ShaderSystem::Range* rval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (rval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rval, submessage_arena);
    }
    set_has_rval();
    PropertyValueOneof_.rval_ = rval;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.rval)
}
void PropertyValue::set_allocated_tex2d(::Tiny3D::Script::String* tex2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (tex2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tex2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tex2d, submessage_arena);
    }
    set_has_tex2d();
    PropertyValueOneof_.tex2d_ = tex2d;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.tex2d)
}
void PropertyValue::clear_tex2d() {
  if (_internal_has_tex2d()) {
    delete PropertyValueOneof_.tex2d_;
    clear_has_PropertyValueOneof();
  }
}
void PropertyValue::set_allocated_tex2d_array(::Tiny3D::Script::String* tex2d_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (tex2d_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tex2d_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tex2d_array, submessage_arena);
    }
    set_has_tex2d_array();
    PropertyValueOneof_.tex2d_array_ = tex2d_array;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.tex2d_array)
}
void PropertyValue::clear_tex2d_array() {
  if (_internal_has_tex2d_array()) {
    delete PropertyValueOneof_.tex2d_array_;
    clear_has_PropertyValueOneof();
  }
}
void PropertyValue::set_allocated_tex3d(::Tiny3D::Script::String* tex3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (tex3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tex3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tex3d, submessage_arena);
    }
    set_has_tex3d();
    PropertyValueOneof_.tex3d_ = tex3d;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.tex3d)
}
void PropertyValue::clear_tex3d() {
  if (_internal_has_tex3d()) {
    delete PropertyValueOneof_.tex3d_;
    clear_has_PropertyValueOneof();
  }
}
void PropertyValue::set_allocated_cubemap(::Tiny3D::Script::String* cubemap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (cubemap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cubemap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cubemap, submessage_arena);
    }
    set_has_cubemap();
    PropertyValueOneof_.cubemap_ = cubemap;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.cubemap)
}
void PropertyValue::clear_cubemap() {
  if (_internal_has_cubemap()) {
    delete PropertyValueOneof_.cubemap_;
    clear_has_PropertyValueOneof();
  }
}
void PropertyValue::set_allocated_cubemap_array(::Tiny3D::Script::String* cubemap_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (cubemap_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cubemap_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cubemap_array, submessage_arena);
    }
    set_has_cubemap_array();
    PropertyValueOneof_.cubemap_array_ = cubemap_array;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.cubemap_array)
}
void PropertyValue::clear_cubemap_array() {
  if (_internal_has_cubemap_array()) {
    delete PropertyValueOneof_.cubemap_array_;
    clear_has_PropertyValueOneof();
  }
}
void PropertyValue::set_allocated_color(::Tiny3D::Script::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    set_has_color();
    PropertyValueOneof_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.color)
}
void PropertyValue::clear_color() {
  if (_internal_has_color()) {
    delete PropertyValueOneof_.color_;
    clear_has_PropertyValueOneof();
  }
}
void PropertyValue::set_allocated_vector(::Tiny3D::Script::Vector4* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PropertyValueOneof();
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    set_has_vector();
    PropertyValueOneof_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.PropertyValue.vector)
}
void PropertyValue::clear_vector() {
  if (_internal_has_vector()) {
    delete PropertyValueOneof_.vector_;
    clear_has_PropertyValueOneof();
  }
}
PropertyValue::PropertyValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.PropertyValue)
}
PropertyValue::PropertyValue(const PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_PropertyValueOneof();
  switch (from.PropertyValueOneof_case()) {
    case kIval: {
      _internal_mutable_ival()->::Tiny3D::Script::Int32::MergeFrom(from._internal_ival());
      break;
    }
    case kFval: {
      _internal_mutable_fval()->::Tiny3D::Script::Float::MergeFrom(from._internal_fval());
      break;
    }
    case kRval: {
      _internal_mutable_rval()->::Tiny3D::Script::ShaderSystem::Range::MergeFrom(from._internal_rval());
      break;
    }
    case kTex2D: {
      _internal_mutable_tex2d()->::Tiny3D::Script::String::MergeFrom(from._internal_tex2d());
      break;
    }
    case kTex2DArray: {
      _internal_mutable_tex2d_array()->::Tiny3D::Script::String::MergeFrom(from._internal_tex2d_array());
      break;
    }
    case kTex3D: {
      _internal_mutable_tex3d()->::Tiny3D::Script::String::MergeFrom(from._internal_tex3d());
      break;
    }
    case kCubemap: {
      _internal_mutable_cubemap()->::Tiny3D::Script::String::MergeFrom(from._internal_cubemap());
      break;
    }
    case kCubemapArray: {
      _internal_mutable_cubemap_array()->::Tiny3D::Script::String::MergeFrom(from._internal_cubemap_array());
      break;
    }
    case kColor: {
      _internal_mutable_color()->::Tiny3D::Script::Color::MergeFrom(from._internal_color());
      break;
    }
    case kVector: {
      _internal_mutable_vector()->::Tiny3D::Script::Vector4::MergeFrom(from._internal_vector());
      break;
    }
    case PROPERTYVALUEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.PropertyValue)
}

void PropertyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyValue_ShaderScriptObject_2eproto.base);
  clear_has_PropertyValueOneof();
}

PropertyValue::~PropertyValue() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.PropertyValue)
  SharedDtor();
}

void PropertyValue::SharedDtor() {
  if (has_PropertyValueOneof()) {
    clear_PropertyValueOneof();
  }
}

void PropertyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyValue& PropertyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyValue_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void PropertyValue::clear_PropertyValueOneof() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ShaderSystem.PropertyValue)
  switch (PropertyValueOneof_case()) {
    case kIval: {
      delete PropertyValueOneof_.ival_;
      break;
    }
    case kFval: {
      delete PropertyValueOneof_.fval_;
      break;
    }
    case kRval: {
      delete PropertyValueOneof_.rval_;
      break;
    }
    case kTex2D: {
      delete PropertyValueOneof_.tex2d_;
      break;
    }
    case kTex2DArray: {
      delete PropertyValueOneof_.tex2d_array_;
      break;
    }
    case kTex3D: {
      delete PropertyValueOneof_.tex3d_;
      break;
    }
    case kCubemap: {
      delete PropertyValueOneof_.cubemap_;
      break;
    }
    case kCubemapArray: {
      delete PropertyValueOneof_.cubemap_array_;
      break;
    }
    case kColor: {
      delete PropertyValueOneof_.color_;
      break;
    }
    case kVector: {
      delete PropertyValueOneof_.vector_;
      break;
    }
    case PROPERTYVALUEONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTYVALUEONEOF_NOT_SET;
}


void PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_PropertyValueOneof();
  _internal_metadata_.Clear();
}

const char* PropertyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.Int32 ival = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ival(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Float fval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.Range rval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String tex2d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tex2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String tex2d_array = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tex2d_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String tex3d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tex3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String cubemap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cubemap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String cubemap_array = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cubemap_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Color color = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.Vector4 vector = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.Int32 ival = 1;
  if (_internal_has_ival()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ival(this), target, stream);
  }

  // .Tiny3D.Script.Float fval = 2;
  if (_internal_has_fval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fval(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.Range rval = 3;
  if (_internal_has_rval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rval(this), target, stream);
  }

  // .Tiny3D.Script.String tex2d = 4;
  if (_internal_has_tex2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tex2d(this), target, stream);
  }

  // .Tiny3D.Script.String tex2d_array = 5;
  if (_internal_has_tex2d_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tex2d_array(this), target, stream);
  }

  // .Tiny3D.Script.String tex3d = 6;
  if (_internal_has_tex3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tex3d(this), target, stream);
  }

  // .Tiny3D.Script.String cubemap = 7;
  if (_internal_has_cubemap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cubemap(this), target, stream);
  }

  // .Tiny3D.Script.String cubemap_array = 8;
  if (_internal_has_cubemap_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cubemap_array(this), target, stream);
  }

  // .Tiny3D.Script.Color color = 9;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::color(this), target, stream);
  }

  // .Tiny3D.Script.Vector4 vector = 10;
  if (_internal_has_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::vector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.PropertyValue)
  return target;
}

size_t PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.PropertyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (PropertyValueOneof_case()) {
    // .Tiny3D.Script.Int32 ival = 1;
    case kIval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.ival_);
      break;
    }
    // .Tiny3D.Script.Float fval = 2;
    case kFval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.fval_);
      break;
    }
    // .Tiny3D.Script.ShaderSystem.Range rval = 3;
    case kRval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.rval_);
      break;
    }
    // .Tiny3D.Script.String tex2d = 4;
    case kTex2D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.tex2d_);
      break;
    }
    // .Tiny3D.Script.String tex2d_array = 5;
    case kTex2DArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.tex2d_array_);
      break;
    }
    // .Tiny3D.Script.String tex3d = 6;
    case kTex3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.tex3d_);
      break;
    }
    // .Tiny3D.Script.String cubemap = 7;
    case kCubemap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.cubemap_);
      break;
    }
    // .Tiny3D.Script.String cubemap_array = 8;
    case kCubemapArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.cubemap_array_);
      break;
    }
    // .Tiny3D.Script.Color color = 9;
    case kColor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.color_);
      break;
    }
    // .Tiny3D.Script.Vector4 vector = 10;
    case kVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PropertyValueOneof_.vector_);
      break;
    }
    case PROPERTYVALUEONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.PropertyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.PropertyValue)
    MergeFrom(*source);
  }
}

void PropertyValue::MergeFrom(const PropertyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.PropertyValueOneof_case()) {
    case kIval: {
      _internal_mutable_ival()->::Tiny3D::Script::Int32::MergeFrom(from._internal_ival());
      break;
    }
    case kFval: {
      _internal_mutable_fval()->::Tiny3D::Script::Float::MergeFrom(from._internal_fval());
      break;
    }
    case kRval: {
      _internal_mutable_rval()->::Tiny3D::Script::ShaderSystem::Range::MergeFrom(from._internal_rval());
      break;
    }
    case kTex2D: {
      _internal_mutable_tex2d()->::Tiny3D::Script::String::MergeFrom(from._internal_tex2d());
      break;
    }
    case kTex2DArray: {
      _internal_mutable_tex2d_array()->::Tiny3D::Script::String::MergeFrom(from._internal_tex2d_array());
      break;
    }
    case kTex3D: {
      _internal_mutable_tex3d()->::Tiny3D::Script::String::MergeFrom(from._internal_tex3d());
      break;
    }
    case kCubemap: {
      _internal_mutable_cubemap()->::Tiny3D::Script::String::MergeFrom(from._internal_cubemap());
      break;
    }
    case kCubemapArray: {
      _internal_mutable_cubemap_array()->::Tiny3D::Script::String::MergeFrom(from._internal_cubemap_array());
      break;
    }
    case kColor: {
      _internal_mutable_color()->::Tiny3D::Script::Color::MergeFrom(from._internal_color());
      break;
    }
    case kVector: {
      _internal_mutable_vector()->::Tiny3D::Script::Vector4::MergeFrom(from._internal_vector());
      break;
    }
    case PROPERTYVALUEONEOF_NOT_SET: {
      break;
    }
  }
}

void PropertyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValue::CopyFrom(const PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValue::IsInitialized() const {
  return true;
}

void PropertyValue::InternalSwap(PropertyValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(PropertyValueOneof_, other->PropertyValueOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Property::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_Property_default_instance_._instance.get_mutable()->values_ = const_cast< ::Tiny3D::Script::ShaderSystem::PropertyValue*>(
      ::Tiny3D::Script::ShaderSystem::PropertyValue::internal_default_instance());
}
class Property::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::PropertyValue& values(const Property* msg);
};

const ::Tiny3D::Script::ShaderSystem::PropertyValue&
Property::_Internal::values(const Property* msg) {
  return *msg->values_;
}
Property::Property()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from._internal_has_values()) {
    values_ = new ::Tiny3D::Script::ShaderSystem::PropertyValue(*from.values_);
  } else {
    values_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.Property)
}

void Property::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Property_ShaderScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  values_ = nullptr;
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.Property)
  SharedDtor();
}

void Property::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Property& Property::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Property_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Property::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.Property.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.Property.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.PropertyValue values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Property::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.Property.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.Property.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // .Tiny3D.Script.ShaderSystem.PropertyValue values = 3;
  if (this->has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.Property)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // .Tiny3D.Script.ShaderSystem.PropertyValue values = 3;
  if (this->has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.Property)
  GOOGLE_DCHECK_NE(&from, this);
  const Property* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Property>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.Property)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.Property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_values()) {
    _internal_mutable_values()->::Tiny3D::Script::ShaderSystem::PropertyValue::MergeFrom(from._internal_values());
  }
}

void Property::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(values_, other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fallback::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_Fallback_default_instance_.enable_ = const_cast< ::Tiny3D::Script::Bool*>(
      ::Tiny3D::Script::Bool::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_Fallback_default_instance_.name_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
}
class Fallback::_Internal {
 public:
  static const ::Tiny3D::Script::Bool& enable(const Fallback* msg);
  static const ::Tiny3D::Script::String& name(const Fallback* msg);
};

const ::Tiny3D::Script::Bool&
Fallback::_Internal::enable(const Fallback* msg) {
  return *msg->FallbackOneof_.enable_;
}
const ::Tiny3D::Script::String&
Fallback::_Internal::name(const Fallback* msg) {
  return *msg->FallbackOneof_.name_;
}
void Fallback::set_allocated_enable(::Tiny3D::Script::Bool* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_FallbackOneof();
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    set_has_enable();
    FallbackOneof_.enable_ = enable;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Fallback.enable)
}
void Fallback::clear_enable() {
  if (_internal_has_enable()) {
    delete FallbackOneof_.enable_;
    clear_has_FallbackOneof();
  }
}
void Fallback::set_allocated_name(::Tiny3D::Script::String* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_FallbackOneof();
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    set_has_name();
    FallbackOneof_.name_ = name;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Fallback.name)
}
void Fallback::clear_name() {
  if (_internal_has_name()) {
    delete FallbackOneof_.name_;
    clear_has_FallbackOneof();
  }
}
Fallback::Fallback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.Fallback)
}
Fallback::Fallback(const Fallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_FallbackOneof();
  switch (from.FallbackOneof_case()) {
    case kEnable: {
      _internal_mutable_enable()->::Tiny3D::Script::Bool::MergeFrom(from._internal_enable());
      break;
    }
    case kName: {
      _internal_mutable_name()->::Tiny3D::Script::String::MergeFrom(from._internal_name());
      break;
    }
    case FALLBACKONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.Fallback)
}

void Fallback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fallback_ShaderScriptObject_2eproto.base);
  clear_has_FallbackOneof();
}

Fallback::~Fallback() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.Fallback)
  SharedDtor();
}

void Fallback::SharedDtor() {
  if (has_FallbackOneof()) {
    clear_FallbackOneof();
  }
}

void Fallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fallback& Fallback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fallback_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Fallback::clear_FallbackOneof() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ShaderSystem.Fallback)
  switch (FallbackOneof_case()) {
    case kEnable: {
      delete FallbackOneof_.enable_;
      break;
    }
    case kName: {
      delete FallbackOneof_.name_;
      break;
    }
    case FALLBACKONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FALLBACKONEOF_NOT_SET;
}


void Fallback::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.Fallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_FallbackOneof();
  _internal_metadata_.Clear();
}

const char* Fallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.Bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fallback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.Fallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.Bool enable = 1;
  if (_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enable(this), target, stream);
  }

  // .Tiny3D.Script.String name = 2;
  if (_internal_has_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.Fallback)
  return target;
}

size_t Fallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.Fallback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (FallbackOneof_case()) {
    // .Tiny3D.Script.Bool enable = 1;
    case kEnable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FallbackOneof_.enable_);
      break;
    }
    // .Tiny3D.Script.String name = 2;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FallbackOneof_.name_);
      break;
    }
    case FALLBACKONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fallback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.Fallback)
  GOOGLE_DCHECK_NE(&from, this);
  const Fallback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fallback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.Fallback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.Fallback)
    MergeFrom(*source);
  }
}

void Fallback::MergeFrom(const Fallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.Fallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.FallbackOneof_case()) {
    case kEnable: {
      _internal_mutable_enable()->::Tiny3D::Script::Bool::MergeFrom(from._internal_enable());
      break;
    }
    case kName: {
      _internal_mutable_name()->::Tiny3D::Script::String::MergeFrom(from._internal_name());
      break;
    }
    case FALLBACKONEOF_NOT_SET: {
      break;
    }
  }
}

void Fallback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.Fallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fallback::CopyFrom(const Fallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.Fallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fallback::IsInitialized() const {
  return true;
}

void Fallback::InternalSwap(Fallback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(FallbackOneof_, other->FallbackOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fallback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SubShader_TagsEntry_DoNotUse::SubShader_TagsEntry_DoNotUse() {}
SubShader_TagsEntry_DoNotUse::SubShader_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SubShader_TagsEntry_DoNotUse::MergeFrom(const SubShader_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SubShader_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SubShader_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SubShader::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_SubShader_default_instance_.state_ = const_cast< ::Tiny3D::Script::ShaderSystem::State*>(
      ::Tiny3D::Script::ShaderSystem::State::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_SubShader_default_instance_.use_pass_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_SubShader_default_instance_.grab_pass_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
}
class SubShader::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::State& state(const SubShader* msg);
  static const ::Tiny3D::Script::String& use_pass(const SubShader* msg);
  static const ::Tiny3D::Script::String& grab_pass(const SubShader* msg);
};

const ::Tiny3D::Script::ShaderSystem::State&
SubShader::_Internal::state(const SubShader* msg) {
  return *msg->Command_.state_;
}
const ::Tiny3D::Script::String&
SubShader::_Internal::use_pass(const SubShader* msg) {
  return *msg->Command_.use_pass_;
}
const ::Tiny3D::Script::String&
SubShader::_Internal::grab_pass(const SubShader* msg) {
  return *msg->Command_.grab_pass_;
}
void SubShader::set_allocated_state(::Tiny3D::Script::ShaderSystem::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
    Command_.state_ = state;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.SubShader.state)
}
void SubShader::set_allocated_use_pass(::Tiny3D::Script::String* use_pass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (use_pass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      use_pass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_pass, submessage_arena);
    }
    set_has_use_pass();
    Command_.use_pass_ = use_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.SubShader.use_pass)
}
void SubShader::clear_use_pass() {
  if (_internal_has_use_pass()) {
    delete Command_.use_pass_;
    clear_has_Command();
  }
}
void SubShader::set_allocated_grab_pass(::Tiny3D::Script::String* grab_pass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (grab_pass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      grab_pass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grab_pass, submessage_arena);
    }
    set_has_grab_pass();
    Command_.grab_pass_ = grab_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.SubShader.grab_pass)
}
void SubShader::clear_grab_pass() {
  if (_internal_has_grab_pass()) {
    delete Command_.grab_pass_;
    clear_has_Command();
  }
}
SubShader::SubShader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.SubShader)
}
SubShader::SubShader(const SubShader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      passes_(from.passes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  lod_ = from.lod_;
  clear_has_Command();
  switch (from.Command_case()) {
    case kState: {
      _internal_mutable_state()->::Tiny3D::Script::ShaderSystem::State::MergeFrom(from._internal_state());
      break;
    }
    case kUsePass: {
      _internal_mutable_use_pass()->::Tiny3D::Script::String::MergeFrom(from._internal_use_pass());
      break;
    }
    case kGrabPass: {
      _internal_mutable_grab_pass()->::Tiny3D::Script::String::MergeFrom(from._internal_grab_pass());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.SubShader)
}

void SubShader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubShader_ShaderScriptObject_2eproto.base);
  lod_ = 0;
  clear_has_Command();
}

SubShader::~SubShader() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.SubShader)
  SharedDtor();
}

void SubShader::SharedDtor() {
  if (has_Command()) {
    clear_Command();
  }
}

void SubShader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubShader& SubShader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubShader_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SubShader::clear_Command() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ShaderSystem.SubShader)
  switch (Command_case()) {
    case kState: {
      delete Command_.state_;
      break;
    }
    case kUsePass: {
      delete Command_.use_pass_;
      break;
    }
    case kGrabPass: {
      delete Command_.grab_pass_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void SubShader::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.SubShader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  passes_.Clear();
  lod_ = 0;
  clear_Command();
  _internal_metadata_.Clear();
}

const char* SubShader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 lod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String use_pass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_pass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String grab_pass = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_grab_pass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tiny3D.Script.ShaderSystem.Pass passes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubShader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.SubShader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 lod = 1;
  if (this->lod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_lod(), target);
  }

  // map<string, string> tags = 2;
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Tiny3D.Script.ShaderSystem.SubShader.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Tiny3D.Script.ShaderSystem.SubShader.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SubShader_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = SubShader_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .Tiny3D.Script.ShaderSystem.State state = 3;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // .Tiny3D.Script.String use_pass = 4;
  if (_internal_has_use_pass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::use_pass(this), target, stream);
  }

  // .Tiny3D.Script.String grab_pass = 5;
  if (_internal_has_grab_pass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::grab_pass(this), target, stream);
  }

  // repeated .Tiny3D.Script.ShaderSystem.Pass passes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_passes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_passes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.SubShader)
  return target;
}

size_t SubShader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.SubShader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += SubShader_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .Tiny3D.Script.ShaderSystem.Pass passes = 6;
  total_size += 1UL * this->_internal_passes_size();
  for (const auto& msg : this->passes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // sint32 lod = 1;
  if (this->lod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lod());
  }

  switch (Command_case()) {
    // .Tiny3D.Script.ShaderSystem.State state = 3;
    case kState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.state_);
      break;
    }
    // .Tiny3D.Script.String use_pass = 4;
    case kUsePass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.use_pass_);
      break;
    }
    // .Tiny3D.Script.String grab_pass = 5;
    case kGrabPass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.grab_pass_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubShader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.SubShader)
  GOOGLE_DCHECK_NE(&from, this);
  const SubShader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubShader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.SubShader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.SubShader)
    MergeFrom(*source);
  }
}

void SubShader::MergeFrom(const SubShader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.SubShader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  passes_.MergeFrom(from.passes_);
  if (from.lod() != 0) {
    _internal_set_lod(from._internal_lod());
  }
  switch (from.Command_case()) {
    case kState: {
      _internal_mutable_state()->::Tiny3D::Script::ShaderSystem::State::MergeFrom(from._internal_state());
      break;
    }
    case kUsePass: {
      _internal_mutable_use_pass()->::Tiny3D::Script::String::MergeFrom(from._internal_use_pass());
      break;
    }
    case kGrabPass: {
      _internal_mutable_grab_pass()->::Tiny3D::Script::String::MergeFrom(from._internal_grab_pass());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void SubShader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.SubShader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubShader::CopyFrom(const SubShader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.SubShader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubShader::IsInitialized() const {
  return true;
}

void SubShader::InternalSwap(SubShader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  passes_.InternalSwap(&other->passes_);
  swap(lod_, other->lod_);
  swap(Command_, other->Command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubShader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Pass_TagsEntry_DoNotUse::Pass_TagsEntry_DoNotUse() {}
Pass_TagsEntry_DoNotUse::Pass_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Pass_TagsEntry_DoNotUse::MergeFrom(const Pass_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Pass_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Pass_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Pass::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_Pass_default_instance_.state_ = const_cast< ::Tiny3D::Script::ShaderSystem::State*>(
      ::Tiny3D::Script::ShaderSystem::State::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_Pass_default_instance_.use_pass_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_Pass_default_instance_.grab_pass_ = const_cast< ::Tiny3D::Script::String*>(
      ::Tiny3D::Script::String::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_Pass_default_instance_._instance.get_mutable()->program_ = const_cast< ::Tiny3D::Script::ShaderSystem::Program*>(
      ::Tiny3D::Script::ShaderSystem::Program::internal_default_instance());
}
class Pass::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::State& state(const Pass* msg);
  static const ::Tiny3D::Script::String& use_pass(const Pass* msg);
  static const ::Tiny3D::Script::String& grab_pass(const Pass* msg);
  static const ::Tiny3D::Script::ShaderSystem::Program& program(const Pass* msg);
};

const ::Tiny3D::Script::ShaderSystem::State&
Pass::_Internal::state(const Pass* msg) {
  return *msg->Command_.state_;
}
const ::Tiny3D::Script::String&
Pass::_Internal::use_pass(const Pass* msg) {
  return *msg->Command_.use_pass_;
}
const ::Tiny3D::Script::String&
Pass::_Internal::grab_pass(const Pass* msg) {
  return *msg->Command_.grab_pass_;
}
const ::Tiny3D::Script::ShaderSystem::Program&
Pass::_Internal::program(const Pass* msg) {
  return *msg->program_;
}
void Pass::set_allocated_state(::Tiny3D::Script::ShaderSystem::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
    Command_.state_ = state;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Pass.state)
}
void Pass::set_allocated_use_pass(::Tiny3D::Script::String* use_pass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (use_pass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      use_pass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_pass, submessage_arena);
    }
    set_has_use_pass();
    Command_.use_pass_ = use_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Pass.use_pass)
}
void Pass::clear_use_pass() {
  if (_internal_has_use_pass()) {
    delete Command_.use_pass_;
    clear_has_Command();
  }
}
void Pass::set_allocated_grab_pass(::Tiny3D::Script::String* grab_pass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (grab_pass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      grab_pass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grab_pass, submessage_arena);
    }
    set_has_grab_pass();
    Command_.grab_pass_ = grab_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Pass.grab_pass)
}
void Pass::clear_grab_pass() {
  if (_internal_has_grab_pass()) {
    delete Command_.grab_pass_;
    clear_has_Command();
  }
}
Pass::Pass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.Pass)
}
Pass::Pass(const Pass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_program()) {
    program_ = new ::Tiny3D::Script::ShaderSystem::Program(*from.program_);
  } else {
    program_ = nullptr;
  }
  clear_has_Command();
  switch (from.Command_case()) {
    case kState: {
      _internal_mutable_state()->::Tiny3D::Script::ShaderSystem::State::MergeFrom(from._internal_state());
      break;
    }
    case kUsePass: {
      _internal_mutable_use_pass()->::Tiny3D::Script::String::MergeFrom(from._internal_use_pass());
      break;
    }
    case kGrabPass: {
      _internal_mutable_grab_pass()->::Tiny3D::Script::String::MergeFrom(from._internal_grab_pass());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.Pass)
}

void Pass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pass_ShaderScriptObject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_ = nullptr;
  clear_has_Command();
}

Pass::~Pass() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.Pass)
  SharedDtor();
}

void Pass::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete program_;
  if (has_Command()) {
    clear_Command();
  }
}

void Pass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pass& Pass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pass_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Pass::clear_Command() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ShaderSystem.Pass)
  switch (Command_case()) {
    case kState: {
      delete Command_.state_;
      break;
    }
    case kUsePass: {
      delete Command_.use_pass_;
      break;
    }
    case kGrabPass: {
      delete Command_.grab_pass_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Pass::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.Pass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && program_ != nullptr) {
    delete program_;
  }
  program_ = nullptr;
  clear_Command();
  _internal_metadata_.Clear();
}

const char* Pass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.Pass.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String use_pass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_pass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.String grab_pass = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_grab_pass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.Program program = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_program(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.Pass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.Pass.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> tags = 2;
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Tiny3D.Script.ShaderSystem.Pass.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Tiny3D.Script.ShaderSystem.Pass.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Pass_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = Pass_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .Tiny3D.Script.ShaderSystem.State state = 3;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // .Tiny3D.Script.String use_pass = 4;
  if (_internal_has_use_pass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::use_pass(this), target, stream);
  }

  // .Tiny3D.Script.String grab_pass = 5;
  if (_internal_has_grab_pass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::grab_pass(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.Program program = 6;
  if (this->has_program()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::program(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.Pass)
  return target;
}

size_t Pass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.Pass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += Pass_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Tiny3D.Script.ShaderSystem.Program program = 6;
  if (this->has_program()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *program_);
  }

  switch (Command_case()) {
    // .Tiny3D.Script.ShaderSystem.State state = 3;
    case kState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.state_);
      break;
    }
    // .Tiny3D.Script.String use_pass = 4;
    case kUsePass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.use_pass_);
      break;
    }
    // .Tiny3D.Script.String grab_pass = 5;
    case kGrabPass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.grab_pass_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.Pass)
  GOOGLE_DCHECK_NE(&from, this);
  const Pass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.Pass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.Pass)
    MergeFrom(*source);
  }
}

void Pass::MergeFrom(const Pass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.Pass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_program()) {
    _internal_mutable_program()->::Tiny3D::Script::ShaderSystem::Program::MergeFrom(from._internal_program());
  }
  switch (from.Command_case()) {
    case kState: {
      _internal_mutable_state()->::Tiny3D::Script::ShaderSystem::State::MergeFrom(from._internal_state());
      break;
    }
    case kUsePass: {
      _internal_mutable_use_pass()->::Tiny3D::Script::String::MergeFrom(from._internal_use_pass());
      break;
    }
    case kGrabPass: {
      _internal_mutable_grab_pass()->::Tiny3D::Script::String::MergeFrom(from._internal_grab_pass());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void Pass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.Pass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pass::CopyFrom(const Pass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.Pass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pass::IsInitialized() const {
  return true;
}

void Pass::InternalSwap(Pass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(program_, other->program_);
  swap(Command_, other->Command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_State_default_instance_._instance.get_mutable()->blend_ = const_cast< ::Tiny3D::Script::ShaderSystem::Blend*>(
      ::Tiny3D::Script::ShaderSystem::Blend::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_State_default_instance_._instance.get_mutable()->color_mask_ = const_cast< ::Tiny3D::Script::ShaderSystem::ColorMask*>(
      ::Tiny3D::Script::ShaderSystem::ColorMask::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_State_default_instance_._instance.get_mutable()->depth_bias_ = const_cast< ::Tiny3D::Script::ShaderSystem::DepthBias*>(
      ::Tiny3D::Script::ShaderSystem::DepthBias::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_State_default_instance_._instance.get_mutable()->stencil_ = const_cast< ::Tiny3D::Script::ShaderSystem::Stencil*>(
      ::Tiny3D::Script::ShaderSystem::Stencil::internal_default_instance());
}
class State::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::Blend& blend(const State* msg);
  static const ::Tiny3D::Script::ShaderSystem::ColorMask& color_mask(const State* msg);
  static const ::Tiny3D::Script::ShaderSystem::DepthBias& depth_bias(const State* msg);
  static const ::Tiny3D::Script::ShaderSystem::Stencil& stencil(const State* msg);
};

const ::Tiny3D::Script::ShaderSystem::Blend&
State::_Internal::blend(const State* msg) {
  return *msg->blend_;
}
const ::Tiny3D::Script::ShaderSystem::ColorMask&
State::_Internal::color_mask(const State* msg) {
  return *msg->color_mask_;
}
const ::Tiny3D::Script::ShaderSystem::DepthBias&
State::_Internal::depth_bias(const State* msg) {
  return *msg->depth_bias_;
}
const ::Tiny3D::Script::ShaderSystem::Stencil&
State::_Internal::stencil(const State* msg) {
  return *msg->stencil_;
}
State::State()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_blend()) {
    blend_ = new ::Tiny3D::Script::ShaderSystem::Blend(*from.blend_);
  } else {
    blend_ = nullptr;
  }
  if (from._internal_has_color_mask()) {
    color_mask_ = new ::Tiny3D::Script::ShaderSystem::ColorMask(*from.color_mask_);
  } else {
    color_mask_ = nullptr;
  }
  if (from._internal_has_depth_bias()) {
    depth_bias_ = new ::Tiny3D::Script::ShaderSystem::DepthBias(*from.depth_bias_);
  } else {
    depth_bias_ = nullptr;
  }
  if (from._internal_has_stencil()) {
    stencil_ = new ::Tiny3D::Script::ShaderSystem::Stencil(*from.stencil_);
  } else {
    stencil_ = nullptr;
  }
  ::memcpy(&blend_op_, &from.blend_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_test_) -
    reinterpret_cast<char*>(&blend_op_)) + sizeof(z_test_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_ShaderScriptObject_2eproto.base);
  ::memset(&blend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_test_) -
      reinterpret_cast<char*>(&blend_)) + sizeof(z_test_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != internal_default_instance()) delete blend_;
  if (this != internal_default_instance()) delete color_mask_;
  if (this != internal_default_instance()) delete depth_bias_;
  if (this != internal_default_instance()) delete stencil_;
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && blend_ != nullptr) {
    delete blend_;
  }
  blend_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_mask_ != nullptr) {
    delete color_mask_;
  }
  color_mask_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && depth_bias_ != nullptr) {
    delete depth_bias_;
  }
  depth_bias_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stencil_ != nullptr) {
    delete stencil_;
  }
  stencil_ = nullptr;
  ::memset(&blend_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_test_) -
      reinterpret_cast<char*>(&blend_op_)) + sizeof(z_test_));
  _internal_metadata_.Clear();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool alpha2Mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          alpha2mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.Blend blend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendOp blend_op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_blend_op(static_cast<::Tiny3D::Script::ShaderSystem::BlendOp>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.ColorMask color_mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool conservative = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          conservative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.Cull cull = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cull(static_cast<::Tiny3D::Script::ShaderSystem::Cull>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.DepthBias depth_bias = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.Stencil stencil = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stencil(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool z_clip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          z_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.Comp z_test = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_z_test(static_cast<::Tiny3D::Script::ShaderSystem::Comp>(val));
        } else goto handle_unusual;
        continue;
      // bool z_write = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          z_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool alpha2Mask = 1;
  if (this->alpha2mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_alpha2mask(), target);
  }

  // .Tiny3D.Script.ShaderSystem.Blend blend = 2;
  if (this->has_blend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::blend(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.BlendOp blend_op = 3;
  if (this->blend_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_blend_op(), target);
  }

  // .Tiny3D.Script.ShaderSystem.ColorMask color_mask = 4;
  if (this->has_color_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::color_mask(this), target, stream);
  }

  // bool conservative = 5;
  if (this->conservative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_conservative(), target);
  }

  // .Tiny3D.Script.ShaderSystem.Cull cull = 6;
  if (this->cull() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cull(), target);
  }

  // .Tiny3D.Script.ShaderSystem.DepthBias depth_bias = 7;
  if (this->has_depth_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::depth_bias(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.Stencil stencil = 8;
  if (this->has_stencil()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stencil(this), target, stream);
  }

  // bool z_clip = 9;
  if (this->z_clip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_z_clip(), target);
  }

  // .Tiny3D.Script.ShaderSystem.Comp z_test = 10;
  if (this->z_test() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_z_test(), target);
  }

  // bool z_write = 11;
  if (this->z_write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_z_write(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.Blend blend = 2;
  if (this->has_blend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blend_);
  }

  // .Tiny3D.Script.ShaderSystem.ColorMask color_mask = 4;
  if (this->has_color_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_mask_);
  }

  // .Tiny3D.Script.ShaderSystem.DepthBias depth_bias = 7;
  if (this->has_depth_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_bias_);
  }

  // .Tiny3D.Script.ShaderSystem.Stencil stencil = 8;
  if (this->has_stencil()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stencil_);
  }

  // .Tiny3D.Script.ShaderSystem.BlendOp blend_op = 3;
  if (this->blend_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blend_op());
  }

  // .Tiny3D.Script.ShaderSystem.Cull cull = 6;
  if (this->cull() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cull());
  }

  // bool alpha2Mask = 1;
  if (this->alpha2mask() != 0) {
    total_size += 1 + 1;
  }

  // bool conservative = 5;
  if (this->conservative() != 0) {
    total_size += 1 + 1;
  }

  // bool z_clip = 9;
  if (this->z_clip() != 0) {
    total_size += 1 + 1;
  }

  // bool z_write = 11;
  if (this->z_write() != 0) {
    total_size += 1 + 1;
  }

  // .Tiny3D.Script.ShaderSystem.Comp z_test = 10;
  if (this->z_test() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_z_test());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blend()) {
    _internal_mutable_blend()->::Tiny3D::Script::ShaderSystem::Blend::MergeFrom(from._internal_blend());
  }
  if (from.has_color_mask()) {
    _internal_mutable_color_mask()->::Tiny3D::Script::ShaderSystem::ColorMask::MergeFrom(from._internal_color_mask());
  }
  if (from.has_depth_bias()) {
    _internal_mutable_depth_bias()->::Tiny3D::Script::ShaderSystem::DepthBias::MergeFrom(from._internal_depth_bias());
  }
  if (from.has_stencil()) {
    _internal_mutable_stencil()->::Tiny3D::Script::ShaderSystem::Stencil::MergeFrom(from._internal_stencil());
  }
  if (from.blend_op() != 0) {
    _internal_set_blend_op(from._internal_blend_op());
  }
  if (from.cull() != 0) {
    _internal_set_cull(from._internal_cull());
  }
  if (from.alpha2mask() != 0) {
    _internal_set_alpha2mask(from._internal_alpha2mask());
  }
  if (from.conservative() != 0) {
    _internal_set_conservative(from._internal_conservative());
  }
  if (from.z_clip() != 0) {
    _internal_set_z_clip(from._internal_z_clip());
  }
  if (from.z_write() != 0) {
    _internal_set_z_write(from._internal_z_write());
  }
  if (from.z_test() != 0) {
    _internal_set_z_test(from._internal_z_test());
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blend_, other->blend_);
  swap(color_mask_, other->color_mask_);
  swap(depth_bias_, other->depth_bias_);
  swap(stencil_, other->stencil_);
  swap(blend_op_, other->blend_op_);
  swap(cull_, other->cull_);
  swap(alpha2mask_, other->alpha2mask_);
  swap(conservative_, other->conservative_);
  swap(z_clip_, other->z_clip_);
  swap(z_write_, other->z_write_);
  swap(z_test_, other->z_test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Blend::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_Blend_default_instance_.state_ = const_cast< ::Tiny3D::Script::ShaderSystem::BlendState*>(
      ::Tiny3D::Script::ShaderSystem::BlendState::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_Blend_default_instance_.target_ = const_cast< ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget*>(
      ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget::internal_default_instance());
}
class Blend::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::BlendState& state(const Blend* msg);
  static const ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget& target(const Blend* msg);
};

const ::Tiny3D::Script::ShaderSystem::BlendState&
Blend::_Internal::state(const Blend* msg) {
  return *msg->BlendOneof_.state_;
}
const ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget&
Blend::_Internal::target(const Blend* msg) {
  return *msg->BlendOneof_.target_;
}
void Blend::set_allocated_state(::Tiny3D::Script::ShaderSystem::BlendState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_BlendOneof();
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
    BlendOneof_.state_ = state;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Blend.state)
}
void Blend::set_allocated_target(::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_BlendOneof();
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    set_has_target();
    BlendOneof_.target_ = target;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Blend.target)
}
Blend::Blend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.Blend)
}
Blend::Blend(const Blend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_BlendOneof();
  switch (from.BlendOneof_case()) {
    case kState: {
      _internal_mutable_state()->::Tiny3D::Script::ShaderSystem::BlendState::MergeFrom(from._internal_state());
      break;
    }
    case kTarget: {
      _internal_mutable_target()->::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget::MergeFrom(from._internal_target());
      break;
    }
    case BLENDONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.Blend)
}

void Blend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Blend_ShaderScriptObject_2eproto.base);
  clear_has_BlendOneof();
}

Blend::~Blend() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.Blend)
  SharedDtor();
}

void Blend::SharedDtor() {
  if (has_BlendOneof()) {
    clear_BlendOneof();
  }
}

void Blend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Blend& Blend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Blend_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Blend::clear_BlendOneof() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ShaderSystem.Blend)
  switch (BlendOneof_case()) {
    case kState: {
      delete BlendOneof_.state_;
      break;
    }
    case kTarget: {
      delete BlendOneof_.target_;
      break;
    }
    case BLENDONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BLENDONEOF_NOT_SET;
}


void Blend::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.Blend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_BlendOneof();
  _internal_metadata_.Clear();
}

const char* Blend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ShaderSystem.BlendState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendStateRenderTarget target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Blend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.Blend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.BlendState state = 1;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.BlendStateRenderTarget target = 2;
  if (_internal_has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.Blend)
  return target;
}

size_t Blend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.Blend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (BlendOneof_case()) {
    // .Tiny3D.Script.ShaderSystem.BlendState state = 1;
    case kState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *BlendOneof_.state_);
      break;
    }
    // .Tiny3D.Script.ShaderSystem.BlendStateRenderTarget target = 2;
    case kTarget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *BlendOneof_.target_);
      break;
    }
    case BLENDONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Blend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.Blend)
  GOOGLE_DCHECK_NE(&from, this);
  const Blend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Blend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.Blend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.Blend)
    MergeFrom(*source);
  }
}

void Blend::MergeFrom(const Blend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.Blend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.BlendOneof_case()) {
    case kState: {
      _internal_mutable_state()->::Tiny3D::Script::ShaderSystem::BlendState::MergeFrom(from._internal_state());
      break;
    }
    case kTarget: {
      _internal_mutable_target()->::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget::MergeFrom(from._internal_target());
      break;
    }
    case BLENDONEOF_NOT_SET: {
      break;
    }
  }
}

void Blend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.Blend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Blend::CopyFrom(const Blend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.Blend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blend::IsInitialized() const {
  return true;
}

void Blend::InternalSwap(Blend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(BlendOneof_, other->BlendOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Blend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlendState::InitAsDefaultInstance() {
}
class BlendState::_Internal {
 public:
};

BlendState::BlendState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.BlendState)
}
BlendState::BlendState(const BlendState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&src_rgb_, &from.src_rgb_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_alpha_) -
    reinterpret_cast<char*>(&src_rgb_)) + sizeof(dst_alpha_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.BlendState)
}

void BlendState::SharedCtor() {
  ::memset(&src_rgb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_alpha_) -
      reinterpret_cast<char*>(&src_rgb_)) + sizeof(dst_alpha_));
}

BlendState::~BlendState() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.BlendState)
  SharedDtor();
}

void BlendState::SharedDtor() {
}

void BlendState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlendState& BlendState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlendState_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void BlendState::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.BlendState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&src_rgb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_alpha_) -
      reinterpret_cast<char*>(&src_rgb_)) + sizeof(dst_alpha_));
  _internal_metadata_.Clear();
}

const char* BlendState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_src_rgb(static_cast<::Tiny3D::Script::ShaderSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dst_rgb(static_cast<::Tiny3D::Script::ShaderSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_src_alpha(static_cast<::Tiny3D::Script::ShaderSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dst_alpha(static_cast<::Tiny3D::Script::ShaderSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlendState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.BlendState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 1;
  if (this->src_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_src_rgb(), target);
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 2;
  if (this->dst_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dst_rgb(), target);
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 3;
  if (this->src_alpha() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_src_alpha(), target);
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 4;
  if (this->dst_alpha() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dst_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.BlendState)
  return target;
}

size_t BlendState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.BlendState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 1;
  if (this->src_rgb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_src_rgb());
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 2;
  if (this->dst_rgb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_rgb());
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 3;
  if (this->src_alpha() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_src_alpha());
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 4;
  if (this->dst_alpha() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_alpha());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlendState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.BlendState)
  GOOGLE_DCHECK_NE(&from, this);
  const BlendState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlendState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.BlendState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.BlendState)
    MergeFrom(*source);
  }
}

void BlendState::MergeFrom(const BlendState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.BlendState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_rgb() != 0) {
    _internal_set_src_rgb(from._internal_src_rgb());
  }
  if (from.dst_rgb() != 0) {
    _internal_set_dst_rgb(from._internal_dst_rgb());
  }
  if (from.src_alpha() != 0) {
    _internal_set_src_alpha(from._internal_src_alpha());
  }
  if (from.dst_alpha() != 0) {
    _internal_set_dst_alpha(from._internal_dst_alpha());
  }
}

void BlendState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.BlendState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlendState::CopyFrom(const BlendState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.BlendState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendState::IsInitialized() const {
  return true;
}

void BlendState::InternalSwap(BlendState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(src_rgb_, other->src_rgb_);
  swap(dst_rgb_, other->dst_rgb_);
  swap(src_alpha_, other->src_alpha_);
  swap(dst_alpha_, other->dst_alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlendState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlendStateRenderTarget::InitAsDefaultInstance() {
}
class BlendStateRenderTarget::_Internal {
 public:
};

BlendStateRenderTarget::BlendStateRenderTarget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
}
BlendStateRenderTarget::BlendStateRenderTarget(const BlendStateRenderTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_alpha_) -
    reinterpret_cast<char*>(&target_)) + sizeof(dst_alpha_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
}

void BlendStateRenderTarget::SharedCtor() {
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_alpha_) -
      reinterpret_cast<char*>(&target_)) + sizeof(dst_alpha_));
}

BlendStateRenderTarget::~BlendStateRenderTarget() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  SharedDtor();
}

void BlendStateRenderTarget::SharedDtor() {
}

void BlendStateRenderTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlendStateRenderTarget& BlendStateRenderTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlendStateRenderTarget_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void BlendStateRenderTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_alpha_) -
      reinterpret_cast<char*>(&target_)) + sizeof(dst_alpha_));
  _internal_metadata_.Clear();
}

const char* BlendStateRenderTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_src_rgb(static_cast<::Tiny3D::Script::ShaderSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dst_rgb(static_cast<::Tiny3D::Script::ShaderSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_src_alpha(static_cast<::Tiny3D::Script::ShaderSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dst_alpha(static_cast<::Tiny3D::Script::ShaderSystem::BlendFactor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlendStateRenderTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 target = 1;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_target(), target);
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 2;
  if (this->src_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_src_rgb(), target);
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 3;
  if (this->dst_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dst_rgb(), target);
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 4;
  if (this->src_alpha() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_src_alpha(), target);
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 5;
  if (this->dst_alpha() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dst_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  return target;
}

size_t BlendStateRenderTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 target = 1;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_target());
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_rgb = 2;
  if (this->src_rgb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_src_rgb());
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_rgb = 3;
  if (this->dst_rgb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_rgb());
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor src_alpha = 4;
  if (this->src_alpha() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_src_alpha());
  }

  // .Tiny3D.Script.ShaderSystem.BlendFactor dst_alpha = 5;
  if (this->dst_alpha() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_alpha());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlendStateRenderTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const BlendStateRenderTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlendStateRenderTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
    MergeFrom(*source);
  }
}

void BlendStateRenderTarget::MergeFrom(const BlendStateRenderTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.src_rgb() != 0) {
    _internal_set_src_rgb(from._internal_src_rgb());
  }
  if (from.dst_rgb() != 0) {
    _internal_set_dst_rgb(from._internal_dst_rgb());
  }
  if (from.src_alpha() != 0) {
    _internal_set_src_alpha(from._internal_src_alpha());
  }
  if (from.dst_alpha() != 0) {
    _internal_set_dst_alpha(from._internal_dst_alpha());
  }
}

void BlendStateRenderTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlendStateRenderTarget::CopyFrom(const BlendStateRenderTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.BlendStateRenderTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendStateRenderTarget::IsInitialized() const {
  return true;
}

void BlendStateRenderTarget::InternalSwap(BlendStateRenderTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(src_rgb_, other->src_rgb_);
  swap(dst_rgb_, other->dst_rgb_);
  swap(src_alpha_, other->src_alpha_);
  swap(dst_alpha_, other->dst_alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlendStateRenderTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorMaskState1::InitAsDefaultInstance() {
}
class ColorMaskState1::_Internal {
 public:
};

ColorMaskState1::ColorMaskState1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.ColorMaskState1)
}
ColorMaskState1::ColorMaskState1(const ColorMaskState1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channels_ = from.channels_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.ColorMaskState1)
}

void ColorMaskState1::SharedCtor() {
  channels_ = 0;
}

ColorMaskState1::~ColorMaskState1() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  SharedDtor();
}

void ColorMaskState1::SharedDtor() {
}

void ColorMaskState1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorMaskState1& ColorMaskState1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorMaskState1_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ColorMaskState1::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_ = 0;
  _internal_metadata_.Clear();
}

const char* ColorMaskState1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorMaskState1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 channels = 1;
  if (this->channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_channels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  return target;
}

size_t ColorMaskState1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 channels = 1;
  if (this->channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_channels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorMaskState1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorMaskState1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorMaskState1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.ColorMaskState1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.ColorMaskState1)
    MergeFrom(*source);
  }
}

void ColorMaskState1::MergeFrom(const ColorMaskState1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channels() != 0) {
    _internal_set_channels(from._internal_channels());
  }
}

void ColorMaskState1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorMaskState1::CopyFrom(const ColorMaskState1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.ColorMaskState1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorMaskState1::IsInitialized() const {
  return true;
}

void ColorMaskState1::InternalSwap(ColorMaskState1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channels_, other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorMaskState1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorMaskState2::InitAsDefaultInstance() {
}
class ColorMaskState2::_Internal {
 public:
};

ColorMaskState2::ColorMaskState2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.ColorMaskState2)
}
ColorMaskState2::ColorMaskState2(const ColorMaskState2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channels_, &from.channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&channels_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.ColorMaskState2)
}

void ColorMaskState2::SharedCtor() {
  ::memset(&channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&channels_)) + sizeof(target_));
}

ColorMaskState2::~ColorMaskState2() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  SharedDtor();
}

void ColorMaskState2::SharedDtor() {
}

void ColorMaskState2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorMaskState2& ColorMaskState2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorMaskState2_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ColorMaskState2::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&channels_)) + sizeof(target_));
  _internal_metadata_.Clear();
}

const char* ColorMaskState2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorMaskState2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 channels = 1;
  if (this->channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_channels(), target);
  }

  // sint32 target = 2;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  return target;
}

size_t ColorMaskState2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 channels = 1;
  if (this->channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_channels());
  }

  // sint32 target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorMaskState2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorMaskState2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorMaskState2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.ColorMaskState2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.ColorMaskState2)
    MergeFrom(*source);
  }
}

void ColorMaskState2::MergeFrom(const ColorMaskState2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channels() != 0) {
    _internal_set_channels(from._internal_channels());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
}

void ColorMaskState2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorMaskState2::CopyFrom(const ColorMaskState2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.ColorMaskState2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorMaskState2::IsInitialized() const {
  return true;
}

void ColorMaskState2::InternalSwap(ColorMaskState2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channels_, other->channels_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorMaskState2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorMask::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_ColorMask_default_instance_.state1_ = const_cast< ::Tiny3D::Script::ShaderSystem::ColorMaskState1*>(
      ::Tiny3D::Script::ShaderSystem::ColorMaskState1::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_ColorMask_default_instance_.state2_ = const_cast< ::Tiny3D::Script::ShaderSystem::ColorMaskState2*>(
      ::Tiny3D::Script::ShaderSystem::ColorMaskState2::internal_default_instance());
}
class ColorMask::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::ColorMaskState1& state1(const ColorMask* msg);
  static const ::Tiny3D::Script::ShaderSystem::ColorMaskState2& state2(const ColorMask* msg);
};

const ::Tiny3D::Script::ShaderSystem::ColorMaskState1&
ColorMask::_Internal::state1(const ColorMask* msg) {
  return *msg->ColorMaskOneof_.state1_;
}
const ::Tiny3D::Script::ShaderSystem::ColorMaskState2&
ColorMask::_Internal::state2(const ColorMask* msg) {
  return *msg->ColorMaskOneof_.state2_;
}
void ColorMask::set_allocated_state1(::Tiny3D::Script::ShaderSystem::ColorMaskState1* state1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ColorMaskOneof();
  if (state1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state1, submessage_arena);
    }
    set_has_state1();
    ColorMaskOneof_.state1_ = state1;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.ColorMask.state1)
}
void ColorMask::set_allocated_state2(::Tiny3D::Script::ShaderSystem::ColorMaskState2* state2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ColorMaskOneof();
  if (state2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state2, submessage_arena);
    }
    set_has_state2();
    ColorMaskOneof_.state2_ = state2;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.ColorMask.state2)
}
ColorMask::ColorMask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.ColorMask)
}
ColorMask::ColorMask(const ColorMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ColorMaskOneof();
  switch (from.ColorMaskOneof_case()) {
    case kState1: {
      _internal_mutable_state1()->::Tiny3D::Script::ShaderSystem::ColorMaskState1::MergeFrom(from._internal_state1());
      break;
    }
    case kState2: {
      _internal_mutable_state2()->::Tiny3D::Script::ShaderSystem::ColorMaskState2::MergeFrom(from._internal_state2());
      break;
    }
    case COLORMASKONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.ColorMask)
}

void ColorMask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColorMask_ShaderScriptObject_2eproto.base);
  clear_has_ColorMaskOneof();
}

ColorMask::~ColorMask() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.ColorMask)
  SharedDtor();
}

void ColorMask::SharedDtor() {
  if (has_ColorMaskOneof()) {
    clear_ColorMaskOneof();
  }
}

void ColorMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorMask& ColorMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorMask_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void ColorMask::clear_ColorMaskOneof() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ShaderSystem.ColorMask)
  switch (ColorMaskOneof_case()) {
    case kState1: {
      delete ColorMaskOneof_.state1_;
      break;
    }
    case kState2: {
      delete ColorMaskOneof_.state2_;
      break;
    }
    case COLORMASKONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COLORMASKONEOF_NOT_SET;
}


void ColorMask::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.ColorMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ColorMaskOneof();
  _internal_metadata_.Clear();
}

const char* ColorMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ShaderSystem.ColorMaskState1 state1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.ColorMaskState2 state2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.ColorMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.ColorMaskState1 state1 = 1;
  if (_internal_has_state1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state1(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.ColorMaskState2 state2 = 2;
  if (_internal_has_state2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.ColorMask)
  return target;
}

size_t ColorMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.ColorMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ColorMaskOneof_case()) {
    // .Tiny3D.Script.ShaderSystem.ColorMaskState1 state1 = 1;
    case kState1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ColorMaskOneof_.state1_);
      break;
    }
    // .Tiny3D.Script.ShaderSystem.ColorMaskState2 state2 = 2;
    case kState2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ColorMaskOneof_.state2_);
      break;
    }
    case COLORMASKONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorMask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.ColorMask)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorMask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorMask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.ColorMask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.ColorMask)
    MergeFrom(*source);
  }
}

void ColorMask::MergeFrom(const ColorMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.ColorMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ColorMaskOneof_case()) {
    case kState1: {
      _internal_mutable_state1()->::Tiny3D::Script::ShaderSystem::ColorMaskState1::MergeFrom(from._internal_state1());
      break;
    }
    case kState2: {
      _internal_mutable_state2()->::Tiny3D::Script::ShaderSystem::ColorMaskState2::MergeFrom(from._internal_state2());
      break;
    }
    case COLORMASKONEOF_NOT_SET: {
      break;
    }
  }
}

void ColorMask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.ColorMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorMask::CopyFrom(const ColorMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.ColorMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorMask::IsInitialized() const {
  return true;
}

void ColorMask::InternalSwap(ColorMask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ColorMaskOneof_, other->ColorMaskOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorMask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthBias::InitAsDefaultInstance() {
}
class DepthBias::_Internal {
 public:
};

DepthBias::DepthBias()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.DepthBias)
}
DepthBias::DepthBias(const DepthBias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&factor_, &from.factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&units_) -
    reinterpret_cast<char*>(&factor_)) + sizeof(units_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.DepthBias)
}

void DepthBias::SharedCtor() {
  ::memset(&factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&units_) -
      reinterpret_cast<char*>(&factor_)) + sizeof(units_));
}

DepthBias::~DepthBias() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.DepthBias)
  SharedDtor();
}

void DepthBias::SharedDtor() {
}

void DepthBias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthBias& DepthBias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthBias_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void DepthBias::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.DepthBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&units_) -
      reinterpret_cast<char*>(&factor_)) + sizeof(units_));
  _internal_metadata_.Clear();
}

const char* DepthBias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          units_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthBias::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.DepthBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float factor = 1;
  if (!(this->factor() <= 0 && this->factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_factor(), target);
  }

  // float units = 2;
  if (!(this->units() <= 0 && this->units() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.DepthBias)
  return target;
}

size_t DepthBias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.DepthBias)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float factor = 1;
  if (!(this->factor() <= 0 && this->factor() >= 0)) {
    total_size += 1 + 4;
  }

  // float units = 2;
  if (!(this->units() <= 0 && this->units() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthBias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.DepthBias)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthBias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthBias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.DepthBias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.DepthBias)
    MergeFrom(*source);
  }
}

void DepthBias::MergeFrom(const DepthBias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.DepthBias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.factor() <= 0 && from.factor() >= 0)) {
    _internal_set_factor(from._internal_factor());
  }
  if (!(from.units() <= 0 && from.units() >= 0)) {
    _internal_set_units(from._internal_units());
  }
}

void DepthBias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.DepthBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthBias::CopyFrom(const DepthBias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.DepthBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthBias::IsInitialized() const {
  return true;
}

void DepthBias::InternalSwap(DepthBias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(factor_, other->factor_);
  swap(units_, other->units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthBias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stencil::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_Stencil_default_instance_._instance.get_mutable()->op_ = const_cast< ::Tiny3D::Script::ShaderSystem::StencilOp*>(
      ::Tiny3D::Script::ShaderSystem::StencilOp::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_Stencil_default_instance_._instance.get_mutable()->op_back_ = const_cast< ::Tiny3D::Script::ShaderSystem::StencilOp*>(
      ::Tiny3D::Script::ShaderSystem::StencilOp::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_Stencil_default_instance_._instance.get_mutable()->op_front_ = const_cast< ::Tiny3D::Script::ShaderSystem::StencilOp*>(
      ::Tiny3D::Script::ShaderSystem::StencilOp::internal_default_instance());
}
class Stencil::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::StencilOp& op(const Stencil* msg);
  static const ::Tiny3D::Script::ShaderSystem::StencilOp& op_back(const Stencil* msg);
  static const ::Tiny3D::Script::ShaderSystem::StencilOp& op_front(const Stencil* msg);
};

const ::Tiny3D::Script::ShaderSystem::StencilOp&
Stencil::_Internal::op(const Stencil* msg) {
  return *msg->op_;
}
const ::Tiny3D::Script::ShaderSystem::StencilOp&
Stencil::_Internal::op_back(const Stencil* msg) {
  return *msg->op_back_;
}
const ::Tiny3D::Script::ShaderSystem::StencilOp&
Stencil::_Internal::op_front(const Stencil* msg) {
  return *msg->op_front_;
}
Stencil::Stencil()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.Stencil)
}
Stencil::Stencil(const Stencil& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::Tiny3D::Script::ShaderSystem::StencilOp(*from.op_);
  } else {
    op_ = nullptr;
  }
  if (from._internal_has_op_back()) {
    op_back_ = new ::Tiny3D::Script::ShaderSystem::StencilOp(*from.op_back_);
  } else {
    op_back_ = nullptr;
  }
  if (from._internal_has_op_front()) {
    op_front_ = new ::Tiny3D::Script::ShaderSystem::StencilOp(*from.op_front_);
  } else {
    op_front_ = nullptr;
  }
  ::memcpy(&ref_, &from.ref_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_mask_) -
    reinterpret_cast<char*>(&ref_)) + sizeof(write_mask_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.Stencil)
}

void Stencil::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stencil_ShaderScriptObject_2eproto.base);
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_mask_) -
      reinterpret_cast<char*>(&op_)) + sizeof(write_mask_));
}

Stencil::~Stencil() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.Stencil)
  SharedDtor();
}

void Stencil::SharedDtor() {
  if (this != internal_default_instance()) delete op_;
  if (this != internal_default_instance()) delete op_back_;
  if (this != internal_default_instance()) delete op_front_;
}

void Stencil::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stencil& Stencil::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stencil_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Stencil::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.Stencil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && op_back_ != nullptr) {
    delete op_back_;
  }
  op_back_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && op_front_ != nullptr) {
    delete op_front_;
  }
  op_front_ = nullptr;
  ::memset(&ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_mask_) -
      reinterpret_cast<char*>(&ref_)) + sizeof(write_mask_));
  _internal_metadata_.Clear();
}

const char* Stencil::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 read_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          read_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 write_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          write_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.StencilOp op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.StencilOp op_back = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_back(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.StencilOp op_front = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_front(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stencil::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.Stencil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 ref = 1;
  if (this->ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_ref(), target);
  }

  // sint32 read_mask = 2;
  if (this->read_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_read_mask(), target);
  }

  // sint32 write_mask = 3;
  if (this->write_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_write_mask(), target);
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp op = 4;
  if (this->has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::op(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp op_back = 5;
  if (this->has_op_back()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::op_back(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp op_front = 6;
  if (this->has_op_front()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::op_front(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.Stencil)
  return target;
}

size_t Stencil::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.Stencil)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.StencilOp op = 4;
  if (this->has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp op_back = 5;
  if (this->has_op_back()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_back_);
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp op_front = 6;
  if (this->has_op_front()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_front_);
  }

  // sint32 ref = 1;
  if (this->ref() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_ref());
  }

  // sint32 read_mask = 2;
  if (this->read_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_read_mask());
  }

  // sint32 write_mask = 3;
  if (this->write_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_write_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stencil::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.Stencil)
  GOOGLE_DCHECK_NE(&from, this);
  const Stencil* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stencil>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.Stencil)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.Stencil)
    MergeFrom(*source);
  }
}

void Stencil::MergeFrom(const Stencil& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.Stencil)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    _internal_mutable_op()->::Tiny3D::Script::ShaderSystem::StencilOp::MergeFrom(from._internal_op());
  }
  if (from.has_op_back()) {
    _internal_mutable_op_back()->::Tiny3D::Script::ShaderSystem::StencilOp::MergeFrom(from._internal_op_back());
  }
  if (from.has_op_front()) {
    _internal_mutable_op_front()->::Tiny3D::Script::ShaderSystem::StencilOp::MergeFrom(from._internal_op_front());
  }
  if (from.ref() != 0) {
    _internal_set_ref(from._internal_ref());
  }
  if (from.read_mask() != 0) {
    _internal_set_read_mask(from._internal_read_mask());
  }
  if (from.write_mask() != 0) {
    _internal_set_write_mask(from._internal_write_mask());
  }
}

void Stencil::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.Stencil)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stencil::CopyFrom(const Stencil& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.Stencil)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stencil::IsInitialized() const {
  return true;
}

void Stencil::InternalSwap(Stencil* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(op_, other->op_);
  swap(op_back_, other->op_back_);
  swap(op_front_, other->op_front_);
  swap(ref_, other->ref_);
  swap(read_mask_, other->read_mask_);
  swap(write_mask_, other->write_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stencil::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StencilOp::InitAsDefaultInstance() {
}
class StencilOp::_Internal {
 public:
};

StencilOp::StencilOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.StencilOp)
}
StencilOp::StencilOp(const StencilOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&comp_, &from.comp_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_fail_) -
    reinterpret_cast<char*>(&comp_)) + sizeof(z_fail_));
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.StencilOp)
}

void StencilOp::SharedCtor() {
  ::memset(&comp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_fail_) -
      reinterpret_cast<char*>(&comp_)) + sizeof(z_fail_));
}

StencilOp::~StencilOp() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.StencilOp)
  SharedDtor();
}

void StencilOp::SharedDtor() {
}

void StencilOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StencilOp& StencilOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StencilOp_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void StencilOp::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.StencilOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&comp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_fail_) -
      reinterpret_cast<char*>(&comp_)) + sizeof(z_fail_));
  _internal_metadata_.Clear();
}

const char* StencilOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ShaderSystem.Comp comp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_comp(static_cast<::Tiny3D::Script::ShaderSystem::Comp>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.StencilOp.Op pass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_pass(static_cast<::Tiny3D::Script::ShaderSystem::StencilOp_Op>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.StencilOp.Op fail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_fail(static_cast<::Tiny3D::Script::ShaderSystem::StencilOp_Op>(val));
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.StencilOp.Op z_fail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_z_fail(static_cast<::Tiny3D::Script::ShaderSystem::StencilOp_Op>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StencilOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.StencilOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.Comp comp = 1;
  if (this->comp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_comp(), target);
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op pass = 2;
  if (this->pass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pass(), target);
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op fail = 3;
  if (this->fail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_fail(), target);
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op z_fail = 4;
  if (this->z_fail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_z_fail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.StencilOp)
  return target;
}

size_t StencilOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.StencilOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.Comp comp = 1;
  if (this->comp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comp());
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op pass = 2;
  if (this->pass() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pass());
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op fail = 3;
  if (this->fail() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fail());
  }

  // .Tiny3D.Script.ShaderSystem.StencilOp.Op z_fail = 4;
  if (this->z_fail() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_z_fail());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StencilOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.StencilOp)
  GOOGLE_DCHECK_NE(&from, this);
  const StencilOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StencilOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.StencilOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.StencilOp)
    MergeFrom(*source);
  }
}

void StencilOp::MergeFrom(const StencilOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.StencilOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comp() != 0) {
    _internal_set_comp(from._internal_comp());
  }
  if (from.pass() != 0) {
    _internal_set_pass(from._internal_pass());
  }
  if (from.fail() != 0) {
    _internal_set_fail(from._internal_fail());
  }
  if (from.z_fail() != 0) {
    _internal_set_z_fail(from._internal_z_fail());
  }
}

void StencilOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.StencilOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StencilOp::CopyFrom(const StencilOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.StencilOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StencilOp::IsInitialized() const {
  return true;
}

void StencilOp::InternalSwap(StencilOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(comp_, other->comp_);
  swap(pass_, other->pass_);
  swap(fail_, other->fail_);
  swap(z_fail_, other->z_fail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StencilOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Program::InitAsDefaultInstance() {
  ::Tiny3D::Script::ShaderSystem::_Program_default_instance_.source_ = const_cast< ::Tiny3D::Script::ShaderSystem::SourceProgram*>(
      ::Tiny3D::Script::ShaderSystem::SourceProgram::internal_default_instance());
  ::Tiny3D::Script::ShaderSystem::_Program_default_instance_.compiled_ = const_cast< ::Tiny3D::Script::ShaderSystem::CompiledProgram*>(
      ::Tiny3D::Script::ShaderSystem::CompiledProgram::internal_default_instance());
}
class Program::_Internal {
 public:
  static const ::Tiny3D::Script::ShaderSystem::SourceProgram& source(const Program* msg);
  static const ::Tiny3D::Script::ShaderSystem::CompiledProgram& compiled(const Program* msg);
};

const ::Tiny3D::Script::ShaderSystem::SourceProgram&
Program::_Internal::source(const Program* msg) {
  return *msg->ProgramOneof_.source_;
}
const ::Tiny3D::Script::ShaderSystem::CompiledProgram&
Program::_Internal::compiled(const Program* msg) {
  return *msg->ProgramOneof_.compiled_;
}
void Program::set_allocated_source(::Tiny3D::Script::ShaderSystem::SourceProgram* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ProgramOneof();
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    set_has_source();
    ProgramOneof_.source_ = source;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Program.source)
}
void Program::set_allocated_compiled(::Tiny3D::Script::ShaderSystem::CompiledProgram* compiled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ProgramOneof();
  if (compiled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compiled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compiled, submessage_arena);
    }
    set_has_compiled();
    ProgramOneof_.compiled_ = compiled;
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ShaderSystem.Program.compiled)
}
Program::Program()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.Program)
}
Program::Program(const Program& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ProgramOneof();
  switch (from.ProgramOneof_case()) {
    case kSource: {
      _internal_mutable_source()->::Tiny3D::Script::ShaderSystem::SourceProgram::MergeFrom(from._internal_source());
      break;
    }
    case kCompiled: {
      _internal_mutable_compiled()->::Tiny3D::Script::ShaderSystem::CompiledProgram::MergeFrom(from._internal_compiled());
      break;
    }
    case PROGRAMONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.Program)
}

void Program::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Program_ShaderScriptObject_2eproto.base);
  clear_has_ProgramOneof();
}

Program::~Program() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.Program)
  SharedDtor();
}

void Program::SharedDtor() {
  if (has_ProgramOneof()) {
    clear_ProgramOneof();
  }
}

void Program::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Program& Program::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Program_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void Program::clear_ProgramOneof() {
// @@protoc_insertion_point(one_of_clear_start:Tiny3D.Script.ShaderSystem.Program)
  switch (ProgramOneof_case()) {
    case kSource: {
      delete ProgramOneof_.source_;
      break;
    }
    case kCompiled: {
      delete ProgramOneof_.compiled_;
      break;
    }
    case PROGRAMONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROGRAMONEOF_NOT_SET;
}


void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.Program)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ProgramOneof();
  _internal_metadata_.Clear();
}

const char* Program::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ShaderSystem.SourceProgram source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tiny3D.Script.ShaderSystem.CompiledProgram compiled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_compiled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Program::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.Program)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.SourceProgram source = 1;
  if (_internal_has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  // .Tiny3D.Script.ShaderSystem.CompiledProgram compiled = 2;
  if (_internal_has_compiled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::compiled(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.Program)
  return target;
}

size_t Program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.Program)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ProgramOneof_case()) {
    // .Tiny3D.Script.ShaderSystem.SourceProgram source = 1;
    case kSource: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ProgramOneof_.source_);
      break;
    }
    // .Tiny3D.Script.ShaderSystem.CompiledProgram compiled = 2;
    case kCompiled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ProgramOneof_.compiled_);
      break;
    }
    case PROGRAMONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Program::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.Program)
  GOOGLE_DCHECK_NE(&from, this);
  const Program* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Program>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.Program)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.Program)
    MergeFrom(*source);
  }
}

void Program::MergeFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.Program)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ProgramOneof_case()) {
    case kSource: {
      _internal_mutable_source()->::Tiny3D::Script::ShaderSystem::SourceProgram::MergeFrom(from._internal_source());
      break;
    }
    case kCompiled: {
      _internal_mutable_compiled()->::Tiny3D::Script::ShaderSystem::CompiledProgram::MergeFrom(from._internal_compiled());
      break;
    }
    case PROGRAMONEOF_NOT_SET: {
      break;
    }
  }
}

void Program::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {
  return true;
}

void Program::InternalSwap(Program* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ProgramOneof_, other->ProgramOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Program::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceProgram::InitAsDefaultInstance() {
}
class SourceProgram::_Internal {
 public:
};

SourceProgram::SourceProgram()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.SourceProgram)
}
SourceProgram::SourceProgram(const SourceProgram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.SourceProgram)
}

void SourceProgram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceProgram_ShaderScriptObject_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SourceProgram::~SourceProgram() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.SourceProgram)
  SharedDtor();
}

void SourceProgram::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SourceProgram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceProgram& SourceProgram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceProgram_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void SourceProgram::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.SourceProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* SourceProgram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Tiny3D.Script.ShaderSystem.ProgramType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Tiny3D::Script::ShaderSystem::ProgramType>(val));
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.SourceProgram.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceProgram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.SourceProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Tiny3D.Script.ShaderSystem.ProgramType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.SourceProgram.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.SourceProgram)
  return target;
}

size_t SourceProgram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.SourceProgram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .Tiny3D.Script.ShaderSystem.ProgramType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceProgram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.SourceProgram)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceProgram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceProgram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.SourceProgram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.SourceProgram)
    MergeFrom(*source);
  }
}

void SourceProgram::MergeFrom(const SourceProgram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.SourceProgram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SourceProgram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.SourceProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceProgram::CopyFrom(const SourceProgram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.SourceProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceProgram::IsInitialized() const {
  return true;
}

void SourceProgram::InternalSwap(SourceProgram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceProgram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompiledProgram::InitAsDefaultInstance() {
}
class CompiledProgram::_Internal {
 public:
};

CompiledProgram::CompiledProgram()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tiny3D.Script.ShaderSystem.CompiledProgram)
}
CompiledProgram::CompiledProgram(const CompiledProgram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keywords_(from.keywords_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stage().empty()) {
    stage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  entry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entry().empty()) {
    entry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entry_);
  }
  // @@protoc_insertion_point(copy_constructor:Tiny3D.Script.ShaderSystem.CompiledProgram)
}

void CompiledProgram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompiledProgram_ShaderScriptObject_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompiledProgram::~CompiledProgram() {
  // @@protoc_insertion_point(destructor:Tiny3D.Script.ShaderSystem.CompiledProgram)
  SharedDtor();
}

void CompiledProgram::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompiledProgram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompiledProgram& CompiledProgram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompiledProgram_ShaderScriptObject_2eproto.base);
  return *internal_default_instance();
}


void CompiledProgram::Clear() {
// @@protoc_insertion_point(message_clear_start:Tiny3D.Script.ShaderSystem.CompiledProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keywords_.Clear();
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CompiledProgram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.CompiledProgram.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.CompiledProgram.stage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_entry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.CompiledProgram.entry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keywords = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tiny3D.Script.ShaderSystem.CompiledProgram.keywords"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompiledProgram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tiny3D.Script.ShaderSystem.CompiledProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source = 1;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.CompiledProgram.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // string stage = 2;
  if (this->stage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage().data(), static_cast<int>(this->_internal_stage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.CompiledProgram.stage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stage(), target);
  }

  // string entry = 3;
  if (this->entry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entry().data(), static_cast<int>(this->_internal_entry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.CompiledProgram.entry");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entry(), target);
  }

  // repeated string keywords = 4;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tiny3D.Script.ShaderSystem.CompiledProgram.keywords");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tiny3D.Script.ShaderSystem.CompiledProgram)
  return target;
}

size_t CompiledProgram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tiny3D.Script.ShaderSystem.CompiledProgram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keywords_.size());
  for (int i = 0, n = keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keywords_.Get(i));
  }

  // string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string stage = 2;
  if (this->stage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage());
  }

  // string entry = 3;
  if (this->entry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompiledProgram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tiny3D.Script.ShaderSystem.CompiledProgram)
  GOOGLE_DCHECK_NE(&from, this);
  const CompiledProgram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompiledProgram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tiny3D.Script.ShaderSystem.CompiledProgram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tiny3D.Script.ShaderSystem.CompiledProgram)
    MergeFrom(*source);
  }
}

void CompiledProgram::MergeFrom(const CompiledProgram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tiny3D.Script.ShaderSystem.CompiledProgram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keywords_.MergeFrom(from.keywords_);
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.stage().size() > 0) {

    stage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  if (from.entry().size() > 0) {

    entry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entry_);
  }
}

void CompiledProgram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tiny3D.Script.ShaderSystem.CompiledProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompiledProgram::CopyFrom(const CompiledProgram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tiny3D.Script.ShaderSystem.CompiledProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompiledProgram::IsInitialized() const {
  return true;
}

void CompiledProgram::InternalSwap(CompiledProgram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keywords_.InternalSwap(&other->keywords_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stage_.Swap(&other->stage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entry_.Swap(&other->entry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompiledProgram::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ShaderSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Shader* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Shader >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Shader >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Range* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Range >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::PropertyValue* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::PropertyValue >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Property* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Property >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Fallback* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Fallback >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Fallback >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::SubShader_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::SubShader* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::SubShader >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::SubShader >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Pass_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Pass* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Pass >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Pass >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::State* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::State >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::State >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Blend* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Blend >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Blend >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::BlendState* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::BlendState >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::BlendState >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::BlendStateRenderTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::ColorMaskState1* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::ColorMaskState1 >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::ColorMaskState1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::ColorMaskState2* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::ColorMaskState2 >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::ColorMaskState2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::ColorMask* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::ColorMask >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::ColorMask >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::DepthBias* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::DepthBias >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::DepthBias >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Stencil* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Stencil >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Stencil >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::StencilOp* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::StencilOp >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::StencilOp >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::Program* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::Program >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::Program >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::SourceProgram* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::SourceProgram >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::SourceProgram >(arena);
}
template<> PROTOBUF_NOINLINE ::Tiny3D::Script::ShaderSystem::CompiledProgram* Arena::CreateMaybeMessage< ::Tiny3D::Script::ShaderSystem::CompiledProgram >(Arena* arena) {
  return Arena::CreateInternal< ::Tiny3D::Script::ShaderSystem::CompiledProgram >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
